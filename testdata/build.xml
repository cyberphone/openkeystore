<project name="Open Key Store test data" default="help" basedir=".">

  <property name="key.dir" location="keys"/>
  <property name="temp.dir" location=".tmp"/>
  <property name="keyBase" location="keys"/>
  <property name="dataBase" location="data"/>
  <property name="jsonSignatureBase" location="json-signatures"/>
  <property name="cborSignatureBase" location="cbor-signatures"/>
  <property name="jsonEncryptionBase" location="json-encryption"/>
  <property name="cborEncryptionBase" location="cbor-encryption"/>
  <property name="normalizationBase" location="normalization"/>

  <!-- Set to something else if you need it -->
  <property name="bc.prov" value=""/>
  <property name="bc.first" value="false"/>

  <path id="lib.classpath">
    <fileset dir="../library/dist">
       <include name="*.jar"/>
    </fileset>
    <fileset dir="../resources/third-party-jars">
       <include name="*.jar"/>
    </fileset>
  </path>

  <target name="help">
    <echo message="Targets: help createcerts signatures encryption"/>
  </target>
	
  <target name="_compile">
  	<!-- Create temp directory -->
    <delete dir="${temp.dir}"/>
    <mkdir dir="${temp.dir}"/>

  	<!-- Compile -->
    <javac debug="on"
           srcdir="src"
           destdir="${temp.dir}" 
           classpathref="lib.classpath"
           includeAntRuntime="false">
       <compilerarg value="-Xlint:all,-path"/>
    </javac>

  </target>

  <target name="_signatures">
    <!-- Run target -->
    <mkdir dir="${signatureBase}"/>
    <java fork="yes"
          classname="${class}"
          dir="${temp.dir}"
          failonerror="true">
        <classpath>
            <pathelement path="${temp.dir}"/>
            <path refid="lib.classpath"/>
        </classpath>
        <arg value="${keyBase}"/>
        <arg value="${dataBase}"/>
        <arg value="${signatureBase}"/>
        <sysproperty key="bc.prov" value="${bc.prov}"/>
        <sysproperty key="bc.first" value="${bc.first}"/>
        <jvmarg value="-Dfile.encoding=UTF8"/>
    </java>
  </target>

  <target name="signatures" depends="_compile">
    <antcall target="_signatures">
      <param name="class" value="org.webpki.testdata.JsonSignatures"/>
      <param name="signatureBase" value="${jsonSignatureBase}"/>
    </antcall>
    <antcall target="_signatures">
      <param name="class" value="org.webpki.testdata.CborSignatures"/>
      <param name="signatureBase" value="${cborSignatureBase}"/>
    </antcall>
  </target>

  <target name="_encryption">
  	<!-- Run target -->
  	<mkdir dir="${encryptionBase}"/>
    <java fork="yes"
          classname="${class}"
    	  dir="${temp.dir}"
          failonerror="true">
    	<classpath>
            <pathelement path="${temp.dir}"/>
       	    <path refid="lib.classpath"/>
    	</classpath>
        <arg value="${keyBase}"/>
        <arg value="${dataBase}"/>
        <arg value="${encryptionBase}"/>
       	<sysproperty key="bc.prov" value="${bc.prov}"/>
       	<sysproperty key="bc.first" value="${bc.first}"/>
        <jvmarg value="-Dfile.encoding=UTF8"/>
    </java>
  </target>

  <target name="encryption" depends="_compile">
    <antcall target="_encryption">
      <param name="class" value="org.webpki.testdata.JsonEncryption"/>
      <param name="encryptionBase" value="${jsonEncryptionBase}"/>
    </antcall>
    <antcall target="_encryption">
      <param name="class" value="org.webpki.testdata.CborEncryption"/>
      <param name="encryptionBase" value="${cborEncryptionBase}"/>
    </antcall>
  </target>
	
  <target name="_createtestcert">      
   	<antcall target="_createcert">
      <param name="subject" value="Test certificate matching ${keyprefix}privatekey.pem"/>
      <param name="algorithms" value="${algorithm} -sigalg ECDSA_SHA512"/>
      <param name="cmd" value="-out/keyalias example.com:${keyprefix} -ca/addpath all -ca/keypass foo123 -ca/storetype PKCS12 -ca/storepass foo123 -ca/keystore subca.p12 -entity/ee -validity/start 2018-01-01T00:00:00 -validity/end 2030-12-31T23:59:59 -out/storetype PKCS12 -out/keystore ${keyprefix}certificate.p12 -out/storepass foo123 -out/keypass foo123"/>
    </antcall>
    <antcall target="_creatr.jwk-priv.pem-all">
       <param name="keyprefix" value="${keyprefix}"/>
    </antcall>
  </target>

  <target name="_createcert">
    <java fork="yes"
          classname="org.webpki.ca.CommandLineCA"
    	  classpathref="lib.classpath"
       	  dir="${key.dir}"
          failonerror="true">
        <arg line="${cmd} -subject &quot;CN=${subject}&quot; ${algorithms}"/>
    </java>
  </target>

   <target name="_createjwk">
    <java fork="yes"
          classname="org.webpki.tools.KeyStore2JWKConverter"
     	  classpathref="lib.classpath"
    	  dir="${key.dir}"
    	  failonerror="true">
        <arg line="${cmd}"/>
    </java>
   </target>
	
   <target name="_creatr.jwk-priv.pem-all">
    <antcall target="_createpem">
       <param name="cmd" value="${keyprefix}certificate.p12 foo123 ${keyprefix}certpath.pem certpath"/>
    </antcall>
    <antcall target="_createjwk">
       <param name="cmd" value="${keyprefix}certificate.p12 foo123 ${keyprefix}privatekey.jwk private keyid"/>
    </antcall>
    <antcall target="_createpem">
       <param name="cmd" value="${keyprefix}certificate.p12 foo123 ${keyprefix}privatekey.pem private"/>
    </antcall>
    <antcall target="_createpem">
       <param name="cmd" value="${keyprefix}certificate.p12 foo123 ${keyprefix}publickey.pem public"/>
    </antcall>
    <antcall target="_createpem">
       <param name="cmd" value="${keyprefix}certificate.p12 foo123 ${keyprefix}certificate-key.pem private certpath"/>
    </antcall>
   </target>

   <target name="_createpem">
    <java fork="yes"
          classname="org.webpki.tools.KeyStore2PEMConverter"
  	      classpathref="lib.classpath"
    	  dir="${key.dir}"
    	  failonerror="true">
        <arg line="${cmd}"/>
    </java>
   </target>

   <target name="createcerts">

   	<antcall target="_createcert">
       <param name="subject" value="Test Root CA"/>
   	   <param name="algorithms" value="-keysize 4096 -sigalg RSA_SHA512"/>
       <param name="cmd" value="-out/keyalias mykey -selfsigned -entity/ca -validity/start 2015-07-10T10:00:00 -validity/end 2040-07-10T09:59:59 -out/storetype PKCS12 -out/keystore rootca.p12 -out/storepass foo123 -out/keypass foo123 -serial 1"/>
    </antcall>
    <antcall target="_createpem">
       <param name="cmd" value="rootca.p12 foo123 rootca.pem certpath"/>
    </antcall>
    <exec executable="keytool" failonerror="true" dir="${key.dir}">
       <arg line="-exportcert -keystore rootca.p12 -alias mykey -storepass foo123 -storetype PKCS12 -file rootca.cer"/>
    </exec>

   	<antcall target="_createcert">
       <param name="subject" value="Test Sub CA"/>
  	   <param name="algorithms" value="-ecccurve P_521 -sigalg RSA_SHA512"/>
       <param name="cmd" value="-out/keyalias mykey -ca/keypass foo123 -ca/storetype PKCS12 -ca/storepass foo123 -ca/keystore rootca.p12 -entity/ca -validity/start 2016-07-10T10:00:00 -validity/end 2039-07-10T09:59:59 -out/storetype PKCS12 -out/keystore subca.p12 -out/storepass foo123 -out/keypass foo123 -serial 3"/>
    </antcall>

   	<antcall target="_createcert">
       <param name="subject" value="Unknown Root CA"/>
   	   <param name="algorithms" value="-keysize 4096 -sigalg RSA_SHA512"/>
       <param name="cmd" value="-out/keyalias mykey -selfsigned -entity/ca -validity/start 2015-07-10T10:00:00 -validity/end 2030-07-10T09:59:59 -out/storetype PKCS12 -out/keystore unknownca.p12 -out/storepass foo123 -out/keypass foo123 -serial 1"/>
    </antcall>
    <antcall target="_createpem">
       <param name="cmd" value="unknownca.p12 foo123 unknownca.pem certpath"/>
    </antcall>
   	<exec executable="keytool" failonerror="true" dir="${key.dir}">
       <arg line="-exportcert -keystore unknownca.p12 -alias mykey -storepass foo123 -storetype PKCS12 -file unknownca.cer"/>
    </exec>

    <antcall target="_createtestcert">
       <param name="keyprefix" value="r2048"/>
       <param name="algorithm" value="-keysize 2048"/>
    </antcall>

    <antcall target="_createtestcert">
       <param name="keyprefix" value="p256"/>
       <param name="algorithm" value="-ecccurve P_256"/>
    </antcall>

    <antcall target="_createtestcert">
       <param name="keyprefix" value="p256-2"/>
       <param name="algorithm" value="-ecccurve P_256"/>
    </antcall>
   
    <antcall target="_createtestcert">
       <param name="keyprefix" value="p384"/>
       <param name="algorithm" value="-ecccurve P_384"/>
    </antcall>

    <antcall target="_createtestcert">
       <param name="keyprefix" value="p521"/>
       <param name="algorithm" value="-ecccurve P_521"/>
    </antcall>

    <antcall target="_createtestcert">
       <param name="keyprefix" value="ed25519"/>
       <param name="algorithm" value="-ecccurve ED25519"/>
    </antcall>

    <antcall target="_createtestcert">
       <param name="keyprefix" value="ed448"/>
       <param name="algorithm" value="-ecccurve ED448"/>
    </antcall>

    <antcall target="_createtestcert">
       <param name="keyprefix" value="x25519"/>
       <param name="algorithm" value="-ecccurve X25519"/>
    </antcall>

    <antcall target="_createtestcert">
       <param name="keyprefix" value="x448"/>
       <param name="algorithm" value="-ecccurve X448"/>
    </antcall>

   </target>

</project>
