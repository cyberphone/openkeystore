/*
 *  Copyright 2006-2021 WebPKI.org (http://webpki.org).
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */
package org.webpki.json;

import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import java.io.File;
import java.io.IOException;

import java.math.BigDecimal;
import java.math.BigInteger;

import java.security.GeneralSecurityException;
import java.security.KeyFactory;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.KeyStore;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.SecureRandom;

import java.security.interfaces.ECPublicKey;

import java.security.spec.ECPoint;
import java.security.spec.ECPrivateKeySpec;
import java.security.spec.ECPublicKeySpec;
import java.security.spec.X509EncodedKeySpec;

import java.util.GregorianCalendar;
import java.util.Locale;
import java.util.ArrayList;

import javax.crypto.KeyAgreement;

import org.junit.BeforeClass;
import org.junit.Test;

import org.webpki.crypto.AsymSignatureAlgorithms;
import org.webpki.crypto.CertificateUtil;
import org.webpki.crypto.ContentEncryptionAlgorithms;
import org.webpki.crypto.OkpSupport;
import org.webpki.crypto.SignatureWrapper;
import org.webpki.crypto.CustomCryptoProvider;
import org.webpki.crypto.AlgorithmPreferences;
import org.webpki.crypto.EncryptionCore;
import org.webpki.crypto.KeyAlgorithms;
import org.webpki.crypto.KeyEncryptionAlgorithms;
import org.webpki.crypto.KeyStoreVerifier;
import org.webpki.crypto.KeyTypes;
import org.webpki.crypto.HmacAlgorithms;

import org.webpki.jose.jws.JWSAsymKeySigner;
import org.webpki.jose.jws.JWSAsymSignatureValidator;
import org.webpki.jose.jws.JWSDecoder;

import org.webpki.json.JSONCryptoHelper.PUBLIC_KEY_OPTIONS;

import org.webpki.util.ArrayUtil;
import org.webpki.util.Base64URL;
import org.webpki.util.HexaDecimal;
import org.webpki.util.ISODateTime;

/**
 * JSON JUnit suite
 */
public class JSONTest {
    static final String CONTEXT = "http://example.com/test";

    static final String BOOL_TRUE = "boolTrue";
    static final String BOOL_FALSE = "boolFalse";
    static final String BOOL_UNKNOWM = "boolUnknown";

    static final String STRING = "string";
    static final String STRING_VALUE = "Hi!";
    static final String STRING_UNKNOWM = "nostring";

    static final String STRING_WITH_DEFAULT1 = "stringWithDefault1";
    static final String STRING_WITH_DEFAULT2 = "stringWithDefault2";
    static final String STRING_DEFAULT = "defstring";

    static final String BLOB = "blob";
    static final byte[] BLOB_VALUE = {0, 1, 2, 3};

    static final String EMPTY_STRING_LIST = "esl";

    static final String STRING_LIST = "stringlist";
    static final String[] STRING_LIST_VALUE = {"one", "two", "three"};
    static final String SUPER_LONG_LINE = "jurtkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk";

    static final String aliceKey =
            "{\"kty\":\"EC\"," +
            "\"crv\":\"P-256\"," +
            "\"x\":\"Ze2loSV3wrroKUN_4zhwGhCqo3Xhu1td4QjeQ5wIVR0\"," +
            "\"y\":\"HlLtdXARY_f55A3fnzQbPcm6hgr34Mp8p-nuzQCE0Zw\"," +
            "\"d\":\"r_kHyZ-a06rmxM3yESK84r1otSg-aQcVStkRhA-iCM8\"" +
            "}";


    static final String bobKey =
            "{\"kty\":\"EC\"," +
            "\"crv\":\"P-256\"," +
            "\"x\":\"mPUKT_bAWGHIhg0TpjjqVsP1rXWQu_vwVOHHtNkdYoA\"," +
            "\"y\":\"8BQAsImGeAS46fyWw5MhYfGTT0IjBpFw2SS34Dv4Irs\"," +
            "\"d\":\"AtH35vJsQ9SGjYfOsjUxYXQKrPH3FjZHmEtSKoSN8cM\"" +
            "}";

    // From http://tools.ietf.org/html/rfc7520#section-5.4

    static final String jwePlainText = 
        "You can trust us to stick with you through thick and " +
        "thin\u2013to the bitter end. And you can trust us to "+
        "keep any secret of yours\u2013closer than you keep it " +
        "yourself. But you cannot trust us to let you face trouble " +
        "alone, and go off without a word. We are your friends, Frodo.";

    static final String[] ECMAScript_NUMBERS = {
            "-3.3333333333333335E21", "-3.3333333333333335e+21",
            "-3.333333333333333E20", "-333333333333333300000",
            "-3.3333333333333336E19", "-33333333333333336000",
            "-3.333333333333334E18", "-3333333333333334000",
            "-3.3333333333333338E17", "-333333333333333400",
            "-3.333333333333334E16", "-33333333333333340",
            "-3.333333333333334E15", "-3333333333333334",
            "-3.333333333333334E14", "-333333333333333.4",
            "-3.3333333333333344E13", "-33333333333333.344",
            "-3.333333333333334E12", "-3333333333333.334",
            "-3.3333333333333344E11", "-333333333333.33344",
            "-3.333333333333334E10", "-33333333333.33334",
            "-3.333333333333334E9", "-3333333333.333334",
            "-3.333333333333334E8", "-333333333.3333334",
            "-3.3333333333333336E7", "-33333333.333333336",
            "-3333333.3333333335", "-3333333.3333333335",
            "-333333.3333333333", "-333333.3333333333",
            "-33333.333333333336", "-33333.333333333336",
            "-3333.333333333333", "-3333.333333333333",
            "-333.3333333333333", "-333.3333333333333",
            "-33.333333333333336", "-33.333333333333336",
            "-3.3333333333333335", "-3.3333333333333335",
            "-0.3333333333333333", "-0.3333333333333333",
            "-0.03333333333333333", "-0.03333333333333333",
            "-0.0033333333333333335", "-0.0033333333333333335",
            "-3.333333333333333E-4", "-0.0003333333333333333",
            "-3.3333333333333335E-5", "-0.000033333333333333335",
            "-3.3333333333333333E-6", "-0.0000033333333333333333",
            "-3.3333333333333335E-7", "-3.3333333333333335e-7",
            "-3.3333333333333334E-8", "-3.3333333333333334e-8",
            "-3.3333333333333334E-9", "-3.3333333333333334e-9",
            "-3.333333333333333E-10", "-3.333333333333333e-10",
            "-3.3333333333333335E-11", "-3.3333333333333335e-11",
            "-3.333333333333333E-12", "-3.333333333333333e-12",
            "-3.3333333333333334E-13", "-3.3333333333333334e-13",
            "-3.3333333333333334E-14", "-3.3333333333333334e-14",
            "-3.3333333333333332E-15", "-3.3333333333333332e-15",
            "-3.333333333333333E-16", "-3.333333333333333e-16",
            "-3.3333333333333335E-17", "-3.3333333333333335e-17",
            "-3.3333333333333333E-18", "-3.3333333333333333e-18",
            "-3.3333333333333334E-19", "-3.3333333333333334e-19",
            "-3.333333333333333E-20", "-3.333333333333333e-20",
            "-3.3333333333333333E-21", "-3.3333333333333333e-21",
            "-3.333333333333333E-22", "-3.333333333333333e-22",
            "-3.3333333333333333E-23", "-3.3333333333333333e-23",
            "-3.3333333333333334E-24", "-3.3333333333333334e-24",
            "-3.3333333333333335E-25", "-3.3333333333333335e-25",
            "-3.333333333333333E-26", "-3.333333333333333e-26",
            "-3.333333333333333E-27", "-3.333333333333333e-27",
            "-3.3333333333333338E-28", "-3.3333333333333338e-28",
            "3.3333333333333335E21", "3.3333333333333335e+21",
            "3.333333333333333E20", "333333333333333300000",
            "3.3333333333333336E19", "33333333333333336000",
            "3.333333333333334E18", "3333333333333334000",
            "3.3333333333333338E17", "333333333333333400",
            "3.333333333333334E16", "33333333333333340",
            "3.333333333333334E15", "3333333333333334",
            "3.333333333333334E14", "333333333333333.4",
            "3.3333333333333344E13", "33333333333333.344",
            "3.333333333333334E12", "3333333333333.334",
            "3.3333333333333344E11", "333333333333.33344",
            "3.333333333333334E10", "33333333333.33334",
            "3.333333333333334E9", "3333333333.333334",
            "3.333333333333334E8", "333333333.3333334",
            "3.3333333333333336E7", "33333333.333333336",
            "3333333.3333333335", "3333333.3333333335",
            "333333.3333333333", "333333.3333333333",
            "33333.333333333336", "33333.333333333336",
            "3333.333333333333", "3333.333333333333",
            "333.3333333333333", "333.3333333333333",
            "33.333333333333336", "33.333333333333336",
            "3.3333333333333335", "3.3333333333333335",
            "0.3333333333333333", "0.3333333333333333",
            "0.03333333333333333", "0.03333333333333333",
            "0.0033333333333333335", "0.0033333333333333335",
            "3.333333333333333E-4", "0.0003333333333333333",
            "3.3333333333333335E-5", "0.000033333333333333335",
            "3.3333333333333333E-6", "0.0000033333333333333333",
            "3.3333333333333335E-7", "3.3333333333333335e-7",
            "3.3333333333333334E-8", "3.3333333333333334e-8",
            "3.3333333333333334E-9", "3.3333333333333334e-9",
            "3.333333333333333E-10", "3.333333333333333e-10",
            "3.3333333333333335E-11", "3.3333333333333335e-11",
            "3.333333333333333E-12", "3.333333333333333e-12",
            "3.3333333333333334E-13", "3.3333333333333334e-13",
            "3.3333333333333334E-14", "3.3333333333333334e-14",
            "3.3333333333333332E-15", "3.3333333333333332e-15",
            "3.333333333333333E-16", "3.333333333333333e-16",
            "3.3333333333333335E-17", "3.3333333333333335e-17",
            "3.3333333333333333E-18", "3.3333333333333333e-18",
            "3.3333333333333334E-19", "3.3333333333333334e-19",
            "3.333333333333333E-20", "3.333333333333333e-20",
            "3.3333333333333333E-21", "3.3333333333333333e-21",
            "3.333333333333333E-22", "3.333333333333333e-22",
            "3.3333333333333333E-23", "3.3333333333333333e-23",
            "3.3333333333333334E-24", "3.3333333333333334e-24",
            "3.3333333333333335E-25", "3.3333333333333335e-25",
            "3.333333333333333E-26", "3.333333333333333e-26",
            "3.333333333333333E-27", "3.333333333333333e-27",
            "3.3333333333333338E-28", "3.3333333333333338e-28",
            "10.0", "10",
            "0.0", "0",
            "5.0", "5",
            "0.5", "0.5",
            "0.05", "0.05",
            "0.005", "0.005",
            "5.0E-4", "0.0005",
            "5.0E-5", "0.00005",
            "5.0E-6", "0.000005",
            "5.0E-7", "5e-7",
            "5.0E-8", "5e-8",
            "5.0E-9", "5e-9",
            "5.06E-6", "0.00000506",
            "5.006E-6", "0.000005006",
            "5.0006E-6", "0.0000050006",
            "5.00006E-6", "0.00000500006",
            "5.000006E-6", "0.000005000006",
            "5.0000006E-6", "0.0000050000006",
            "5.00000006E-6", "0.00000500000006",
            "5.000000006E-6", "0.000005000000006",
            "5.0000000006E-6", "0.0000050000000006",
            "5.00000000006E-6", "0.00000500000000006",
            "5.000000000006E-6", "0.000005000000000006",
            "5.0000000000006E-6", "0.0000050000000000006",
            "5.00000000000006E-6", "0.00000500000000000006",
            "5.000000000000006E-6", "0.000005000000000000006",
            "5.0E-6", "0.000005",
            "1.0", "1",
            "-1.0", "-1",
            "-0.9999999999999993", "-0.9999999999999993",
            "-0.9999999999999994", "-0.9999999999999994",
            "0.9999999999999993", "0.9999999999999993",
            "0.9999999999999994", "0.9999999999999994",
            "0.9999999999999996", "0.9999999999999996",
            "0.9999999999999998", "0.9999999999999998",
            "-0.9999999999999999", "-0.9999999999999999",
            "-0.9999999999999999", "-0.9999999999999999",
            "0.9999999999999999", "0.9999999999999999",
            "0.9999999999999999", "0.9999999999999999",
            "0.29999999999999993", "0.29999999999999993",
            "0.3", "0.3",
            "0.30000000000000004", "0.30000000000000004",
            "2.22507385850721E-308", "2.22507385850721e-308",
            "2.2250738585072E-308", "2.2250738585072e-308",
            "2.225073858507201E-308", "2.225073858507201e-308",
            "2.225073858507202E-308", "2.225073858507202e-308",
            "2.225073858507203E-308", "2.225073858507203e-308",
            "2.225073858507204E-308", "2.225073858507204e-308",
            "2.225073858507205E-308", "2.225073858507205e-308",
            "2.225073858507206E-308", "2.225073858507206e-308",
            "2.225073858507207E-308", "2.225073858507207e-308",
            "2.225073858507208E-308", "2.225073858507208e-308",
            "2.225073858507209E-308", "2.225073858507209e-308",
            "2.22507385850721E-308", "2.22507385850721e-308",
            "2.225073858507211E-308", "2.225073858507211e-308",
            "2.225073858507212E-308", "2.225073858507212e-308",
            "2.2250738585072127E-308", "2.2250738585072127e-308",
            "2.2250738585072137E-308", "2.2250738585072137e-308",
            "2.2250738585072147E-308", "2.2250738585072147e-308",
            "2.2250738585072157E-308", "2.2250738585072157e-308",
            "2.2250738585072167E-308", "2.2250738585072167e-308",
            "2.2250738585072177E-308", "2.2250738585072177e-308",
            "2.2250738585072187E-308", "2.2250738585072187e-308",
            "2.2250738585072197E-308", "2.2250738585072197e-308",
            "2.2250738585072207E-308", "2.2250738585072207e-308",
            "2.2250738585072216E-308", "2.2250738585072216e-308",
            "2.2250738585072226E-308", "2.2250738585072226e-308",
            "2.2250738585072236E-308", "2.2250738585072236e-308",
            "2.2250738585072246E-308", "2.2250738585072246e-308",
            "2.2250738585072256E-308", "2.2250738585072256e-308",
            "2.2250738585072266E-308", "2.2250738585072266e-308",
            "2.2250738585072276E-308", "2.2250738585072276e-308",
            "2.2250738585072286E-308", "2.2250738585072286e-308",
            "2.2250738585072295E-308", "2.2250738585072295e-308",
            "2.2250738585072305E-308", "2.2250738585072305e-308",
            "2.2250738585072315E-308", "2.2250738585072315e-308",
            "2.2250738585072325E-308", "2.2250738585072325e-308",
            "2.2250738585072335E-308", "2.2250738585072335e-308",
            "2.2250738585072345E-308", "2.2250738585072345e-308",
            "2.2250738585072355E-308", "2.2250738585072355e-308",
            "2.2250738585072365E-308", "2.2250738585072365e-308",
            "2.2250738585072374E-308", "2.2250738585072374e-308",
            "2.2250738585072384E-308", "2.2250738585072384e-308",
            "2.2250738585072394E-308", "2.2250738585072394e-308",
            "2.2250738585072404E-308", "2.2250738585072404e-308",
            "2.2250738585072414E-308", "2.2250738585072414e-308",
            "2.2250738585072424E-308", "2.2250738585072424e-308",
            "2.2250738585072434E-308", "2.2250738585072434e-308",
            "2.2250738585072444E-308", "2.2250738585072444e-308",
            "2.2250738585072454E-308", "2.2250738585072454e-308",
            "2.2250738585072463E-308", "2.2250738585072463e-308",
            "2.2250738585072473E-308", "2.2250738585072473e-308",
            "2.2250738585072483E-308", "2.2250738585072483e-308",
            "2.2250738585072493E-308", "2.2250738585072493e-308",
            "2.2250738585072503E-308", "2.2250738585072503e-308",
            "2.2250738585072513E-308", "2.2250738585072513e-308",
            "2.2250738585072523E-308", "2.2250738585072523e-308",
            "2.2250738585072533E-308", "2.2250738585072533e-308",
            "2.2250738585072542E-308", "2.2250738585072542e-308",
            "2.225073858507255E-308", "2.225073858507255e-308",
            "2.225073858507256E-308", "2.225073858507256e-308",
            "2.225073858507257E-308", "2.225073858507257e-308",
            "2.225073858507258E-308", "2.225073858507258e-308",
            "2.225073858507259E-308", "2.225073858507259e-308",
            "2.22507385850726E-308", "2.22507385850726e-308",
            "2.225073858507261E-308", "2.225073858507261e-308",
            "2.225073858507262E-308", "2.225073858507262e-308",
            "2.225073858507263E-308", "2.225073858507263e-308",
            "2.225073858507264E-308", "2.225073858507264e-308",
            "2.225073858507265E-308", "2.225073858507265e-308",
            "2.225073858507266E-308", "2.225073858507266e-308",
            "2.225073858507267E-308", "2.225073858507267e-308",
            "2.225073858507268E-308", "2.225073858507268e-308",
            "2.225073858507269E-308", "2.225073858507269e-308",
            "2.22507385850727E-308", "2.22507385850727e-308",
            "2.225073858507271E-308", "2.225073858507271e-308",
            "2.225073858507272E-308", "2.225073858507272e-308",
            "2.225073858507273E-308", "2.225073858507273e-308",
            "2.225073858507274E-308", "2.225073858507274e-308",
            "2.225073858507275E-308", "2.225073858507275e-308",
            "2.225073858507276E-308", "2.225073858507276e-308",
            "2.225073858507277E-308", "2.225073858507277e-308",
            "2.225073858507278E-308", "2.225073858507278e-308",
            "2.225073858507279E-308", "2.225073858507279e-308",
            "2.22507385850728E-308", "2.22507385850728e-308",
            "2.225073858507281E-308", "2.225073858507281e-308",
            "2.225073858507282E-308", "2.225073858507282e-308",
            "2.225073858507283E-308", "2.225073858507283e-308",
            "2.225073858507284E-308", "2.225073858507284e-308",
            "2.225073858507285E-308", "2.225073858507285e-308",
            "2.225073858507286E-308", "2.225073858507286e-308",
            "2.225073858507287E-308", "2.225073858507287e-308",
            "2.225073858507288E-308", "2.225073858507288e-308",
            "2.225073858507289E-308", "2.225073858507289e-308",
            "2.22507385850729E-308", "2.22507385850729e-308",
            "2.225073858507291E-308", "2.225073858507291e-308",
            "2.225073858507292E-308", "2.225073858507292e-308",
            "2.225073858507293E-308", "2.225073858507293e-308",
            "2.225073858507294E-308", "2.225073858507294e-308",
            "2.225073858507295E-308", "2.225073858507295e-308",
            "2.2250738585072957E-308", "2.2250738585072957e-308",
            "2.2250738585072967E-308", "2.2250738585072967e-308",
            "2.2250738585072977E-308", "2.2250738585072977e-308",
            "2.2250738585072987E-308", "2.2250738585072987e-308",
            "2.2250738585072997E-308", "2.2250738585072997e-308",
            "2.2250738585073007E-308", "2.2250738585073007e-308",
            "2.2250738585073017E-308", "2.2250738585073017e-308",
            "2.2250738585073027E-308", "2.2250738585073027e-308",
            "2.2250738585073037E-308", "2.2250738585073037e-308",
            "2.2250738585073046E-308", "2.2250738585073046e-308",
            "2.2250738585073056E-308", "2.2250738585073056e-308",
            "2.2250738585073066E-308", "2.2250738585073066e-308",
            "2.2250738585073076E-308", "2.2250738585073076e-308",
            "2.2250738585073086E-308", "2.2250738585073086e-308",
            "2.2250738585073096E-308", "2.2250738585073096e-308",
            "2.2250738585073106E-308", "2.2250738585073106e-308",
            "2.2250738585073116E-308", "2.2250738585073116e-308",
            "2.2250738585073125E-308", "2.2250738585073125e-308",
            "2.2250738585073135E-308", "2.2250738585073135e-308",
            "2.2250738585073145E-308", "2.2250738585073145e-308",
            "2.2250738585073155E-308", "2.2250738585073155e-308",
            "2.2250738585073165E-308", "2.2250738585073165e-308",
            "2.2250738585073175E-308", "2.2250738585073175e-308",
            "2.2250738585073185E-308", "2.2250738585073185e-308",
            "2.2250738585073195E-308", "2.2250738585073195e-308",
            "2.2250738585073205E-308", "2.2250738585073205e-308",
            "2.2250738585073214E-308", "2.2250738585073214e-308",
            "2.2250738585073224E-308", "2.2250738585073224e-308",
            "2.2250738585073234E-308", "2.2250738585073234e-308",
            "2.2250738585073244E-308", "2.2250738585073244e-308",
            "2.2250738585073254E-308", "2.2250738585073254e-308",
            "2.2250738585073264E-308", "2.2250738585073264e-308",
            "2.2250738585073274E-308", "2.2250738585073274e-308",
            "2.2250738585073284E-308", "2.2250738585073284e-308",
            "2.2250738585073293E-308", "2.2250738585073293e-308",
            "2.2250738585073303E-308", "2.2250738585073303e-308",
            "2.2250738585073313E-308", "2.2250738585073313e-308",
            "2.2250738585073323E-308", "2.2250738585073323e-308",
            "2.2250738585073333E-308", "2.2250738585073333e-308",
            "2.2250738585073343E-308", "2.2250738585073343e-308",
            "2.2250738585073353E-308", "2.2250738585073353e-308",
            "2.2250738585073363E-308", "2.2250738585073363e-308",
            "2.2250738585073373E-308", "2.2250738585073373e-308",
            "2.225073858507338E-308", "2.225073858507338e-308",
            "2.225073858507339E-308", "2.225073858507339e-308",
            "2.22507385850734E-308", "2.22507385850734e-308",
            "2.225073858507341E-308", "2.225073858507341e-308",
            "2.225073858507342E-308", "2.225073858507342e-308",
            "2.225073858507343E-308", "2.225073858507343e-308",
            "2.225073858507344E-308", "2.225073858507344e-308",
            "2.225073858507345E-308", "2.225073858507345e-308",
            "2.225073858507346E-308", "2.225073858507346e-308",
            "2.225073858507347E-308", "2.225073858507347e-308",
            "2.225073858507348E-308", "2.225073858507348e-308",
            "2.225073858507349E-308", "2.225073858507349e-308",
            "2.22507385850735E-308", "2.22507385850735e-308",
            "2.225073858507351E-308", "2.225073858507351e-308",
            "2.225073858507352E-308", "2.225073858507352e-308",
            "2.225073858507353E-308", "2.225073858507353e-308",
            "2.225073858507354E-308", "2.225073858507354e-308",
            "2.225073858507355E-308", "2.225073858507355e-308",
            "2.225073858507356E-308", "2.225073858507356e-308",
            "2.225073858507357E-308", "2.225073858507357e-308",
            "2.225073858507358E-308", "2.225073858507358e-308",
            "2.225073858507359E-308", "2.225073858507359e-308",
            "2.22507385850736E-308", "2.22507385850736e-308",
            "2.225073858507361E-308", "2.225073858507361e-308",
            "2.225073858507362E-308", "2.225073858507362e-308",
            "2.225073858507363E-308", "2.225073858507363e-308",
            "2.225073858507364E-308", "2.225073858507364e-308",
            "2.225073858507365E-308", "2.225073858507365e-308",
            "2.225073858507366E-308", "2.225073858507366e-308",
            "2.225073858507367E-308", "2.225073858507367e-308",
            "2.225073858507368E-308", "2.225073858507368e-308",
            "2.225073858507369E-308", "2.225073858507369e-308",
            "2.22507385850737E-308", "2.22507385850737e-308",
            "2.225073858507371E-308", "2.225073858507371e-308",
            "2.225073858507372E-308", "2.225073858507372e-308",
            "2.225073858507373E-308", "2.225073858507373e-308",
            "2.225073858507374E-308", "2.225073858507374e-308",
            "2.225073858507375E-308", "2.225073858507375e-308",
            "2.225073858507376E-308", "2.225073858507376e-308",
            "2.225073858507377E-308", "2.225073858507377e-308",
            "2.225073858507378E-308", "2.225073858507378e-308",
            "2.2250738585073788E-308", "2.2250738585073788e-308",
            "2.2250738585073797E-308", "2.2250738585073797e-308",
            "2.2250738585073807E-308", "2.2250738585073807e-308",
            "2.2250738585073817E-308", "2.2250738585073817e-308",
            "2.2250738585073827E-308", "2.2250738585073827e-308",
            "2.2250738585073837E-308", "2.2250738585073837e-308",
            "2.2250738585073847E-308", "2.2250738585073847e-308",
            "2.2250738585073857E-308", "2.2250738585073857e-308",
            "2.2250738585073867E-308", "2.2250738585073867e-308",
            "2.2250738585073876E-308", "2.2250738585073876e-308",
            "2.2250738585073886E-308", "2.2250738585073886e-308",
            "2.2250738585073896E-308", "2.2250738585073896e-308",
            "2.2250738585073906E-308", "2.2250738585073906e-308",
            "2.2250738585073916E-308", "2.2250738585073916e-308",
            "2.2250738585073926E-308", "2.2250738585073926e-308",
            "2.2250738585073936E-308", "2.2250738585073936e-308",
            "2.2250738585073946E-308", "2.2250738585073946e-308",
            "2.2250738585073956E-308", "2.2250738585073956e-308",
            "2.2250738585073965E-308", "2.2250738585073965e-308",
            "2.2250738585073975E-308", "2.2250738585073975e-308",
            "2.2250738585073985E-308", "2.2250738585073985e-308",
            "2.2250738585073995E-308", "2.2250738585073995e-308",
            "2.2250738585074005E-308", "2.2250738585074005e-308",
            "2.2250738585074015E-308", "2.2250738585074015e-308",
            "2.2250738585074025E-308", "2.2250738585074025e-308",
            "2.2250738585074035E-308", "2.2250738585074035e-308",
            "2.2250738585074044E-308", "2.2250738585074044e-308",
            "2.2250738585074054E-308", "2.2250738585074054e-308",
            "2.2250738585074064E-308", "2.2250738585074064e-308",
            "2.2250738585074074E-308", "2.2250738585074074e-308",
            "2.2250738585074084E-308", "2.2250738585074084e-308",
            "2.2250738585074094E-308", "2.2250738585074094e-308",
            "2.2250738585074104E-308", "2.2250738585074104e-308",
            "2.2250738585074114E-308", "2.2250738585074114e-308",
            "2.2250738585074123E-308", "2.2250738585074123e-308",
            "2.2250738585074133E-308", "2.2250738585074133e-308",
            "2.2250738585074143E-308", "2.2250738585074143e-308",
            "2.2250738585074153E-308", "2.2250738585074153e-308",
            "2.2250738585074163E-308", "2.2250738585074163e-308",
            "2.2250738585074173E-308", "2.2250738585074173e-308",
            "2.2250738585074183E-308", "2.2250738585074183e-308",
            "2.2250738585074193E-308", "2.2250738585074193e-308",
            "2.2250738585074203E-308", "2.2250738585074203e-308",
            "2.225073858507421E-308", "2.225073858507421e-308",
            "2.225073858507422E-308", "2.225073858507422e-308",
            "2.225073858507423E-308", "2.225073858507423e-308",
            "2.225073858507424E-308", "2.225073858507424e-308",
            "2.225073858507425E-308", "2.225073858507425e-308",
            "2.225073858507426E-308", "2.225073858507426e-308",
            "2.225073858507427E-308", "2.225073858507427e-308",
            "2.225073858507428E-308", "2.225073858507428e-308",
            "2.225073858507429E-308", "2.225073858507429e-308",
            "2.22507385850743E-308", "2.22507385850743e-308",
            "2.225073858507431E-308", "2.225073858507431e-308",
            "2.225073858507432E-308", "2.225073858507432e-308",
            "2.225073858507433E-308", "2.225073858507433e-308",
            "2.225073858507434E-308", "2.225073858507434e-308",
            "2.225073858507435E-308", "2.225073858507435e-308",
            "2.225073858507436E-308", "2.225073858507436e-308",
            "2.225073858507437E-308", "2.225073858507437e-308",
            "2.225073858507438E-308", "2.225073858507438e-308",
            "2.225073858507439E-308", "2.225073858507439e-308",
            "2.22507385850744E-308", "2.22507385850744e-308",
            "2.225073858507441E-308", "2.225073858507441e-308",
            "2.225073858507442E-308", "2.225073858507442e-308",
            "2.225073858507443E-308", "2.225073858507443e-308",
            "2.225073858507444E-308", "2.225073858507444e-308",
            "2.225073858507445E-308", "2.225073858507445e-308",
            "2.225073858507446E-308", "2.225073858507446e-308",
            "2.225073858507447E-308", "2.225073858507447e-308",
            "2.225073858507448E-308", "2.225073858507448e-308",
            "2.225073858507449E-308", "2.225073858507449e-308",
            "2.22507385850745E-308", "2.22507385850745e-308",
            "2.225073858507451E-308", "2.225073858507451e-308",
            "2.225073858507452E-308", "2.225073858507452e-308",
            "2.225073858507453E-308", "2.225073858507453e-308",
            "2.225073858507454E-308", "2.225073858507454e-308",
            "2.225073858507455E-308", "2.225073858507455e-308",
            "2.225073858507456E-308", "2.225073858507456e-308",
            "2.225073858507457E-308", "2.225073858507457e-308",
            "2.225073858507458E-308", "2.225073858507458e-308",
            "2.225073858507459E-308", "2.225073858507459e-308",
            "2.22507385850746E-308", "2.22507385850746e-308",
            "2.225073858507461E-308", "2.225073858507461e-308",
            "2.225073858507462E-308", "2.225073858507462e-308",
            "2.2250738585074627E-308", "2.2250738585074627e-308",
            "2.2250738585074637E-308", "2.2250738585074637e-308",
            "2.2250738585074647E-308", "2.2250738585074647e-308",
            "2.2250738585074657E-308", "2.2250738585074657e-308",
            "2.2250738585074667E-308", "2.2250738585074667e-308",
            "2.2250738585074677E-308", "2.2250738585074677e-308",
            "2.2250738585074687E-308", "2.2250738585074687e-308",
            "2.2250738585074697E-308", "2.2250738585074697e-308",
            "2.2250738585074706E-308", "2.2250738585074706e-308",
            "2.2250738585074716E-308", "2.2250738585074716e-308",
            "2.2250738585074726E-308", "2.2250738585074726e-308",
            "2.2250738585074736E-308", "2.2250738585074736e-308",
            "2.2250738585074746E-308", "2.2250738585074746e-308",
            "2.2250738585074756E-308", "2.2250738585074756e-308",
            "2.2250738585074766E-308", "2.2250738585074766e-308",
            "2.2250738585074776E-308", "2.2250738585074776e-308",
            "2.2250738585074786E-308", "2.2250738585074786e-308",
            "2.2250738585074795E-308", "2.2250738585074795e-308",
            "2.2250738585074805E-308", "2.2250738585074805e-308",
            "2.2250738585074815E-308", "2.2250738585074815e-308",
            "2.2250738585074825E-308", "2.2250738585074825e-308",
            "2.2250738585074835E-308", "2.2250738585074835e-308",
            "2.2250738585074845E-308", "2.2250738585074845e-308",
            "2.2250738585074855E-308", "2.2250738585074855e-308",
            "2.2250738585074865E-308", "2.2250738585074865e-308",
            "2.2250738585074874E-308", "2.2250738585074874e-308",
            "2.2250738585074884E-308", "2.2250738585074884e-308",
            "2.2250738585074894E-308", "2.2250738585074894e-308",
            "2.2250738585074904E-308", "2.2250738585074904e-308",
            "2.2250738585074914E-308", "2.2250738585074914e-308",
            "2.2250738585074924E-308", "2.2250738585074924e-308",
            "2.2250738585074934E-308", "2.2250738585074934e-308",
            "2.2250738585074944E-308", "2.2250738585074944e-308",
            "2.2250738585074954E-308", "2.2250738585074954e-308",
            "2.2250738585074963E-308", "2.2250738585074963e-308",
            "2.2250738585074973E-308", "2.2250738585074973e-308",
            "2.2250738585074983E-308", "2.2250738585074983e-308",
            "2.2250738585074993E-308", "2.2250738585074993e-308",
            "2.2250738585075003E-308", "2.2250738585075003e-308",
            "2.2250738585075013E-308", "2.2250738585075013e-308",
            "2.2250738585075023E-308", "2.2250738585075023e-308",
            "2.2250738585075033E-308", "2.2250738585075033e-308",
            "2.225073858507504E-308", "2.225073858507504e-308",
            "2.225073858507505E-308", "2.225073858507505e-308",
            "2.225073858507506E-308", "2.225073858507506e-308",
            "2.225073858507507E-308", "2.225073858507507e-308",
            "2.225073858507508E-308", "2.225073858507508e-308",
            "2.225073858507509E-308", "2.225073858507509e-308",
            "2.22507385850751E-308", "2.22507385850751e-308",
            "2.225073858507511E-308", "2.225073858507511e-308",
            "2.225073858507512E-308", "2.225073858507512e-308",
            "2.225073858507513E-308", "2.225073858507513e-308",
            "2.225073858507514E-308", "2.225073858507514e-308",
            "2.225073858507515E-308", "2.225073858507515e-308",
            "2.225073858507516E-308", "2.225073858507516e-308",
            "2.225073858507517E-308", "2.225073858507517e-308",
            "2.225073858507518E-308", "2.225073858507518e-308",
            "2.225073858507519E-308", "2.225073858507519e-308",
            "2.22507385850752E-308", "2.22507385850752e-308",
            "2.225073858507521E-308", "2.225073858507521e-308",
            "2.225073858507522E-308", "2.225073858507522e-308",
            "2.225073858507523E-308", "2.225073858507523e-308",
            "2.225073858507524E-308", "2.225073858507524e-308",
            "2.225073858507525E-308", "2.225073858507525e-308",
            "2.225073858507526E-308", "2.225073858507526e-308",
            "2.225073858507527E-308", "2.225073858507527e-308",
            "2.225073858507528E-308", "2.225073858507528e-308",
            "2.225073858507529E-308", "2.225073858507529e-308",
            "2.22507385850753E-308", "2.22507385850753e-308",
            "2.225073858507531E-308", "2.225073858507531e-308",
            "2.225073858507532E-308", "2.225073858507532e-308",
            "2.225073858507533E-308", "2.225073858507533e-308",
            "2.225073858507534E-308", "2.225073858507534e-308",
            "2.225073858507535E-308", "2.225073858507535e-308",
            "2.225073858507536E-308", "2.225073858507536e-308",
            "2.225073858507537E-308", "2.225073858507537e-308",
            "2.225073858507538E-308", "2.225073858507538e-308",
            "2.225073858507539E-308", "2.225073858507539e-308",
            "2.22507385850754E-308", "2.22507385850754e-308",
            "2.225073858507541E-308", "2.225073858507541e-308",
            "2.225073858507542E-308", "2.225073858507542e-308",
            "2.225073858507543E-308", "2.225073858507543e-308",
            "2.225073858507544E-308", "2.225073858507544e-308",
            "2.225073858507545E-308", "2.225073858507545e-308",
            "2.2250738585075457E-308", "2.2250738585075457e-308",
            "2.2250738585075467E-308", "2.2250738585075467e-308",
            "2.2250738585075477E-308", "2.2250738585075477e-308",
            "2.2250738585075487E-308", "2.2250738585075487e-308",
            "2.2250738585075497E-308", "2.2250738585075497e-308",
            "2.2250738585075507E-308", "2.2250738585075507e-308",
            "2.2250738585075517E-308", "2.2250738585075517e-308",
            "2.2250738585075527E-308", "2.2250738585075527e-308",
            "2.2250738585075537E-308", "2.2250738585075537e-308",
            "2.2250738585075546E-308", "2.2250738585075546e-308",
            "2.2250738585075556E-308", "2.2250738585075556e-308",
            "2.2250738585075566E-308", "2.2250738585075566e-308",
            "2.2250738585075576E-308", "2.2250738585075576e-308",
            "2.2250738585075586E-308", "2.2250738585075586e-308",
            "2.2250738585075596E-308", "2.2250738585075596e-308",
            "2.2250738585075606E-308", "2.2250738585075606e-308",
            "2.2250738585075616E-308", "2.2250738585075616e-308",
            "2.2250738585075625E-308", "2.2250738585075625e-308",
            "2.2250738585075635E-308", "2.2250738585075635e-308",
            "2.2250738585075645E-308", "2.2250738585075645e-308",
            "2.2250738585075655E-308", "2.2250738585075655e-308",
            "2.2250738585075665E-308", "2.2250738585075665e-308",
            "2.2250738585075675E-308", "2.2250738585075675e-308",
            "2.2250738585075685E-308", "2.2250738585075685e-308",
            "2.2250738585075695E-308", "2.2250738585075695e-308",
            "2.2250738585075705E-308", "2.2250738585075705e-308",
            "2.2250738585075714E-308", "2.2250738585075714e-308",
            "2.2250738585075724E-308", "2.2250738585075724e-308",
            "2.2250738585075734E-308", "2.2250738585075734e-308",
            "2.2250738585075744E-308", "2.2250738585075744e-308",
            "2.2250738585075754E-308", "2.2250738585075754e-308",
            "2.2250738585075764E-308", "2.2250738585075764e-308",
            "2.2250738585075774E-308", "2.2250738585075774e-308",
            "2.2250738585075784E-308", "2.2250738585075784e-308",
            "2.2250738585075793E-308", "2.2250738585075793e-308",
            "2.2250738585075803E-308", "2.2250738585075803e-308",
            "2.2250738585075813E-308", "2.2250738585075813e-308",
            "2.2250738585075823E-308", "2.2250738585075823e-308",
            "2.2250738585075833E-308", "2.2250738585075833e-308",
            "2.2250738585075843E-308", "2.2250738585075843e-308",
            "2.2250738585075853E-308", "2.2250738585075853e-308",
            "2.2250738585075863E-308", "2.2250738585075863e-308",
            "2.2250738585075872E-308", "2.2250738585075872e-308",
            "2.225073858507588E-308", "2.225073858507588e-308",
            "2.225073858507589E-308", "2.225073858507589e-308",
            "2.22507385850759E-308", "2.22507385850759e-308",
            "2.225073858507591E-308", "2.225073858507591e-308",
            "2.225073858507592E-308", "2.225073858507592e-308",
            "2.225073858507593E-308", "2.225073858507593e-308",
            "2.225073858507594E-308", "2.225073858507594e-308",
            "2.225073858507595E-308", "2.225073858507595e-308",
            "2.225073858507596E-308", "2.225073858507596e-308",
            "2.225073858507597E-308", "2.225073858507597e-308",
            "2.225073858507598E-308", "2.225073858507598e-308",
            "2.225073858507599E-308", "2.225073858507599e-308",
            "2.2250738585076E-308", "2.2250738585076e-308",
            "2.225073858507601E-308", "2.225073858507601e-308",
            "2.225073858507602E-308", "2.225073858507602e-308",
            "2.225073858507603E-308", "2.225073858507603e-308",
            "2.225073858507604E-308", "2.225073858507604e-308",
            "2.225073858507605E-308", "2.225073858507605e-308",
            "2.225073858507606E-308", "2.225073858507606e-308",
            "2.225073858507607E-308", "2.225073858507607e-308",
            "2.225073858507608E-308", "2.225073858507608e-308",
            "2.225073858507609E-308", "2.225073858507609e-308",
            "2.22507385850761E-308", "2.22507385850761e-308",
            "2.225073858507611E-308", "2.225073858507611e-308",
            "2.225073858507612E-308", "2.225073858507612e-308",
            "2.225073858507613E-308", "2.225073858507613e-308",
            "2.225073858507614E-308", "2.225073858507614e-308",
            "2.225073858507615E-308", "2.225073858507615e-308",
            "2.225073858507616E-308", "2.225073858507616e-308",
            "2.225073858507617E-308", "2.225073858507617e-308",
            "2.225073858507618E-308", "2.225073858507618e-308",
            "2.225073858507619E-308", "2.225073858507619e-308",
            "2.22507385850762E-308", "2.22507385850762e-308",
            "2.225073858507621E-308", "2.225073858507621e-308",
            "2.225073858507622E-308", "2.225073858507622e-308",
            "2.225073858507623E-308", "2.225073858507623e-308",
            "2.225073858507624E-308", "2.225073858507624e-308",
            "2.225073858507625E-308", "2.225073858507625e-308",
            "2.225073858507626E-308", "2.225073858507626e-308",
            "2.225073858507627E-308", "2.225073858507627e-308",
            "2.225073858507628E-308", "2.225073858507628e-308",
            "2.2250738585076287E-308", "2.2250738585076287e-308",
            "2.2250738585076297E-308", "2.2250738585076297e-308",
            "2.2250738585076307E-308", "2.2250738585076307e-308",
            "2.2250738585076317E-308", "2.2250738585076317e-308",
            "2.2250738585076327E-308", "2.2250738585076327e-308",
            "2.2250738585076337E-308", "2.2250738585076337e-308",
            "2.2250738585076347E-308", "2.2250738585076347e-308",
            "2.2250738585076357E-308", "2.2250738585076357e-308",
            "2.2250738585076367E-308", "2.2250738585076367e-308",
            "2.2250738585076376E-308", "2.2250738585076376e-308",
            "2.2250738585076386E-308", "2.2250738585076386e-308",
            "2.2250738585076396E-308", "2.2250738585076396e-308",
            "2.2250738585076406E-308", "2.2250738585076406e-308",
            "2.2250738585076416E-308", "2.2250738585076416e-308",
            "2.2250738585076426E-308", "2.2250738585076426e-308",
            "2.2250738585076436E-308", "2.2250738585076436e-308",
            "2.2250738585076446E-308", "2.2250738585076446e-308",
            "2.2250738585076455E-308", "2.2250738585076455e-308",
            "2.2250738585076465E-308", "2.2250738585076465e-308",
            "2.2250738585076475E-308", "2.2250738585076475e-308",
            "2.2250738585076485E-308", "2.2250738585076485e-308",
            "2.2250738585076495E-308", "2.2250738585076495e-308",
            "2.2250738585076505E-308", "2.2250738585076505e-308",
            "2.2250738585076515E-308", "2.2250738585076515e-308",
            "2.2250738585076525E-308", "2.2250738585076525e-308",
            "2.2250738585076535E-308", "2.2250738585076535e-308",
            "2.2250738585076544E-308", "2.2250738585076544e-308",
            "2.2250738585076554E-308", "2.2250738585076554e-308",
            "2.2250738585076564E-308", "2.2250738585076564e-308",
            "2.2250738585076574E-308", "2.2250738585076574e-308",
            "2.2250738585076584E-308", "2.2250738585076584e-308",
            "2.2250738585076594E-308", "2.2250738585076594e-308",
            "2.2250738585076604E-308", "2.2250738585076604e-308",
            "2.2250738585076614E-308", "2.2250738585076614e-308",
            "2.2250738585076623E-308", "2.2250738585076623e-308",
            "2.2250738585076633E-308", "2.2250738585076633e-308",
            "2.2250738585076643E-308", "2.2250738585076643e-308",
            "2.2250738585076653E-308", "2.2250738585076653e-308",
            "2.2250738585076663E-308", "2.2250738585076663e-308",
            "2.2250738585076673E-308", "2.2250738585076673e-308",
            "2.2250738585076683E-308", "2.2250738585076683e-308",
            "2.2250738585076693E-308", "2.2250738585076693e-308",
            "2.2250738585076703E-308", "2.2250738585076703e-308",
            "2.225073858507671E-308", "2.225073858507671e-308",
            "2.225073858507672E-308", "2.225073858507672e-308",
            "2.225073858507673E-308", "2.225073858507673e-308",
            "2.225073858507674E-308", "2.225073858507674e-308",
            "2.225073858507675E-308", "2.225073858507675e-308",
            "2.225073858507676E-308", "2.225073858507676e-308",
            "2.225073858507677E-308", "2.225073858507677e-308",
            "2.225073858507678E-308", "2.225073858507678e-308",
            "2.225073858507679E-308", "2.225073858507679e-308",
            "2.22507385850768E-308", "2.22507385850768e-308",
            "2.225073858507681E-308", "2.225073858507681e-308",
            "2.225073858507682E-308", "2.225073858507682e-308",
            "2.225073858507683E-308", "2.225073858507683e-308",
            "2.225073858507684E-308", "2.225073858507684e-308",
            "2.225073858507685E-308", "2.225073858507685e-308",
            "2.225073858507686E-308", "2.225073858507686e-308",
            "2.225073858507687E-308", "2.225073858507687e-308",
            "2.225073858507688E-308", "2.225073858507688e-308",
            "2.225073858507689E-308", "2.225073858507689e-308",
            "2.22507385850769E-308", "2.22507385850769e-308",
            "2.225073858507691E-308", "2.225073858507691e-308",
            "2.225073858507692E-308", "2.225073858507692e-308",
            "2.225073858507693E-308", "2.225073858507693e-308",
            "2.225073858507694E-308", "2.225073858507694e-308",
            "2.225073858507695E-308", "2.225073858507695e-308",
            "2.225073858507696E-308", "2.225073858507696e-308",
            "2.225073858507697E-308", "2.225073858507697e-308",
            "2.225073858507698E-308", "2.225073858507698e-308",
            "2.225073858507699E-308", "2.225073858507699e-308",
            "2.2250738585077E-308", "2.2250738585077e-308",
            "2.225073858507701E-308", "2.225073858507701e-308",
            "2.225073858507702E-308", "2.225073858507702e-308",
            "2.225073858507703E-308", "2.225073858507703e-308",
            "2.225073858507704E-308", "2.225073858507704e-308",
            "2.225073858507705E-308", "2.225073858507705e-308",
            "2.225073858507706E-308", "2.225073858507706e-308",
            "2.225073858507707E-308", "2.225073858507707e-308",
            "2.225073858507708E-308", "2.225073858507708e-308",
            "2.225073858507709E-308", "2.225073858507709e-308",
            "2.22507385850771E-308", "2.22507385850771e-308",
            "2.225073858507711E-308", "2.225073858507711e-308",
            "2.2250738585077118E-308", "2.2250738585077118e-308",
            "2.2250738585077127E-308", "2.2250738585077127e-308",
            "2.2250738585077137E-308", "2.2250738585077137e-308",
            "2.2250738585077147E-308", "2.2250738585077147e-308",
            "2.2250738585077157E-308", "2.2250738585077157e-308",
            "2.2250738585077167E-308", "2.2250738585077167e-308",
            "2.2250738585077177E-308", "2.2250738585077177e-308",
            "2.2250738585077187E-308", "2.2250738585077187e-308",
            "2.2250738585077197E-308", "2.2250738585077197e-308",
            "2.2250738585077206E-308", "2.2250738585077206e-308",
            "2.2250738585077216E-308", "2.2250738585077216e-308",
            "2.2250738585077226E-308", "2.2250738585077226e-308",
            "2.2250738585077236E-308", "2.2250738585077236e-308",
            "2.2250738585077246E-308", "2.2250738585077246e-308",
            "2.2250738585077256E-308", "2.2250738585077256e-308",
            "2.2250738585077266E-308", "2.2250738585077266e-308",
            "2.2250738585077276E-308", "2.2250738585077276e-308",
            "2.2250738585077286E-308", "2.2250738585077286e-308",
            "2.2250738585077295E-308", "2.2250738585077295e-308",
            "2.2250738585077305E-308", "2.2250738585077305e-308",
            "2.2250738585077315E-308", "2.2250738585077315e-308",
            "2.2250738585077325E-308", "2.2250738585077325e-308",
            "2.2250738585077335E-308", "2.2250738585077335e-308",
            "2.2250738585077345E-308", "2.2250738585077345e-308",
            "2.2250738585077355E-308", "2.2250738585077355e-308",
            "2.2250738585077365E-308", "2.2250738585077365e-308",
            "2.2250738585077374E-308", "2.2250738585077374e-308",
            "2.2250738585077384E-308", "2.2250738585077384e-308",
            "2.2250738585077394E-308", "2.2250738585077394e-308",
            "2.2250738585077404E-308", "2.2250738585077404e-308",
            "2.2250738585077414E-308", "2.2250738585077414e-308",
            "2.2250738585077424E-308", "2.2250738585077424e-308",
            "2.2250738585077434E-308", "2.2250738585077434e-308",
            "2.2250738585077444E-308", "2.2250738585077444e-308",
            "2.2250738585077453E-308", "2.2250738585077453e-308",
            "2.2250738585077463E-308", "2.2250738585077463e-308",
            "2.2250738585077473E-308", "2.2250738585077473e-308",
            "2.2250738585077483E-308", "2.2250738585077483e-308",
            "2.2250738585077493E-308", "2.2250738585077493e-308",
            "2.2250738585077503E-308", "2.2250738585077503e-308",
            "2.2250738585077513E-308", "2.2250738585077513e-308",
            "2.2250738585077523E-308", "2.2250738585077523e-308",
            "2.2250738585077533E-308", "2.2250738585077533e-308",
            "2.225073858507754E-308", "2.225073858507754e-308",
            "2.225073858507755E-308", "2.225073858507755e-308",
            "2.225073858507756E-308", "2.225073858507756e-308",
            "2.225073858507757E-308", "2.225073858507757e-308",
            "2.225073858507758E-308", "2.225073858507758e-308",
            "2.225073858507759E-308", "2.225073858507759e-308",
            "2.22507385850776E-308", "2.22507385850776e-308",
            "2.225073858507761E-308", "2.225073858507761e-308",
            "2.225073858507762E-308", "2.225073858507762e-308",
            "2.225073858507763E-308", "2.225073858507763e-308",
            "2.225073858507764E-308", "2.225073858507764e-308",
            "2.225073858507765E-308", "2.225073858507765e-308",
            "2.225073858507766E-308", "2.225073858507766e-308",
            "2.225073858507767E-308", "2.225073858507767e-308",
            "2.225073858507768E-308", "2.225073858507768e-308",
            "2.225073858507769E-308", "2.225073858507769e-308",
            "2.22507385850777E-308", "2.22507385850777e-308",
            "2.225073858507771E-308", "2.225073858507771e-308",
            "2.225073858507772E-308", "2.225073858507772e-308",
            "2.225073858507773E-308", "2.225073858507773e-308",
            "2.225073858507774E-308", "2.225073858507774e-308",
            "2.225073858507775E-308", "2.225073858507775e-308",
            "2.225073858507776E-308", "2.225073858507776e-308",
            "2.225073858507777E-308", "2.225073858507777e-308",
            "2.225073858507778E-308", "2.225073858507778e-308",
            "2.225073858507779E-308", "2.225073858507779e-308",
            "2.22507385850778E-308", "2.22507385850778e-308",
            "2.225073858507781E-308", "2.225073858507781e-308",
            "2.225073858507782E-308", "2.225073858507782e-308",
            "2.225073858507783E-308", "2.225073858507783e-308",
            "2.225073858507784E-308", "2.225073858507784e-308",
            "2.225073858507785E-308", "2.225073858507785e-308",
            "2.225073858507786E-308", "2.225073858507786e-308",
            "2.225073858507787E-308", "2.225073858507787e-308",
            "2.225073858507788E-308", "2.225073858507788e-308",
            "2.225073858507789E-308", "2.225073858507789e-308",
            "2.22507385850779E-308", "2.22507385850779e-308",
            "2.225073858507791E-308", "2.225073858507791e-308",
            "2.225073858507792E-308", "2.225073858507792e-308",
            "2.225073858507793E-308", "2.225073858507793e-308",
            "2.225073858507794E-308", "2.225073858507794e-308",
            "2.225073858507795E-308", "2.225073858507795e-308",
            "2.2250738585077957E-308", "2.2250738585077957e-308",
            "2.2250738585077967E-308", "2.2250738585077967e-308",
            "2.2250738585077977E-308", "2.2250738585077977e-308",
            "2.2250738585077987E-308", "2.2250738585077987e-308",
            "2.2250738585077997E-308", "2.2250738585077997e-308",
            "2.2250738585078007E-308", "2.2250738585078007e-308",
            "2.2250738585078017E-308", "2.2250738585078017e-308",
            "2.2250738585078027E-308", "2.2250738585078027e-308",
            "2.2250738585078036E-308", "2.2250738585078036e-308",
            "2.2250738585078046E-308", "2.2250738585078046e-308",
            "2.2250738585078056E-308", "2.2250738585078056e-308",
            "2.2250738585078066E-308", "2.2250738585078066e-308",
            "2.2250738585078076E-308", "2.2250738585078076e-308",
            "2.2250738585078086E-308", "2.2250738585078086e-308",
            "2.2250738585078096E-308", "2.2250738585078096e-308",
            "2.2250738585078106E-308", "2.2250738585078106e-308",
            "2.2250738585078116E-308", "2.2250738585078116e-308",
            "2.2250738585078125E-308", "2.2250738585078125e-308",
            "2.2250738585078135E-308", "2.2250738585078135e-308",
            "2.2250738585078145E-308", "2.2250738585078145e-308",
            "2.2250738585078155E-308", "2.2250738585078155e-308",
            "2.2250738585078165E-308", "2.2250738585078165e-308",
            "2.2250738585078175E-308", "2.2250738585078175e-308",
            "2.2250738585078185E-308", "2.2250738585078185e-308",
            "2.2250738585078195E-308", "2.2250738585078195e-308",
            "2.2250738585078204E-308", "2.2250738585078204e-308",
            "2.2250738585078214E-308", "2.2250738585078214e-308",
            "2.2250738585078224E-308", "2.2250738585078224e-308",
            "2.2250738585078234E-308", "2.2250738585078234e-308",
            "2.2250738585078244E-308", "2.2250738585078244e-308",
            "2.2250738585078254E-308", "2.2250738585078254e-308",
            "2.2250738585078264E-308", "2.2250738585078264e-308",
            "2.2250738585078274E-308", "2.2250738585078274e-308",
            "2.2250738585078284E-308", "2.2250738585078284e-308",
            "2.2250738585078293E-308", "2.2250738585078293e-308",
            "2.2250738585078303E-308", "2.2250738585078303e-308",
            "2.2250738585078313E-308", "2.2250738585078313e-308",
            "2.2250738585078323E-308", "2.2250738585078323e-308",
            "2.2250738585078333E-308", "2.2250738585078333e-308",
            "2.2250738585078343E-308", "2.2250738585078343e-308",
            "2.2250738585078353E-308", "2.2250738585078353e-308",
            "2.2250738585078363E-308", "2.2250738585078363e-308",
            "2.225073858507837E-308", "2.225073858507837e-308",
            "2.225073858507838E-308", "2.225073858507838e-308",
            "2.225073858507839E-308", "2.225073858507839e-308",
            "2.22507385850784E-308", "2.22507385850784e-308",
            "2.225073858507841E-308", "2.225073858507841e-308",
            "2.225073858507842E-308", "2.225073858507842e-308",
            "2.225073858507843E-308", "2.225073858507843e-308",
            "2.225073858507844E-308", "2.225073858507844e-308",
            "2.225073858507845E-308", "2.225073858507845e-308",
            "2.225073858507846E-308", "2.225073858507846e-308",
            "2.225073858507847E-308", "2.225073858507847e-308",
            "2.225073858507848E-308", "2.225073858507848e-308",
            "2.225073858507849E-308", "2.225073858507849e-308",
            "2.22507385850785E-308", "2.22507385850785e-308",
            "2.225073858507851E-308", "2.225073858507851e-308",
            "2.225073858507852E-308", "2.225073858507852e-308",
            "2.225073858507853E-308", "2.225073858507853e-308",
            "2.225073858507854E-308", "2.225073858507854e-308",
            "2.225073858507855E-308", "2.225073858507855e-308",
            "2.225073858507856E-308", "2.225073858507856e-308",
            "2.225073858507857E-308", "2.225073858507857e-308",
            "2.225073858507858E-308", "2.225073858507858e-308",
            "2.225073858507859E-308", "2.225073858507859e-308",
            "2.22507385850786E-308", "2.22507385850786e-308",
            "2.225073858507861E-308", "2.225073858507861e-308",
            "2.225073858507862E-308", "2.225073858507862e-308",
            "2.225073858507863E-308", "2.225073858507863e-308",
            "2.225073858507864E-308", "2.225073858507864e-308",
            "2.225073858507865E-308", "2.225073858507865e-308",
            "2.225073858507866E-308", "2.225073858507866e-308",
            "2.225073858507867E-308", "2.225073858507867e-308",
            "2.225073858507868E-308", "2.225073858507868e-308",
            "2.225073858507869E-308", "2.225073858507869e-308",
            "2.22507385850787E-308", "2.22507385850787e-308",
            "2.225073858507871E-308", "2.225073858507871e-308",
            "2.225073858507872E-308", "2.225073858507872e-308",
            "2.225073858507873E-308", "2.225073858507873e-308",
            "2.225073858507874E-308", "2.225073858507874e-308",
            "2.225073858507875E-308", "2.225073858507875e-308",
            "2.225073858507876E-308", "2.225073858507876e-308",
            "2.225073858507877E-308", "2.225073858507877e-308",
            "2.225073858507878E-308", "2.225073858507878e-308",
            "2.2250738585078787E-308", "2.2250738585078787e-308",
            "2.2250738585078797E-308", "2.2250738585078797e-308",
            "2.2250738585078807E-308", "2.2250738585078807e-308",
            "2.2250738585078817E-308", "2.2250738585078817e-308",
            "2.2250738585078827E-308", "2.2250738585078827e-308",
            "2.2250738585078837E-308", "2.2250738585078837e-308",
            "2.2250738585078847E-308", "2.2250738585078847e-308",
            "2.2250738585078857E-308", "2.2250738585078857e-308",
            "2.2250738585078867E-308", "2.2250738585078867e-308",
            "2.2250738585078876E-308", "2.2250738585078876e-308",
            "2.2250738585078886E-308", "2.2250738585078886e-308",
            "2.2250738585078896E-308", "2.2250738585078896e-308",
            "2.2250738585078906E-308", "2.2250738585078906e-308",
            "2.2250738585078916E-308", "2.2250738585078916e-308",
            "2.2250738585078926E-308", "2.2250738585078926e-308",
            "2.2250738585078936E-308", "2.2250738585078936e-308",
            "2.2250738585078946E-308", "2.2250738585078946e-308",
            "2.2250738585078955E-308", "2.2250738585078955e-308",
            "2.2250738585078965E-308", "2.2250738585078965e-308",
            "2.2250738585078975E-308", "2.2250738585078975e-308",
            "2.2250738585078985E-308", "2.2250738585078985e-308",
            "2.2250738585078995E-308", "2.2250738585078995e-308",
            "2.2250738585079005E-308", "2.2250738585079005e-308",
            "2.2250738585079015E-308", "2.2250738585079015e-308",
            "2.2250738585079025E-308", "2.2250738585079025e-308",
            "2.2250738585079035E-308", "2.2250738585079035e-308",
            "2.2250738585079044E-308", "2.2250738585079044e-308",
            "2.2250738585079054E-308", "2.2250738585079054e-308",
            "2.2250738585079064E-308", "2.2250738585079064e-308",
            "2.2250738585079074E-308", "2.2250738585079074e-308",
            "2.2250738585079084E-308", "2.2250738585079084e-308",
            "2.2250738585079094E-308", "2.2250738585079094e-308",
            "2.2250738585079104E-308", "2.2250738585079104e-308",
            "2.2250738585079114E-308", "2.2250738585079114e-308",
            "2.2250738585079123E-308", "2.2250738585079123e-308",
            "2.2250738585079133E-308", "2.2250738585079133e-308",
            "2.2250738585079143E-308", "2.2250738585079143e-308",
            "2.2250738585079153E-308", "2.2250738585079153e-308",
            "2.2250738585079163E-308", "2.2250738585079163e-308",
            "2.2250738585079173E-308", "2.2250738585079173e-308",
            "2.2250738585079183E-308", "2.2250738585079183e-308",
            "2.2250738585079193E-308", "2.2250738585079193e-308",
            "2.2250738585079202E-308", "2.2250738585079202e-308",
            "2.225073858507921E-308", "2.225073858507921e-308",
            "2.225073858507922E-308", "2.225073858507922e-308",
            "2.225073858507923E-308", "2.225073858507923e-308",
            "2.225073858507924E-308", "2.225073858507924e-308",
            "2.225073858507925E-308", "2.225073858507925e-308",
            "2.225073858507926E-308", "2.225073858507926e-308",
            "2.225073858507927E-308", "2.225073858507927e-308",
            "2.225073858507928E-308", "2.225073858507928e-308",
            "2.225073858507929E-308", "2.225073858507929e-308",
            "2.22507385850793E-308", "2.22507385850793e-308",
            "2.225073858507931E-308", "2.225073858507931e-308",
            "2.225073858507932E-308", "2.225073858507932e-308",
            "2.225073858507933E-308", "2.225073858507933e-308",
            "2.225073858507934E-308", "2.225073858507934e-308",
            "2.225073858507935E-308", "2.225073858507935e-308",
            "2.225073858507936E-308", "2.225073858507936e-308",
            "2.225073858507937E-308", "2.225073858507937e-308",
            "2.225073858507938E-308", "2.225073858507938e-308",
            "2.225073858507939E-308", "2.225073858507939e-308",
            "2.22507385850794E-308", "2.22507385850794e-308",
            "2.225073858507941E-308", "2.225073858507941e-308",
            "2.225073858507942E-308", "2.225073858507942e-308",
            "2.225073858507943E-308", "2.225073858507943e-308",
            "2.225073858507944E-308", "2.225073858507944e-308",
            "2.225073858507945E-308", "2.225073858507945e-308",
            "2.225073858507946E-308", "2.225073858507946e-308",
            "2.225073858507947E-308", "2.225073858507947e-308",
            "2.225073858507948E-308", "2.225073858507948e-308",
            "2.225073858507949E-308", "2.225073858507949e-308",
            "2.22507385850795E-308", "2.22507385850795e-308",
            "2.225073858507951E-308", "2.225073858507951e-308",
            "2.225073858507952E-308", "2.225073858507952e-308",
            "2.225073858507953E-308", "2.225073858507953e-308",
            "2.225073858507954E-308", "2.225073858507954e-308",
            "2.225073858507955E-308", "2.225073858507955e-308",
            "2.225073858507956E-308", "2.225073858507956e-308",
            "2.225073858507957E-308", "2.225073858507957e-308",
            "2.225073858507958E-308", "2.225073858507958e-308",
            "2.225073858507959E-308", "2.225073858507959e-308",
            "2.22507385850796E-308", "2.22507385850796e-308",
            "2.225073858507961E-308", "2.225073858507961e-308",
            "2.2250738585079618E-308", "2.2250738585079618e-308",
            "2.2250738585079627E-308", "2.2250738585079627e-308",
            "2.2250738585079637E-308", "2.2250738585079637e-308",
            "2.2250738585079647E-308", "2.2250738585079647e-308",
            "2.2250738585079657E-308", "2.2250738585079657e-308",
            "2.2250738585079667E-308", "2.2250738585079667e-308",
            "2.2250738585079677E-308", "2.2250738585079677e-308",
            "2.2250738585079687E-308", "2.2250738585079687e-308",
            "2.2250738585079697E-308", "2.2250738585079697e-308",
            "2.2250738585079706E-308", "2.2250738585079706e-308",
            "2.2250738585079716E-308", "2.2250738585079716e-308",
            "2.2250738585079726E-308", "2.2250738585079726e-308",
            "2.2250738585079736E-308", "2.2250738585079736e-308",
            "2.2250738585079746E-308", "2.2250738585079746e-308",
            "2.2250738585079756E-308", "2.2250738585079756e-308",
            "2.2250738585079766E-308", "2.2250738585079766e-308",
            "2.2250738585079776E-308", "2.2250738585079776e-308",
            "2.2250738585079785E-308", "2.2250738585079785e-308",
            "2.2250738585079795E-308", "2.2250738585079795e-308",
            "2.2250738585079805E-308", "2.2250738585079805e-308",
            "2.2250738585079815E-308", "2.2250738585079815e-308",
            "2.2250738585079825E-308", "2.2250738585079825e-308",
            "2.2250738585079835E-308", "2.2250738585079835e-308",
            "2.2250738585079845E-308", "2.2250738585079845e-308",
            "2.2250738585079855E-308", "2.2250738585079855e-308",
            "2.2250738585079865E-308", "2.2250738585079865e-308",
            "2.2250738585079874E-308", "2.2250738585079874e-308",
            "2.2250738585079884E-308", "2.2250738585079884e-308",
            "2.2250738585079894E-308", "2.2250738585079894e-308",
            "2.2250738585079904E-308", "2.2250738585079904e-308",
            "2.2250738585079914E-308", "2.2250738585079914e-308",
            "2.2250738585079924E-308", "2.2250738585079924e-308",
            "2.2250738585079934E-308", "2.2250738585079934e-308",
            "2.2250738585079944E-308", "2.2250738585079944e-308",
            "2.2250738585079953E-308", "2.2250738585079953e-308",
            "2.2250738585079963E-308", "2.2250738585079963e-308",
            "2.2250738585079973E-308", "2.2250738585079973e-308",
            "2.2250738585079983E-308", "2.2250738585079983e-308",
            "2.2250738585079993E-308", "2.2250738585079993e-308",
            "2.2250738585080003E-308", "2.2250738585080003e-308",
            "2.2250738585080013E-308", "2.2250738585080013e-308",
            "2.2250738585080023E-308", "2.2250738585080023e-308",
            "2.2250738585080033E-308", "2.2250738585080033e-308",
            "2.225073858508004E-308", "2.225073858508004e-308",
            "2.225073858508005E-308", "2.225073858508005e-308",
            "2.225073858508006E-308", "2.225073858508006e-308",
            "2.225073858508007E-308", "2.225073858508007e-308",
            "2.225073858508008E-308", "2.225073858508008e-308",
            "2.225073858508009E-308", "2.225073858508009e-308",
            "2.22507385850801E-308", "2.22507385850801e-308",
            "2.225073858508011E-308", "2.225073858508011e-308",
            "2.225073858508012E-308", "2.225073858508012e-308",
            "2.225073858508013E-308", "2.225073858508013e-308",
            "2.225073858508014E-308", "2.225073858508014e-308",
            "2.225073858508015E-308", "2.225073858508015e-308",
            "2.225073858508016E-308", "2.225073858508016e-308",
            "2.225073858508017E-308", "2.225073858508017e-308",
            "2.225073858508018E-308", "2.225073858508018e-308",
            "2.225073858508019E-308", "2.225073858508019e-308",
            "2.22507385850802E-308", "2.22507385850802e-308",
            "2.225073858508021E-308", "2.225073858508021e-308",
            "2.225073858508022E-308", "2.225073858508022e-308",
            "2.225073858508023E-308", "2.225073858508023e-308",
            "2.225073858508024E-308", "2.225073858508024e-308",
            "2.225073858508025E-308", "2.225073858508025e-308",
            "2.225073858508026E-308", "2.225073858508026e-308",
            "2.225073858508027E-308", "2.225073858508027e-308",
            "2.225073858508028E-308", "2.225073858508028e-308",
            "2.225073858508029E-308", "2.225073858508029e-308",
            "2.22507385850803E-308", "2.22507385850803e-308",
            "2.225073858508031E-308", "2.225073858508031e-308",
            "2.225073858508032E-308", "2.225073858508032e-308",
            "2.225073858508033E-308", "2.225073858508033e-308",
            "2.225073858508034E-308", "2.225073858508034e-308",
            "2.225073858508035E-308", "2.225073858508035e-308",
            "2.225073858508036E-308", "2.225073858508036e-308",
            "2.225073858508037E-308", "2.225073858508037e-308",
            "2.225073858508038E-308", "2.225073858508038e-308",
            "2.225073858508039E-308", "2.225073858508039e-308",
            "2.22507385850804E-308", "2.22507385850804e-308",
            "2.225073858508041E-308", "2.225073858508041e-308",
            "2.225073858508042E-308", "2.225073858508042e-308",
            "2.225073858508043E-308", "2.225073858508043e-308",
            "2.225073858508044E-308", "2.225073858508044e-308",
            "2.225073858508045E-308", "2.225073858508045e-308",
            "2.2250738585080457E-308", "2.2250738585080457e-308",
            "2.2250738585080467E-308", "2.2250738585080467e-308",
            "2.2250738585080477E-308", "2.2250738585080477e-308",
            "2.2250738585080487E-308", "2.2250738585080487e-308",
            "2.2250738585080497E-308", "2.2250738585080497e-308",
            "2.2250738585080507E-308", "2.2250738585080507e-308",
            "2.2250738585080517E-308", "2.2250738585080517e-308",
            "2.2250738585080527E-308", "2.2250738585080527e-308",
            "2.2250738585080536E-308", "2.2250738585080536e-308",
            "2.2250738585080546E-308", "2.2250738585080546e-308",
            "2.2250738585080556E-308", "2.2250738585080556e-308",
            "2.2250738585080566E-308", "2.2250738585080566e-308",
            "2.2250738585080576E-308", "2.2250738585080576e-308",
            "2.2250738585080586E-308", "2.2250738585080586e-308",
            "2.2250738585080596E-308", "2.2250738585080596e-308",
            "2.2250738585080606E-308", "2.2250738585080606e-308",
            "2.2250738585080616E-308", "2.2250738585080616e-308",
            "2.2250738585080625E-308", "2.2250738585080625e-308",
            "2.2250738585080635E-308", "2.2250738585080635e-308",
            "2.2250738585080645E-308", "2.2250738585080645e-308",
            "2.2250738585080655E-308", "2.2250738585080655e-308",
            "2.2250738585080665E-308", "2.2250738585080665e-308",
            "2.2250738585080675E-308", "2.2250738585080675e-308",
            "2.2250738585080685E-308", "2.2250738585080685e-308",
            "2.2250738585080695E-308", "2.2250738585080695e-308",
            "2.2250738585080704E-308", "2.2250738585080704e-308",
            "2.2250738585080714E-308", "2.2250738585080714e-308",
            "2.2250738585080724E-308", "2.2250738585080724e-308",
            "2.2250738585080734E-308", "2.2250738585080734e-308",
            "2.2250738585080744E-308", "2.2250738585080744e-308",
            "2.2250738585080754E-308", "2.2250738585080754e-308",
            "2.2250738585080764E-308", "2.2250738585080764e-308",
            "2.2250738585080774E-308", "2.2250738585080774e-308",
            "2.2250738585080783E-308", "2.2250738585080783e-308",
            "2.2250738585080793E-308", "2.2250738585080793e-308",
            "2.2250738585080803E-308", "2.2250738585080803e-308",
            "2.2250738585080813E-308", "2.2250738585080813e-308",
            "2.2250738585080823E-308", "2.2250738585080823e-308",
            "2.2250738585080833E-308", "2.2250738585080833e-308",
            "2.2250738585080843E-308", "2.2250738585080843e-308",
            "2.2250738585080853E-308", "2.2250738585080853e-308",
            "2.2250738585080863E-308", "2.2250738585080863e-308",
            "2.225073858508087E-308", "2.225073858508087e-308",
            "2.225073858508088E-308", "2.225073858508088e-308",
            "2.225073858508089E-308", "2.225073858508089e-308",
            "2.22507385850809E-308", "2.22507385850809e-308",
            "2.225073858508091E-308", "2.225073858508091e-308",
            "2.225073858508092E-308", "2.225073858508092e-308",
            "2.225073858508093E-308", "2.225073858508093e-308",
            "2.225073858508094E-308", "2.225073858508094e-308",
            "2.225073858508095E-308", "2.225073858508095e-308",
            "2.225073858508096E-308", "2.225073858508096e-308",
            "2.225073858508097E-308", "2.225073858508097e-308",
            "2.225073858508098E-308", "2.225073858508098e-308",
            "2.225073858508099E-308", "2.225073858508099e-308",
            "2.2250738585081E-308", "2.2250738585081e-308",
            "2.225073858508101E-308", "2.225073858508101e-308",
            "2.225073858508102E-308", "2.225073858508102e-308",
            "2.225073858508103E-308", "2.225073858508103e-308",
            "2.225073858508104E-308", "2.225073858508104e-308",
            "2.225073858508105E-308", "2.225073858508105e-308",
            "2.225073858508106E-308", "2.225073858508106e-308",
            "2.225073858508107E-308", "2.225073858508107e-308",
            "2.225073858508108E-308", "2.225073858508108e-308",
            "2.225073858508109E-308", "2.225073858508109e-308",
            "2.22507385850811E-308", "2.22507385850811e-308",
            "2.225073858508111E-308", "2.225073858508111e-308",
            "2.225073858508112E-308", "2.225073858508112e-308",
            "2.225073858508113E-308", "2.225073858508113e-308",
            "2.225073858508114E-308", "2.225073858508114e-308",
            "2.225073858508115E-308", "2.225073858508115e-308",
            "2.225073858508116E-308", "2.225073858508116e-308",
            "2.225073858508117E-308", "2.225073858508117e-308",
            "2.225073858508118E-308", "2.225073858508118e-308",
            "2.225073858508119E-308", "2.225073858508119e-308",
            "2.22507385850812E-308", "2.22507385850812e-308",
            "2.225073858508121E-308", "2.225073858508121e-308",
            "2.225073858508122E-308", "2.225073858508122e-308",
            "2.225073858508123E-308", "2.225073858508123e-308",
            "2.225073858508124E-308", "2.225073858508124e-308",
            "2.225073858508125E-308", "2.225073858508125e-308",
            "2.225073858508126E-308", "2.225073858508126e-308",
            "2.225073858508127E-308", "2.225073858508127e-308",
            "2.225073858508128E-308", "2.225073858508128e-308",
            "2.2250738585081287E-308", "2.2250738585081287e-308",
            "2.2250738585081297E-308", "2.2250738585081297e-308",
            "2.2250738585081307E-308", "2.2250738585081307e-308",
            "2.2250738585081317E-308", "2.2250738585081317e-308",
            "2.2250738585081327E-308", "2.2250738585081327e-308",
            "2.2250738585081337E-308", "2.2250738585081337e-308",
            "2.2250738585081347E-308", "2.2250738585081347e-308",
            "2.2250738585081357E-308", "2.2250738585081357e-308",
            "2.2250738585081366E-308", "2.2250738585081366e-308",
            "2.2250738585081376E-308", "2.2250738585081376e-308",
            "2.2250738585081386E-308", "2.2250738585081386e-308",
            "2.2250738585081396E-308", "2.2250738585081396e-308",
            "2.2250738585081406E-308", "2.2250738585081406e-308",
            "2.2250738585081416E-308", "2.2250738585081416e-308",
            "2.2250738585081426E-308", "2.2250738585081426e-308",
            "2.2250738585081436E-308", "2.2250738585081436e-308",
            "2.2250738585081446E-308", "2.2250738585081446e-308",
            "2.2250738585081455E-308", "2.2250738585081455e-308",
            "2.2250738585081465E-308", "2.2250738585081465e-308",
            "2.2250738585081475E-308", "2.2250738585081475e-308",
            "2.2250738585081485E-308", "2.2250738585081485e-308",
            "2.2250738585081495E-308", "2.2250738585081495e-308",
            "2.2250738585081505E-308", "2.2250738585081505e-308",
            "2.2250738585081515E-308", "2.2250738585081515e-308",
            "2.2250738585081525E-308", "2.2250738585081525e-308",
            "2.2250738585081534E-308", "2.2250738585081534e-308",
            "2.2250738585081544E-308", "2.2250738585081544e-308",
            "2.2250738585081554E-308", "2.2250738585081554e-308",
            "2.2250738585081564E-308", "2.2250738585081564e-308",
            "2.2250738585081574E-308", "2.2250738585081574e-308",
            "2.2250738585081584E-308", "2.2250738585081584e-308",
            "2.2250738585081594E-308", "2.2250738585081594e-308",
            "2.2250738585081604E-308", "2.2250738585081604e-308",
            "2.2250738585081614E-308", "2.2250738585081614e-308",
            "2.2250738585081623E-308", "2.2250738585081623e-308",
            "2.2250738585081633E-308", "2.2250738585081633e-308",
            "2.2250738585081643E-308", "2.2250738585081643e-308",
            "2.2250738585081653E-308", "2.2250738585081653e-308",
            "2.2250738585081663E-308", "2.2250738585081663e-308",
            "2.2250738585081673E-308", "2.2250738585081673e-308",
            "2.2250738585081683E-308", "2.2250738585081683e-308",
            "2.2250738585081693E-308", "2.2250738585081693e-308",
            "2.22507385850817E-308", "2.22507385850817e-308",
            "2.225073858508171E-308", "2.225073858508171e-308",
            "2.225073858508172E-308", "2.225073858508172e-308",
            "2.225073858508173E-308", "2.225073858508173e-308",
            "2.225073858508174E-308", "2.225073858508174e-308",
            "2.225073858508175E-308", "2.225073858508175e-308",
            "2.225073858508176E-308", "2.225073858508176e-308",
            "2.225073858508177E-308", "2.225073858508177e-308",
            "2.225073858508178E-308", "2.225073858508178e-308",
            "2.225073858508179E-308", "2.225073858508179e-308",
            "2.22507385850818E-308", "2.22507385850818e-308",
            "2.225073858508181E-308", "2.225073858508181e-308",
            "2.225073858508182E-308", "2.225073858508182e-308",
            "2.225073858508183E-308", "2.225073858508183e-308",
            "2.225073858508184E-308", "2.225073858508184e-308",
            "2.225073858508185E-308", "2.225073858508185e-308",
            "2.225073858508186E-308", "2.225073858508186e-308",
            "2.225073858508187E-308", "2.225073858508187e-308",
            "-5.122932053112934E-228", "-5.122932053112934e-228",
            "1.8021670406284484E-144", "1.8021670406284484e-144",
            "-1.531715991941122E174", "-1.531715991941122e+174",
            "1.0726123975657333E111", "1.0726123975657333e+111",
            "-5.1881079196803414E296", "-5.1881079196803414e+296",
            "3.5284489897626334E-169", "3.5284489897626334e-169",
            "5.997250475765494E76", "5.997250475765494e+76",
            "-5.251895863864454E-267", "-5.251895863864454e-267",
            "5.032332820716024E-134", "5.032332820716024e-134",
            "-2.2064327840898478E241", "-2.2064327840898478e+241",
            "5.47762064308E259", "5.47762064308e+259",
            "-2.1484271733992354E-83", "-2.1484271733992354e-83",
            "1.3977526035777873E-51", "1.3977526035777873e-51",
            "3.999437826688795E-68", "3.999437826688795e-68",
            "-1.0669420275688825E227", "-1.0669420275688825e+227",
            "-1774805.1589581063", "-1774805.1589581063",
            "1.5605433752372653E258", "1.5605433752372653e+258",
            "-4.631725423146242E36", "-4.631725423146242e+36",
            "-3.841758663777924E-105", "-3.841758663777924e-105",
            "57.87016325589607", "57.87016325589607",
            "1.950307835676857E304", "1.950307835676857e+304",
            "9.874176045594426E-28", "9.874176045594426e-28",
            "1.2544634670155869E-87", "1.2544634670155869e-87",
            "-3.5438802389759314E103", "-3.5438802389759314e+103",
            "5.1738449469959355E110", "5.1738449469959355e+110",
            "-8.861143146627259E-10", "-8.861143146627259e-10",
            "1.3038657421758983E-183", "1.3038657421758983e-183",
            "-2.9390218243775956E-6", "-0.0000029390218243775956",
            "-1.0634933859059026E-21", "-1.0634933859059026e-21",
            "-1.471909720828262E-80", "-1.471909720828262e-80",
            "2.283102114663539E70", "2.283102114663539e+70",
            "-2.4236988662836168E-76", "-2.4236988662836168e-76",
            "-1.0091088282128836E-227", "-1.0091088282128836e-227",
            "1.8756156059544234E-17", "1.8756156059544234e-17",
            "-1.1499887008718486E49", "-1.1499887008718486e+49",
            "-1.9977196754343355E-64", "-1.9977196754343355e-64",
            "-1.8315391799250724E-275", "-1.8315391799250724e-275",
            "-7.2397230034405995E-6", "-0.0000072397230034405995",
            "2.3814651882353835E264", "2.3814651882353835e+264",
            "-1.7057142707741377E134", "-1.7057142707741377e+134",
            "3.1923215364984646E-104", "3.1923215364984646e-104",
            "-1.4743564295799896E-127", "-1.4743564295799896e-127",
            "1.772785242034667E-293", "1.772785242034667e-293",
            "-2.102417795543808E-201", "-2.102417795543808e-201",
            "1.7363755860418938E-174", "1.7363755860418938e-174",
            "-1.1396845048552306E169", "-1.1396845048552306e+169",
            "3.997713933741552E257", "3.997713933741552e+257",
            "-1.9208547482381744E-18", "-1.9208547482381744e-18",
            "1.1315707869039059E144", "1.1315707869039059e+144",
            "1.819148280345205E-31", "1.819148280345205e-31",
            "-4.210591417966411E-43", "-4.210591417966411e-43",
            "-8.090045897499676E-72", "-8.090045897499676e-72",
            "1.3854630565060878E-136", "1.3854630565060878e-136",
            "1.4007968572214524E127", "1.4007968572214524e+127",
            "2.9495053986089836E74", "2.9495053986089836e+74",
            "4.018286697743469E239", "4.018286697743469e+239",
            "4.0902265400544136E-182", "4.0902265400544136e-182",
            "-6.942305367973915E270", "-6.942305367973915e+270",
            "1.2673703138309831E-287", "1.2673703138309831e-287",
            "-5.815103455481817E-137", "-5.815103455481817e-137",
            "1.6356373375225808E-283", "1.6356373375225808e-283",
            "-4.254558287089491E-125", "-4.254558287089491e-125",
            "-7.984650876388797E-24", "-7.984650876388797e-24",
            "-3.994878885315011E-176", "-3.994878885315011e-176",
            "4.867311022085646E-73", "4.867311022085646e-73",
            "-3.667187018099E-84", "-3.667187018099e-84",
            "4.639614748840914E-173", "4.639614748840914e-173",
            "8.738854940366168E-123", "8.738854940366168e-123",
            "-2.6829055446208303E116", "-2.6829055446208303e+116",
            "3.0756090545022195E157", "3.0756090545022195e+157",
            "-3.1867340557182843E258", "-3.1867340557182843e+258",
            "5.671248975505659E-253", "5.671248975505659e-253",
            "-1.6145312760495658E-13", "-1.6145312760495658e-13",
            "-1.2793807645408694E172", "-1.2793807645408694e+172",
            "3.168681989317136E-280", "3.168681989317136e-280",
            "2.2854650071332918E-272", "2.2854650071332918e-272",
            "-7.00023989518743E122", "-7.00023989518743e+122",
            "4.1409510917454216E10", "41409510917.454216",
            "-4.987513698995841E-273", "-4.987513698995841e-273",
            "7.872466027651311E-301", "7.872466027651311e-301",
            "-3.6718050391687066E213", "-3.6718050391687066e+213",
            "-1.4190995504907572E-78", "-1.4190995504907572e-78",
            "-1.0111739026659646E101", "-1.0111739026659646e+101",
            "-1.2553986424766048E-306", "-1.2553986424766048e-306",
            "1.417545147883132E114", "1.417545147883132e+114",
            "1.74292317888502E8", "174292317.888502",
            "3.0682445672647206E-60", "3.0682445672647206e-60",
            "-1.0102001509610186E-87", "-1.0102001509610186e-87",
            "1.422182034042692E256", "1.422182034042692e+256",
            "-1.5365773411399133E31", "-1.5365773411399133e+31",
            "6.401710225480002E-288", "6.401710225480002e-288",
            "2.69406841944696E297", "2.69406841944696e+297",
            "-8.918210559972931E272", "-8.918210559972931e+272",
            "6.186042868815719E-287", "6.186042868815719e-287",
            "-2.3009328162550332E73", "-2.3009328162550332e+73",
            "-9.839810599670591E277", "-9.839810599670591e+277",
            "-2.516076732201116E220", "-2.516076732201116e+220",
            "-1.4966124687682857E-299", "-1.4966124687682857e-299",
            "2.1979939436450425E306", "2.1979939436450425e+306",
            "8.377845823470647E-200", "8.377845823470647e-200",
            "-2.0079030566126198E192", "-2.0079030566126198e+192",
            "2.183234523124772E157", "2.183234523124772e+157",
            "144740.10052537464", "144740.10052537464",
            "4.895062587397176E276", "4.895062587397176e+276",
            "9.104042508968108E-84", "9.104042508968108e-84",
            "-2.0961090531265257E-241", "-2.0961090531265257e-241",
            "-4.5994070035289127E-92", "-4.5994070035289127e-92",
            "5.102955606792907E-146", "5.102955606792907e-146",
            "-4.2452602701361907E-216", "-4.2452602701361907e-216",
            "7.401135122527308E-289", "7.401135122527308e-289",
            "2.149510832441122E-13", "2.149510832441122e-13",
            "-2.2479860637267837E-187", "-2.2479860637267837e-187",
            "7.759220638677193E259", "7.759220638677193e+259",
            "-8.833690252134554E-191", "-8.833690252134554e-191",
            "2.5050896562194386E-306", "2.5050896562194386e-306",
            "1.0431912939466861E-54", "1.0431912939466861e-54",
            "-8.079695623995492E-237", "-8.079695623995492e-237",
            "1.5914287485990077E-127", "1.5914287485990077e-127",
            "3.4144082955210665E-122", "3.4144082955210665e-122",
            "1.2167157686737798E-241", "1.2167157686737798e-241",
            "4.8192073070014594E129", "4.8192073070014594e+129",
            "2.688948522529702E-266", "2.688948522529702e-266",
            "3.45563632109172E-238", "3.45563632109172e-238",
            "1.8454150824354153E-235", "1.8454150824354153e-235",
            "-3.487814107167507", "-3.487814107167507",
            "-1.39894941136863312E17", "-139894941136863310",
            "4.13815661278121E-218", "4.13815661278121e-218",
            "1.0706103705382145E-98", "1.0706103705382145e-98",
            "-1.3459791907314332E-220", "-1.3459791907314332e-220",
            "3.7655281942262955E67", "3.7655281942262955e+67",
            "-3.536369631221552E-6", "-0.000003536369631221552",
            "5.933669474891277E303", "5.933669474891277e+303",
            "-8.813317234825483E-256", "-8.813317234825483e-256",
            "-2.607388017947806E-307", "-2.607388017947806e-307",
            "5.793678206792447E120", "5.793678206792447e+120",
            "2.605400767695168E-26", "2.605400767695168e-26",
            "-4.0779959081427823E-19", "-4.0779959081427823e-19",
            "2.5903925450813985E-204", "2.5903925450813985e-204",
            "6.472905561007222E-271", "6.472905561007222e-271",
            "-3.893083511071004E238", "-3.893083511071004e+238",
            "2.6685228179972956E98", "2.6685228179972956e+98",
            "-6.825847833889028E-183", "-6.825847833889028e-183",
            "1.6200560478680614E-270", "1.6200560478680614e-270",
            "3.27846109490843E-91", "3.27846109490843e-91",
            "3.5896782084600106E-153", "3.5896782084600106e-153",
            "-1.1293650683013386E-179", "-1.1293650683013386e-179",
            "-2.1006740263395176E-28", "-2.1006740263395176e-28",
            "5.920551544447429E148", "5.920551544447429e+148",
            "1.4679418461043165E-307", "1.4679418461043165e-307",
            "9.002708805501984E-93", "9.002708805501984e-93",
            "-1.110796254852142E-275", "-1.110796254852142e-275",
            "1.6926682481596246E96", "1.6926682481596246e+96",
            "-8.430799088586645E12", "-8430799088586.645",
            "-4.90914885929012E-210", "-4.90914885929012e-210",
            "1.003642083286187E56", "1.003642083286187e+56",
            "-1.2653739740408144E-47", "-1.2653739740408144e-47",
            "1.6603865242755383E-108", "1.6603865242755383e-108",
            "8.093636021057664E80", "8.093636021057664e+80",
            "-1.8263288630121577E-253", "-1.8263288630121577e-253",
            "-6.090961886124672E191", "-6.090961886124672e+191",
            "1.699840803615427E-275", "1.699840803615427e-275",
            "-1.2614982386043343E181", "-1.2614982386043343e+181",
            "1.001572299702498E-27", "1.001572299702498e-27",
            "6.068381501598178E34", "6.068381501598178e+34",
            "5.714958035573601E-209", "5.714958035573601e-209",
            "-2.1589567646326118E290", "-2.1589567646326118e+290",
            "3.584374964582346E30", "3.584374964582346e+30",
            "-2.6108064274481762E14", "-261080642744817.62",
            "1.282295548345438E233", "1.282295548345438e+233",
            "3.4196226859976795E-25", "3.4196226859976795e-25",
            "1.80705559818718E79", "1.80705559818718e+79",
            "3.955437471069057E252", "3.955437471069057e+252",
            "3.211565577286955E213", "3.211565577286955e+213",
            "-6.0027709827708544E-223", "-6.0027709827708544e-223",
            "2.0739429548405722E104", "2.0739429548405722e+104",
            "-3.05856875423662E-9", "-3.05856875423662e-9",
            "3.5442129499855994E-44", "3.5442129499855994e-44",
            "3.61863704292935E111", "3.61863704292935e+111",
            "12252.489015175559", "12252.489015175559",
            "-4.987498406929653E-215", "-4.987498406929653e-215",
            "3.1147423498975277E52", "3.1147423498975277e+52",
            "8.847250582075206E-207", "8.847250582075206e-207",
            "1.5572237873523496E136", "1.5572237873523496e+136",
            "-1.7959249706023958E149", "-1.7959249706023958e+149",
            "1.9790927610291793E-19", "1.9790927610291793e-19",
            "7.766996190699608E-263", "7.766996190699608e-263",
            "-2.7170598996389572E-132", "-2.7170598996389572e-132",
            "-1.793462889550128E-293", "-1.793462889550128e-293",
            "-7.6701452041089E-136", "-7.6701452041089e-136",
            "5.789093661358035E-62", "5.789093661358035e-62",
            "1.1475959402638165E-91", "1.1475959402638165e-91",
            "5.81738893223659E-200", "5.81738893223659e-200",
            "-7.387281240766927E-216", "-7.387281240766927e-216",
            "3.799805893029708E-30", "3.799805893029708e-30",
            "4.7498493264134676E-24", "4.7498493264134676e-24",
            "3.672896392676302E-140", "3.672896392676302e-140",
            "1.7239074433753374E-205", "1.7239074433753374e-205",
            "-8.696513395247354E-292", "-8.696513395247354e-292",
            "9.404624726572664E58", "9.404624726572664e+58",
            "-8.644677315561576E-88", "-8.644677315561576e-88",
            "-4.102822355780335E-225", "-4.102822355780335e-225",
            "8.644695879631258E-129", "8.644695879631258e-129",
            "7.2655825962842945E-270", "7.2655825962842945e-270",
            "-7.801564152573374E86", "-7.801564152573374e+86",
            "9.122154675037319E274", "9.122154675037319e+274",
            "5.958429830419849E-15", "5.958429830419849e-15",
            "5.311129679194237E-205", "5.311129679194237e-205",
            "1.7469535979519128E124", "1.7469535979519128e+124",
            "1.1054917467506198E87", "1.1054917467506198e+87",
            "-2.0016926140489292E76", "-2.0016926140489292e+76",
            "-4.1543325399109726E-300", "-4.1543325399109726e-300",
            "-2.4431197976943503E55", "-2.4431197976943503e+55",
            "1.7477180274319061E-218", "1.7477180274319061e-218",
            "3.955232765868011E131", "3.955232765868011e+131",
            "-6.174005950440042E182", "-6.174005950440042e+182",
            "1.2840217156280589E147", "1.2840217156280589e+147",
            "4.1035092463705475E104", "4.1035092463705475e+104",
            "1.247798864905235E93", "1.247798864905235e+93",
            "2.630336516127294E242", "2.630336516127294e+242",
            "-3.4106211253045693E127", "-3.4106211253045693e+127",
            "2.5796174647592664E306", "2.5796174647592664e+306",
            "-2.4577371501285144E75", "-2.4577371501285144e+75",
            "-3.50064363950894E182", "-3.50064363950894e+182",
            "-9.894924282967656E219", "-9.894924282967656e+219",
            "-4.621127786041343E-131", "-4.621127786041343e-131",
            "-2.0653486971497054E-260", "-2.0653486971497054e-260",
            "-1.6149982207079952E280", "-1.6149982207079952e+280",
            "-2.70000598677157E117", "-2.70000598677157e+117",
            "-2.1873034516475852E-217", "-2.1873034516475852e-217",
            "1.3046121317665405E278", "1.3046121317665405e+278",
            "4.863959730257044E-72", "4.863959730257044e-72",
            "4.337024887783885E156", "4.337024887783885e+156",
            "2.5214981523330916E251", "2.5214981523330916e+251",
            "-6.1096510394071455E-142", "-6.1096510394071455e-142",
            "-9.338222499945681E98", "-9.338222499945681e+98",
            "-5.677436371699751E47", "-5.677436371699751e+47",
            "-7.572973913334009E-26", "-7.572973913334009e-26",
            "-9.238138802302879E131", "-9.238138802302879e+131",
            "-1.0005135527939193E24", "-1.0005135527939193e+24",
            "1.406725992595484E97", "1.406725992595484e+97",
            "-1.0908139092744236E244", "-1.0908139092744236e+244",
            "1.4286192457267583E184", "1.4286192457267583e+184",
            "-2.1524879023428158E235", "-2.1524879023428158e+235",
            "-5.495884156623428E-143", "-5.495884156623428e-143",
            "2.4137018446065097E135", "2.4137018446065097e+135",
            "4.711401836391056E13", "47114018363910.56",
            "1.7235664564681366E-251", "1.7235664564681366e-251",
            "4.981124960569048E-267", "4.981124960569048e-267",
            "1.2290387233651305E303", "1.2290387233651305e+303",
            "-3.5966525572782553E65", "-3.5966525572782553e+65",
            "-5.667461710145253E-111", "-5.667461710145253e-111",
            "-1.0498361531883281E-60", "-1.0498361531883281e-60",
            "-8.468407026779248E257", "-8.468407026779248e+257",
            "2.606626887119074E213", "2.606626887119074e+213",
            "-2.0128022870705032E-207", "-2.0128022870705032e-207",
            "3.240396056992722E-89", "3.240396056992722e-89",
            "-4.139520444642169E28", "-4.139520444642169e+28",
            "-1.034118715013277E-224", "-1.034118715013277e-224",
            "9.802996022107107E287", "9.802996022107107e+287",
            "-3.153187228661304E-59", "-3.153187228661304e-59",
            "12425.353677811829", "12425.353677811829",
            "1.9593594117294352E-148", "1.9593594117294352e-148",
            "-1.4587965521688151E-55", "-1.4587965521688151e-55",
            "6.332971617361022E-23", "6.332971617361022e-23",
            "-6.574188725326813E-240", "-6.574188725326813e-240",
            "-4.334011388805861E-132", "-4.334011388805861e-132",
            "-1.8413794309832318E140", "-1.8413794309832318e+140",
            "-3.9551443522028194E-54", "-3.9551443522028194e-54",
            "6255.149865566855", "6255.149865566855",
            "208.23147593723814", "208.23147593723814",
            "8.880531130369642E-156", "8.880531130369642e-156",
            "3.52568903075277E143", "3.52568903075277e+143",
            "-2.690777898257131E105", "-2.690777898257131e+105",
            "-3.981442122792074E264", "-3.981442122792074e+264",
            "-9.026358774647728E30", "-9.026358774647728e+30",
            "5.617701531440761E-252", "5.617701531440761e-252",
            "4.864333997788499E-232", "4.864333997788499e-232",
            "-1.1923236335955045E135", "-1.1923236335955045e+135",
            "-1.190974853577593E-272", "-1.190974853577593e-272",
            "-7.852288914200472E185", "-7.852288914200472e+185",
            "2.9083770647300849E18", "2908377064730085000",
            "-2.3455867536524432E175", "-2.3455867536524432e+175",
            "-2.7728187049845173E-252", "-2.7728187049845173e-252",
            "-4.0485664896034234E226", "-4.0485664896034234e+226",
            "-3.6098791495475656E8", "-360987914.95475656",
            "-2.9305633590593736E304", "-2.9305633590593736e+304",
            "1.4530027826741979E225", "1.4530027826741979e+225",
            "1.3225418520195801E-123", "1.3225418520195801e-123",
            "-5.145070956608811E-222", "-5.145070956608811e-222",
            "-1.914638867102136E201", "-1.914638867102136e+201",
            "-4.4903168911219825E257", "-4.4903168911219825e+257",
            "6.151648814322393E-13", "6.151648814322393e-13",
            "2.7793123327288693E265", "2.7793123327288693e+265",
            "1.7140934491788316E306", "1.7140934491788316e+306",
            "8.070173949261977E-161", "8.070173949261977e-161",
            "-6.667884937355978E92", "-6.667884937355978e+92",
            "1.1421026185709882E-268", "1.1421026185709882e-268",
            "1.029205324873721E80", "1.029205324873721e+80",
            "3.133532507318475E107", "3.133532507318475e+107",
            "2.704974074136355E15", "2704974074136355",
            "-7.074044211441229E-156", "-7.074044211441229e-156",
            "7.425001508930203E63", "7.425001508930203e+63",
            "1.946914701939166E-35", "1.946914701939166e-35",
            "3.8975028404796534E304", "3.8975028404796534e+304",
            "3.816420594853065E-139", "3.816420594853065e-139",
            "2.1058815658341292E161", "2.1058815658341292e+161",
            "-2.7660747759654978E-182", "-2.7660747759654978e-182",
            "-1.2035659948863252E-180", "-1.2035659948863252e-180",
            "6.280904745390716E277", "6.280904745390716e+277",
            "-9.55797981055091E114", "-9.55797981055091e+114",
            "3.0882570565131703E-40", "3.0882570565131703e-40",
            "-1.5655603159343897E-121", "-1.5655603159343897e-121",
            "-8.526567146751339E229", "-8.526567146751339e+229",
            "8.011242335354952E99", "8.011242335354952e+99",
            "-1.451468849126624E127", "-1.451468849126624e+127",
            "4.17453307812694E-110", "4.17453307812694e-110",
            "-2.2894675349871573E-222", "-2.2894675349871573e-222",
            "-2.1667234647509544E-93", "-2.1667234647509544e-93",
            "4.1739532382710466E-283", "4.1739532382710466e-283",
            "-6.507142122065923E157", "-6.507142122065923e+157",
            "-2.297965229644951E-93", "-2.297965229644951e-93",
            "7.907615285856195E-131", "7.907615285856195e-131",
            "3.67160823299194E104", "3.67160823299194e+104",
            "3.999972206523916E-284", "3.999972206523916e-284",
            "-5.984930737286604E299", "-5.984930737286604e+299",
            "-1.2022170557336409E297", "-1.2022170557336409e+297",
            "3.5684598518380807E245", "3.5684598518380807e+245",
            "3.027727970583642E-158", "3.027727970583642e-158",
            "1.2723196261686465E176", "1.2723196261686465e+176",
            "-1.0061915653033331E55", "-1.0061915653033331e+55",
            "1.1015157352460863E-61", "1.1015157352460863e-61",
            "3.474042349798671E284", "3.474042349798671e+284",
            "-9.582358592625957E40", "-9.582358592625957e+40",
            "-9.892898520846423E249", "-9.892898520846423e+249",
            "2.523760092476357E181", "2.523760092476357e+181",
            "1.0273232722700129E-190", "1.0273232722700129e-190",
            "-6.609516853274346E45", "-6.609516853274346e+45",
            "-1.9172385256442637E115", "-1.9172385256442637e+115",
            "-2.248261796725831E-127", "-2.248261796725831e-127",
            "7.247447517472162E-19", "7.247447517472162e-19",
            "7.220362107121612E118", "7.220362107121612e+118",
            "-1.5057708564952958E301", "-1.5057708564952958e+301",
            "-3.320824049370421E269", "-3.320824049370421e+269",
            "-3.645884916288602E256", "-3.645884916288602e+256",
            "-7.639874403687214E-226", "-7.639874403687214e-226",
            "2.5765863128689323E104", "2.5765863128689323e+104",
            "-9.29492247149449E-6", "-0.00000929492247149449",
            "-2.0866032239006914E75", "-2.0866032239006914e+75",
            "-1.3822980602388775E254", "-1.3822980602388775e+254",
            "-3.018980372829667E236", "-3.018980372829667e+236",
            "1.67663067581383E-66", "1.67663067581383e-66",
            "-0.09745844912616325", "-0.09745844912616325",
            "5.4388014604800784E-67", "5.4388014604800784e-67",
            "7.831434077018569E121", "7.831434077018569e+121",
            "-4.800342120578156E9", "-4800342120.578156",
            "-3.406022370266631E-131", "-3.406022370266631e-131",
            "2.526420837915342E20", "252642083791534200000",
            "2.935987200710014E-244", "2.935987200710014e-244",
            "1.9196776985474992E-54", "1.9196776985474992e-54",
            "-1.89974989947006106E18", "-1899749899470061000",
            "-2.469953961816638E284", "-2.469953961816638e+284",
            "5.657104932209669E172", "5.657104932209669e+172",
            "-1.1885450957075002E-94", "-1.1885450957075002e-94",
            "-4.423891596293754E-181", "-4.423891596293754e-181",
            "-6.923142477537786E-229", "-6.923142477537786e-229",
            "-1.37851819748902E12", "-1378518197489.02",
            "5.589116926755792E-165", "5.589116926755792e-165",
            "1.820760059632202E-188", "1.820760059632202e-188",
            "3816035.6595838927", "3816035.6595838927",
            "-3.2205987727870326E-143", "-3.2205987727870326e-143",
            "4.6460572298951574E66", "4.6460572298951574e+66",
            "2.460647553350044E222", "2.460647553350044e+222",
            "3.0627457463417596E-285", "3.0627457463417596e-285",
            "-2.9467230865855538E218", "-2.9467230865855538e+218",
            "-1.6867871269807632E102", "-1.6867871269807632e+102",
            "-1.301932183754795E-253", "-1.301932183754795e-253",
            "5.866510197618417E-121", "5.866510197618417e-121",
            "9.845990179023729E22", "9.845990179023729e+22",
            "6.621260607384273E-33", "6.621260607384273e-33",
            "4.140062581819258E-35", "4.140062581819258e-35",
            "1.025432989513391E-10", "1.025432989513391e-10",
            "-1.411506998981979E122", "-1.411506998981979e+122",
            "-9.29464275969704E43", "-9.29464275969704e+43",
            "-1.4039652239332756E147", "-1.4039652239332756e+147",
            "1.7116179835807122E28", "1.7116179835807122e+28",
            "-1.8321572208252003E-233", "-1.8321572208252003e-233",
            "-2.7390478364507203E-192", "-2.7390478364507203e-192",
            "1.7051531148776812E-14", "1.7051531148776812e-14",
            "-3.4781050994040477E-255", "-3.4781050994040477e-255",
            "5.818794870226209E-94", "5.818794870226209e-94",
            "9.862579365149827E8", "986257936.5149827",
            "1.6577150890051604E244", "1.6577150890051604e+244",
            "2.13617864298509E139", "2.13617864298509e+139",
            "-7.841140628302135E88", "-7.841140628302135e+88",
            "2.2470202518480876E104", "2.2470202518480876e+104",
            "-2.471734478693203E-131", "-2.471734478693203e-131",
            "-1.2003672198762004E-224", "-1.2003672198762004e-224",
            "4.948679046781826E-237", "4.948679046781826e-237",
            "4.32457874363888E76", "4.32457874363888e+76",
            "1.1955372140496494E-212", "1.1955372140496494e-212",
            "3.076474693350453E-172", "3.076474693350453e-172",
            "9.290814400378052E-300", "9.290814400378052e-300",
            "-4.865584648543179E251", "-4.865584648543179e+251",
            "-3.9764429391759416E-157", "-3.9764429391759416e-157",
            "1.1791145467194905E-197", "1.1791145467194905e-197",
            "1.0114916665487012E284", "1.0114916665487012e+284",
            "-1.0278052106724026E76", "-1.0278052106724026e+76",
            "-2.7568427012428477E-222", "-2.7568427012428477e-222",
            "2.2751035990874975E-235", "2.2751035990874975e-235",
            "-1.137212494030369E183", "-1.137212494030369e+183",
            "0.06707174199235401", "0.06707174199235401",
            "-5.283648556530966E21", "-5.283648556530966e+21",
            "-7.726842615418134E-171", "-7.726842615418134e-171",
            "-1.153693921140757E-301", "-1.153693921140757e-301",
            "2.754560560398927E-185", "2.754560560398927e-185",
            "9.470016128394028E-278", "9.470016128394028e-278",
            "1.667590673467209E73", "1.667590673467209e+73",
            "2.568617739565187E105", "2.568617739565187e+105",
            "5.547547485638614E179", "5.547547485638614e+179",
            "-7.223495147441517E-137", "-7.223495147441517e-137",
            "-4.8547578132991436E131", "-4.8547578132991436e+131",
            "-8.711432829371118E282", "-8.711432829371118e+282",
            "3.185303087744401E-158", "3.185303087744401e-158",
            "-1.6773050183247424E79", "-1.6773050183247424e+79",
            "-2.2482099256108068E24", "-2.2482099256108068e+24",
            "4.957710382474177E45", "4.957710382474177e+45",
            "-9.617014352675602E-261", "-9.617014352675602e-261",
            "4.0134677737991064E27", "4.0134677737991064e+27",
            "1.7915669810782442E-265", "1.7915669810782442e-265",
            "6.560612153349073E185", "6.560612153349073e+185",
            "1.8496859689048536E-167", "1.8496859689048536e-167",
            "7.171631390152131E-161", "7.171631390152131e-161",
            "-1.572544421136526E-101", "-1.572544421136526e-101",
            "-3.910900784081583E183", "-3.910900784081583e+183",
            "-8.089272958605829E53", "-8.089272958605829e+53",
            "6.610926347955178E201", "6.610926347955178e+201",
            "1.598260745327428E-300", "1.598260745327428e-300",
            "8.900657299215204E61", "8.900657299215204e+61",
            "-4.575455939043593E-48", "-4.575455939043593e-48",
            "5.441848629943264E-293", "5.441848629943264e-293",
            "6.568309991470601E268", "6.568309991470601e+268",
            "2.890861461303572E-218", "2.890861461303572e-218",
            "5.902548737909375E217", "5.902548737909375e+217",
            "-3.019397420234632E-70", "-3.019397420234632e-70",
            "2.4516026425586006E93", "2.4516026425586006e+93",
            "8.612401579436992E56", "8.612401579436992e+56",
            "-8.58212475912537E64", "-8.58212475912537e+64",
            "3.935407085826981E-11", "3.935407085826981e-11",
            "-2.1477928683909633E237", "-2.1477928683909633e+237",
            "-1.5389875502607302E218", "-1.5389875502607302e+218",
            "-2.2391087930049937E54", "-2.2391087930049937e+54",
            "5.684931061378071E65", "5.684931061378071e+65",
            "2.2628270681346507E-170", "2.2628270681346507e-170",
            "1.1155491227464178E107", "1.1155491227464178e+107",
            "-2.2295983622969267E-296", "-2.2295983622969267e-296",
            "-1.259976783680846E257", "-1.259976783680846e+257",
            "-1.1601217403522858E-102", "-1.1601217403522858e-102",
            "-8.228851787755245E163", "-8.228851787755245e+163",
            "-2.832055986636307E282", "-2.832055986636307e+282",
            "-2.6913327074059025E-167", "-2.6913327074059025e-167",
            "-1.715690943586906E-284", "-1.715690943586906e-284",
            "1.643857169256697E-199", "1.643857169256697e-199",
            "4.247775728467433E302", "4.247775728467433e+302",
            "-1.1325304238054847E112", "-1.1325304238054847e+112",
            "1.70680636390834E-135", "1.70680636390834e-135",
            "-4.1667840272504274E273", "-4.1667840272504274e+273",
            "-6.006345096367277E-289", "-6.006345096367277e-289",
            "8.593121264199511E-90", "8.593121264199511e-90",
            "7.279076206561081E-187", "7.279076206561081e-187",
            "-1.045381163613225E191", "-1.045381163613225e+191",
            "2.4847243742598114E127", "2.4847243742598114e+127",
            "-4.7118883640978364E55", "-4.7118883640978364e+55",
            "-6.119688547511018E-191", "-6.119688547511018e-191",
            "9.411317834276238E-85", "9.411317834276238e-85",
            "-6.639900835574137E-145", "-6.639900835574137e-145",
            "1.3320785466671316E39", "1.3320785466671316e+39",
            "2.811700297673483E-289", "2.811700297673483e-289",
            "-1.7434799473851868E308", "-1.7434799473851868e+308",
            "-1.040715260656846E-127", "-1.040715260656846e-127",
            "8.011261369614413E-292", "8.011261369614413e-292",
            "-1.7692256697249178E279", "-1.7692256697249178e+279",
            "3.3198590886193986E200", "3.3198590886193986e+200",
            "-1.6660793836808689E136", "-1.6660793836808689e+136",
            "-4.91737965116812E21", "-4.91737965116812e+21",
            "6.225899802603606E-295", "6.225899802603606e-295",
            "-1.7883845288078826E275", "-1.7883845288078826e+275",
            "2.3733134665822486E-117", "2.3733134665822486e-117",
            "9.235544023593321E-103", "9.235544023593321e-103",
            "-1.1350897625603125E-213", "-1.1350897625603125e-213",
            "-2.913069142856956E284", "-2.913069142856956e+284",
            "3.400752573413448E-295", "3.400752573413448e-295",
            "-8.680001725539553E-79", "-8.680001725539553e-79",
            "-1.8159899494494432E-69", "-1.8159899494494432e-69",
            "3.3046905232457096E10", "33046905232.457096",
            "-2.1408146409547045E-191", "-2.1408146409547045e-191",
            "-9.717386764705999E172", "-9.717386764705999e+172",
            "2.565652054804555E-52", "2.565652054804555e-52",
            "-4.64597174388835E274", "-4.64597174388835e+274",
            "-4.9240010495862064E259", "-4.9240010495862064e+259",
            "6.1541618194509305E292", "6.1541618194509305e+292",
            "5.209131485909067E-36", "5.209131485909067e-36",
            "-8.945097185803037E-114", "-8.945097185803037e-114",
            "1.239346050520436E-105", "1.239346050520436e-105",
            "-1.3738805749498549E13", "-13738805749498.549",
            "-9.457670321525661E-121", "-9.457670321525661e-121",
            "2.428695989840853E-240", "2.428695989840853e-240",
            "5.549260923314881E300", "5.549260923314881e+300",
            "2.0996366708739743E263", "2.0996366708739743e+263",
            "3.3448652072265976E-63", "3.3448652072265976e-63",
            "-1.1112281632140467E57", "-1.1112281632140467e+57",
            "-9.155743707038111E300", "-9.155743707038111e+300",
            "1.5973580599051238E23", "1.5973580599051238e+23",
            "6.367286854338152E-102", "6.367286854338152e-102",
            "7.294761209812248E-9", "7.294761209812248e-9",
            "-5.808578437369889E-233", "-5.808578437369889e-233",
            "-6.055296710120528E50", "-6.055296710120528e+50",
            "1.9948674203924985E-254", "1.9948674203924985e-254",
            "-2.024130877991035E204", "-2.024130877991035e+204",
            "-8.582676705487225E-131", "-8.582676705487225e-131",
            "6.073854656252711E-70", "6.073854656252711e-70",
            "-4.559001118694996E-12", "-4.559001118694996e-12",
            "2.9417796950983935E-16", "2.9417796950983935e-16",
            "-1.5953925158931547E-156", "-1.5953925158931547e-156",
            "3.5047867793351586E191", "3.5047867793351586e+191",
            "-6.858195622373721E179", "-6.858195622373721e+179",
            "-4.2578302378517153E73", "-4.2578302378517153e+73",
            "1.1782266523828194E-304", "1.1782266523828194e-304",
            "1.8556304909752007E-8", "1.8556304909752007e-8",
            "-7.50979981528155E-34", "-7.50979981528155e-34",
            "1.2681132535741295E-297", "1.2681132535741295e-297",
            "4.7458841677071583E-79", "4.7458841677071583e-79",
            "-1.0042544195322652E-168", "-1.0042544195322652e-168",
            "-4.2708765656556097E83", "-4.2708765656556097e+83",
            "-1.1843611341190434E-132", "-1.1843611341190434e-132",
            "3.190348281268339E252", "3.190348281268339e+252",
            "-5.5728296513765455E-37", "-5.5728296513765455e-37",
            "7.657023501442685E-41", "7.657023501442685e-41",
            "5.721033359462792E154", "5.721033359462792e+154",
            "1.6508215247968605E121", "1.6508215247968605e+121",
            "-9.328794090480058E174", "-9.328794090480058e+174",
            "-2.0914987354186034E-125", "-2.0914987354186034e-125",
            "-3.665285841819152E99", "-3.665285841819152e+99",
            "-1.90631546012604E-51", "-1.90631546012604e-51",
            "-2.300997219530849E204", "-2.300997219530849e+204",
            "-2.5278346159328855E-59", "-2.5278346159328855e-59",
            "-3.7686021164238504E87", "-3.7686021164238504e+87",
            "3.155533392107993E189", "3.155533392107993e+189",
            "-1.1736748576720774E230", "-1.1736748576720774e+230",
            "5.1385343915734765E-195", "5.1385343915734765e-195",
            "1.4367029201879013E-206", "1.4367029201879013e-206",
            "9.096551969632829E48", "9.096551969632829e+48",
            "2.5299011047120137E-226", "2.5299011047120137e-226",
            "-6.459135769764946E-133", "-6.459135769764946e-133",
            "3.1883692879538974E-225", "3.1883692879538974e-225",
            "3.2800142139421754E9", "3280014213.9421754",
            "-4.925384862896422E-275", "-4.925384862896422e-275",
            "8.276184125150663E212", "8.276184125150663e+212",
            "-8.6068027181553E-34", "-8.6068027181553e-34",
            "1.4959962014571092E109", "1.4959962014571092e+109",
            "-2.1905656846527394E-307", "-2.1905656846527394e-307",
            "1.40153053204578E100", "1.40153053204578e+100",
            "-5.384730497957607E-189", "-5.384730497957607e-189",
            "7.043715467561859E104", "7.043715467561859e+104",
            "-2.5560386808517737E-217", "-2.5560386808517737e-217",
            "-8.945184303262314E80", "-8.945184303262314e+80",
            "1.3546085883125845E-70", "1.3546085883125845e-70",
            "-3.7385169989451644E294", "-3.7385169989451644e+294",
            "-1.6571404484344283E-105", "-1.6571404484344283e-105",
            "1.0048491458371931E156", "1.0048491458371931e+156",
            "-1.0116199196256522E-283", "-1.0116199196256522e-283",
            "-2.4485206704100705E-5", "-0.000024485206704100705",
            "-1.715427709955196E-238", "-1.715427709955196e-238",
            "-484159.9329459576", "-484159.9329459576",
            "2.3491681689420246E-29", "2.3491681689420246e-29",
            "-5.268544297632913E116", "-5.268544297632913e+116",
            "-2.0469431725930076E89", "-2.0469431725930076e+89",
            "2.3640925914830825E-144", "2.3640925914830825e-144",
            "1.0149622070194486E-15", "1.0149622070194486e-15",
            "4.741833562039393E-30", "4.741833562039393e-30",
            "-4.4306108474789404E-187", "-4.4306108474789404e-187",
            "-0.49119889928179383", "-0.49119889928179383",
            "-5.570695438475951E279", "-5.570695438475951e+279",
            "3.542939577260246E28", "3.542939577260246e+28",
            "1.4574620940231423E277", "1.4574620940231423e+277",
            "2.797856445220233E286", "2.797856445220233e+286",
            "6.763887784789997E270", "6.763887784789997e+270",
            "7.232443415280221E-264", "7.232443415280221e-264",
            "-1.1184135624550761E75", "-1.1184135624550761e+75",
            "-1.1270190842203836E-35", "-1.1270190842203836e-35",
            "1.1025136587431782E90", "1.1025136587431782e+90",
            "-2.345388180885992E-108", "-2.345388180885992e-108",
            "2.5873804987674344E37", "2.5873804987674344e+37",
            "2.5814839488115063E-120", "2.5814839488115063e-120",
            "-3.021746593834162E-194", "-3.021746593834162e-194",
            "-1.9772140229825375E65", "-1.9772140229825375e+65",
            "-2.970509197180555E-181", "-2.970509197180555e-181",
            "7.907378169507624E-234", "7.907378169507624e-234",
            "6.002852485044509E-34", "6.002852485044509e-34",
            "1.9450405537307732E-63", "1.9450405537307732e-63",
            "3.785642432552384E-11", "3.785642432552384e-11",
            "-8.115954667102416E207", "-8.115954667102416e+207",
            "2.1591424855265648E-150", "2.1591424855265648e-150",
            "1.196226164720459E-69", "1.196226164720459e-69",
            "-4.001947163703968E229", "-4.001947163703968e+229",
            "-1.6797689536745324E-218", "-1.6797689536745324e-218",
            "-1.3141687954337767E178", "-1.3141687954337767e+178",
            "-3.257144746721969E-6", "-0.000003257144746721969",
            "-5.1611736592182444E-225", "-5.1611736592182444e-225",
            "1.2094933716143312E11", "120949337161.43312",
            "2.702911591913264E-290", "2.702911591913264e-290",
            "-1.1177048196698321E-148", "-1.1177048196698321e-148",
            "1.1711828682005849E-284", "1.1711828682005849e-284",
            "2.7368699390552888E48", "2.7368699390552888e+48",
            "-1.35635879598161E77", "-1.35635879598161e+77",
            "-4.372304226344052E-46", "-4.372304226344052e-46",
            "-4.3354710475755285E-161", "-4.3354710475755285e-161",
            "-2.545778665144471E-304", "-2.545778665144471e-304",
            "8.203814514649687E-234", "8.203814514649687e-234",
            "3.700861309964956E162", "3.700861309964956e+162",
            "-1.3484046954115795E-156", "-1.3484046954115795e-156",
            "1.312869401238842E-126", "1.312869401238842e-126",
            "6.945218498781939E-121", "6.945218498781939e-121",
            "1.7437308480002393E-120", "1.7437308480002393e-120",
            "-1.0173773904239985E-38", "-1.0173773904239985e-38",
            "-5.0940859397845E149", "-5.0940859397845e+149",
            "-3.2895006134427173E-162", "-3.2895006134427173e-162",
            "4.060170284352099E-290", "4.060170284352099e-290",
            "4.904674483007542E-23", "4.904674483007542e-23",
            "5.370935763033375E124", "5.370935763033375e+124",
            "-1.6226157059080862E-254", "-1.6226157059080862e-254",
            "4.83745368183041E-263", "4.83745368183041e-263",
            "2.725486759337155E283", "2.725486759337155e+283",
            "3.84865637819235E-85", "3.84865637819235e-85",
            "-1.1142762452122575E-237", "-1.1142762452122575e-237",
            "-3.646273946179834E208", "-3.646273946179834e+208",
            "1.0273980218965451E-235", "1.0273980218965451e-235",
            "7.825078085748843E-260", "7.825078085748843e-260",
            "1.2740240068021313E-100", "1.2740240068021313e-100",
            "4.319378910716424E109", "4.319378910716424e+109",
            "1.996520302729351E-290", "1.996520302729351e-290",
            "7.941039903207105E-50", "7.941039903207105e-50",
            "2.116458094913945E19", "21164580949139450000",
            "-2.3419570495566568E-194", "-2.3419570495566568e-194",
            "5.338891102527262E251", "5.338891102527262e+251",
            "-2.4070258578483658E-290", "-2.4070258578483658e-290",
            "2.0972168486917254E68", "2.0972168486917254e+68",
            "-1.4328726709429753E108", "-1.4328726709429753e+108",
            "8.562629567004124E33", "8.562629567004124e+33",
            "-1.8625744127491534E28", "-1.8625744127491534e+28",
            "7.465731759466718E137", "7.465731759466718e+137",
            "3.352182503679289E-8", "3.352182503679289e-8",
            "-5.155219545177839E104", "-5.155219545177839e+104",
            "-1.3856115880931599E-295", "-1.3856115880931599e-295",
            "-6.944647407634158E306", "-6.944647407634158e+306",
            "8.676480312032985E-13", "8.676480312032985e-13",
            "-7.743952277472663E93", "-7.743952277472663e+93",
            "-4.128235403993636E173", "-4.128235403993636e+173",
            "4.211889717626801E233", "4.211889717626801e+233",
            "1.4095359958742086E-142", "1.4095359958742086e-142",
            "5.088783497180532E55", "5.088783497180532e+55",
            "5.968360087144624E-241", "5.968360087144624e-241",
            "1.229356744345374E-248", "1.229356744345374e-248",
            "-3.206157340019092E225", "-3.206157340019092e+225",
            "4.908405103566971E-99", "4.908405103566971e-99",
            "5.8357261212716E-122", "5.8357261212716e-122",
            "-2.503109570535304E-108", "-2.503109570535304e-108",
            "5.657670793933691E-99", "5.657670793933691e-99",
            "-2.77387482353423E-261", "-2.77387482353423e-261",
            "4.855935656800892E-230", "4.855935656800892e-230",
            "4.7461830760694935E93", "4.7461830760694935e+93",
            "-7.094881201033815E170", "-7.094881201033815e+170",
            "-2.0853863813656983E234", "-2.0853863813656983e+234",
            "4.6553206627059554E-125", "4.6553206627059554e-125",
            "-4.304553297701167E68", "-4.304553297701167e+68",
            "-7.953331198067227E49", "-7.953331198067227e+49",
            "-1.050651672775262E23", "-1.050651672775262e+23",
            "-5.231521511725493E-275", "-5.231521511725493e-275",
            "2.3727500664868674E162", "2.3727500664868674e+162",
            "4.2690079830521795E-103", "4.2690079830521795e-103",
            "-9.720617360804228E-268", "-9.720617360804228e-268",
            "9.934372003894738E-186", "9.934372003894738e-186",
            "-1.8461429603628806E-171", "-1.8461429603628806e-171",
            "-1.497338963099425E-192", "-1.497338963099425e-192",
            "-3.719242502857195", "-3.719242502857195",
            "-1.7424185132644386E232", "-1.7424185132644386e+232",
            "1.3379478232352177E-264", "1.3379478232352177e-264",
            "-1.0176664891931702E160", "-1.0176664891931702e+160",
            "-2.7218829985348243E-185", "-2.7218829985348243e-185",
            "-3.4334221566882735E-274", "-3.4334221566882735e-274",
            "1.7885510161981834E167", "1.7885510161981834e+167",
            "6.957735870484097E-225", "6.957735870484097e-225",
            "-7.095010390712636E236", "-7.095010390712636e+236",
            "-1.6381231296442524E286", "-1.6381231296442524e+286",
            "-5.3021221188362685E197", "-5.3021221188362685e+197",
            "9.254049242008466E45", "9.254049242008466e+45",
            "-1.9963546329894127E64", "-1.9963546329894127e+64",
            "-1.9793874084994824E-272", "-1.9793874084994824e-272",
            "-9.951972377537872E-284", "-9.951972377537872e-284",
            "-1.4183072189607412E-267", "-1.4183072189607412e-267",
            "1.4025882937529438E-209", "1.4025882937529438e-209",
            "-5.431135278681759E172", "-5.431135278681759e+172",
            "-2.7789559198924404E122", "-2.7789559198924404e+122",
            "3.595182048574689E-8", "3.595182048574689e-8",
            "1.2695411407046902E279", "1.2695411407046902e+279",
            "1.5350320529910745E215", "1.5350320529910745e+215",
            "4.1126307171093576E229", "4.1126307171093576e+229",
            "3.057880513256526E-163", "3.057880513256526e-163",
            "-3.942604428949509E300", "-3.942604428949509e+300",
            "2.951275254732759E117", "2.951275254732759e+117",
            "-4.729705206577528E196", "-4.729705206577528e+196",
            "4.09995944179338E-166", "4.09995944179338e-166",
            "2.2525803386533447E-34", "2.2525803386533447e-34",
            "-3.335987404361803E-294", "-3.335987404361803e-294",
            "-5.925094976127847E266", "-5.925094976127847e+266",
            "2.728258084105962E-265", "2.728258084105962e-265",
            "1.1529002021385509E21", "1.1529002021385509e+21",
            "-7.022566637174312E-137", "-7.022566637174312e-137",
            "1.298756907798718E-100", "1.298756907798718e-100",
            "3.0205864461711937E-158", "3.0205864461711937e-158",
            "2.8294709373986397E197", "2.8294709373986397e+197",
            "-7.695041735134747E262", "-7.695041735134747e+262",
            "1.35860163077432E-191", "1.35860163077432e-191",
            "-3.3321766350453383E-202", "-3.3321766350453383e-202",
            "1.0984087341640755E24", "1.0984087341640755e+24",
            "-1.575197622727457E-23", "-1.575197622727457e-23",
            "2.6378352875285097E-197", "2.6378352875285097e-197",
            "1.2378756062350376E-228", "1.2378756062350376e-228",
            "-2.4934158481144183E-65", "-2.4934158481144183e-65",
            "2.819285392761654E-41", "2.819285392761654e-41",
            "-6.365744387354759E121", "-6.365744387354759e+121",
            "7.659481535015372E-211", "7.659481535015372e-211",
            "3.866885791414968E141", "3.866885791414968e+141",
            "7.988847750489522E246", "7.988847750489522e+246",
            "-2.6734333494222946E223", "-2.6734333494222946e+223",
            "-7.293727197754586E-251", "-7.293727197754586e-251",
            "-2.0974549704007865E126", "-2.0974549704007865e+126",
            "8.296840266182899E-124", "8.296840266182899e-124",
            "3.98804790958654E172", "3.98804790958654e+172",
            "9.852114689096834E200", "9.852114689096834e+200",
            "1.1119146419808286E-262", "1.1119146419808286e-262",
            "-2.5527162965538704E287", "-2.5527162965538704e+287",
            "7.76905762498934E-202", "7.76905762498934e-202",
            "3.912402118870977E-274", "3.912402118870977e-274",
            "1.9332773890013524E221", "1.9332773890013524e+221",
            "8.397968988489074E169", "8.397968988489074e+169",
            "7.16599470190634E296", "7.16599470190634e+296",
            "9.332496311764967E-235", "9.332496311764967e-235",
            "4.584185150467924E131", "4.584185150467924e+131",
            "-3.6042388770344115E-208", "-3.6042388770344115e-208",
            "3.635391129149144E-41", "3.635391129149144e-41",
            "-6.98398712399557E266", "-6.98398712399557e+266",
            "-2.5232797205228953E-104", "-2.5232797205228953e-104",
            "1.34063895220469E106", "1.34063895220469e+106",
            "4.6203411027189186E75", "4.6203411027189186e+75",
            "7.586894878573426E85", "7.586894878573426e+85",
            "-2.9509377319593796E213", "-2.9509377319593796e+213",
            "6.130088806770423E243", "6.130088806770423e+243",
            "-1.4189287518620505E-53", "-1.4189287518620505e-53",
            "-8.126663592123504E36", "-8.126663592123504e+36",
            "-4.32724212803085E102", "-4.32724212803085e+102",
            "2.956801380009134E291", "2.956801380009134e+291",
            "-2.3974453460947914E-234", "-2.3974453460947914e-234",
            "8.720076019283289E-253", "8.720076019283289e-253",
            "-2.0835184714960294E299", "-2.0835184714960294e+299",
            "2.1703363784096512E176", "2.1703363784096512e+176",
            "9.216471559485341E-135", "9.216471559485341e-135",
            "-3.8859455916180926E43", "-3.8859455916180926e+43",
            "1.7373316468238464E-25", "1.7373316468238464e-25",
            "-5.956976848751973E-25", "-5.956976848751973e-25",
            "3.347534090267576E79", "3.347534090267576e+79",
            "1.9517403085057807E238", "1.9517403085057807e+238",
            "1.385991429889634E200", "1.385991429889634e+200",
            "5.067080064367402E-96", "5.067080064367402e-96",
            "6.283897492652382E-150", "6.283897492652382e-150",
            "2.4066399426180423E253", "2.4066399426180423e+253",
            "3.635518724113039E-174", "3.635518724113039e-174",
            "-7.043520096835034E-167", "-7.043520096835034e-167",
            "2.6768984104084454E248", "2.6768984104084454e+248",
            "-4.686842465636191E-55", "-4.686842465636191e-55",
            "-4.832347249377724E-232", "-4.832347249377724e-232",
            "1.3928921159049783E-182", "1.3928921159049783e-182",
            "-4.404978168732331E7", "-44049781.68732331",
            "-1.0282097439792802E75", "-1.0282097439792802e+75",
            "-5.924110440927113E-219", "-5.924110440927113e-219",
            "-1.8190881433194565E111", "-1.8190881433194565e+111",
            "-1.9242276849844615E-105", "-1.9242276849844615e-105",
            "-1.1613091618045056E304", "-1.1613091618045056e+304",
            "2.4889706754337444E288", "2.4889706754337444e+288",
            "-5.561811263314828E57", "-5.561811263314828e+57",
            "-1.042732267909743E-160", "-1.042732267909743e-160",
            "3.241271463978623E-260", "3.241271463978623e-260",
            "5.86442280706097E60", "5.86442280706097e+60",
            "2.497597109302957E-200", "2.497597109302957e-200",
            "-4.8856384568375684E-297", "-4.8856384568375684e-297",
            "3.110889276393968E304", "3.110889276393968e+304",
            "2.3086399780154923E-12", "2.3086399780154923e-12",
            "2.7368239848206196E-24", "2.7368239848206196e-24",
            "4.847887163519498E11", "484788716351.9498",
            "-1.3448895221742943E242", "-1.3448895221742943e+242",
            "-1.0392300129415144E308", "-1.0392300129415144e+308",
            "-9.129304231601154E-184", "-9.129304231601154e-184",
            "7.098815425763038E-161", "7.098815425763038e-161",
            "-3.5288118829388775E15", "-3528811882938877.5",
            "1.3219844384417693E-118", "1.3219844384417693e-118",
            "-4.198364809447652E138", "-4.198364809447652e+138",
            "-4.951846808684745E219", "-4.951846808684745e+219",
            "4.679982019855376E197", "4.679982019855376e+197",
            "3.099874162947209E-80", "3.099874162947209e-80",
            "2.6184183209970917E-72", "2.6184183209970917e-72",
            "8.995294792959006E145", "8.995294792959006e+145",
            "-2.1012939738474396E-268", "-2.1012939738474396e-268",
            "-3.833086417537613E119", "-3.833086417537613e+119",
            "5.877112374383301E57", "5.877112374383301e+57",
            "2.3493870044633467E166", "2.3493870044633467e+166",
            "4.816196658887906E23", "4.816196658887906e+23",
            "-3.578739088288494E44", "-3.578739088288494e+44",
            "-1.464497514641747E-266", "-1.464497514641747e-266",
            "-5.9124085021079306E91", "-5.9124085021079306e+91",
            "1.3480481501633533E157", "1.3480481501633533e+157",
            "1.0374591105500964E239", "1.0374591105500964e+239",
            "1.600268186322296E158", "1.600268186322296e+158",
            "-2.631156628656353E-261", "-2.631156628656353e-261",
            "1.8496463773685182E-16", "1.8496463773685182e-16",
            "1.3063043847387877E-279", "1.3063043847387877e-279",
            "3.0023052399786447E-288", "3.0023052399786447e-288",
            "-9.645247457196663E-129", "-9.645247457196663e-129",
            "-4.6603032209248155E297", "-4.6603032209248155e+297",
            "3.4823626350328016E-94", "3.4823626350328016e-94",
            "-1.0278765456002022E-262", "-1.0278765456002022e-262",
            "-4.145067729284346E-41", "-4.145067729284346e-41",
            "1.359787068733597E-267", "1.359787068733597e-267",
            "-7.822307281060049E7", "-78223072.81060049",
            "5.468556533063701E177", "5.468556533063701e+177",
            "1.5253199587787138E-147", "1.5253199587787138e-147",
            "-5.46909700117591E-167", "-5.46909700117591e-167",
            "-4.648663688050734E-295", "-4.648663688050734e-295",
            "-6.611343944366082E94", "-6.611343944366082e+94",
            "1.667023224123933E-185", "1.667023224123933e-185",
            "-1.3026935420681254E256", "-1.3026935420681254e+256",
            "8.606424602041901E-163", "8.606424602041901e-163",
            "-1.5908486797897467E-81", "-1.5908486797897467e-81",
            "-2608859.9669772885", "-2608859.9669772885",
            "1.2181935925251998E41", "1.2181935925251998e+41",
            "-3.4523115373241505E249", "-3.4523115373241505e+249",
            "6.584102972976999E-241", "6.584102972976999e-241",
            "1027212.6713517567", "1027212.6713517567",
            "-1.3552921372029527E-85", "-1.3552921372029527e-85",
            "2.0200376986083385E36", "2.0200376986083385e+36",
            "-7.017002866984873E61", "-7.017002866984873e+61",
            "8.877701947179517E20", "887770194717951700000",
            "5.58522478678829E292", "5.58522478678829e+292",
            "-6.194289429020599E-193", "-6.194289429020599e-193",
            "1.0663676772582015E-135", "1.0663676772582015e-135",
            "-3.3167466424622283E155", "-3.3167466424622283e+155",
            "1.678580097414636E-77", "1.678580097414636e-77",
            "5.304818266229286E-134", "5.304818266229286e-134",
            "-2.0661027264517316E-295", "-2.0661027264517316e-295",
            "-3.3002010549204836E-66", "-3.3002010549204836e-66",
            "3.0054168996160145E182", "3.0054168996160145e+182",
            "-3.351989700815993E130", "-3.351989700815993e+130",
            "-1.5281255050359111E68", "-1.5281255050359111e+68",
            "-5.186732594225494E-170", "-5.186732594225494e-170",
            "-1.3181692736148153E155", "-1.3181692736148153e+155",
            "-3.93590705670974E-266", "-3.93590705670974e-266",
            "7.043888656729415E-159", "7.043888656729415e-159",
            "5.658850209502461E-229", "5.658850209502461e-229",
            "-4.807746387502264E-249", "-4.807746387502264e-249",
            "-1.451235973546656E230", "-1.451235973546656e+230",
            "-9.976527859519227E234", "-9.976527859519227e+234",
            "1.2496814859873337E-194", "1.2496814859873337e-194",
            "-4.2466237884402306E-243", "-4.2466237884402306e-243",
            "2.2211627553850688E15", "2221162755385068.8",
            "1.5325521608153698E-116", "1.5325521608153698e-116",
            "-7.9703240255122E-246", "-7.9703240255122e-246",
            "-2.1111421671257103E303", "-2.1111421671257103e+303",
            "3.1074941302918204E48", "3.1074941302918204e+48",
            "3.894098755908939E-148", "3.894098755908939e-148",
            "3.4641218843802896E9", "3464121884.3802896",
            "2.6720604604803054E189", "2.6720604604803054e+189",
            "4.550956346019946E64", "4.550956346019946e+64",
            "-1.181049898011878E65", "-1.181049898011878e+65",
            "2.7507941838154155E216", "2.7507941838154155e+216",
            "2.1674418242121348E-261", "2.1674418242121348e-261",
            "-9.800362668838494E185", "-9.800362668838494e+185",
            "5.62789014274927E-125", "5.62789014274927e-125",
            "-3.228639815506151E175", "-3.228639815506151e+175",
            "6.865246416448406E-118", "6.865246416448406e-118",
            "2.917526806422004E-55", "2.917526806422004e-55",
            "-6.000567861084204E298", "-6.000567861084204e+298",
            "1.9648315069366863E-150", "1.9648315069366863e-150",
            "-5.82889167066196E-119", "-5.82889167066196e-119",
            "-1.6651973840710619E143", "-1.6651973840710619e+143",
            "-2.408449186457657E106", "-2.408449186457657e+106",
            "4.5779821357913236E-303", "4.5779821357913236e-303",
            "1.0772387439275795E108", "1.0772387439275795e+108",
            "-1.4166755864182666E127", "-1.4166755864182666e+127",
            "-9.251845905686768E-12", "-9.251845905686768e-12",
            "9.237831842812917E-187", "9.237831842812917e-187",
            "-7.442666493112721E244", "-7.442666493112721e+244",
            "4.3345783246882685E-141", "4.3345783246882685e-141",
            "-8.246781661371479E180", "-8.246781661371479e+180",
            "1.938373722687184E239", "1.938373722687184e+239",
            "-4.9641001724911155E-67", "-4.9641001724911155e-67",
            "0.5730744121827489", "0.5730744121827489",
            "3.4544252102748184E175", "3.4544252102748184e+175",
            "-2.681024430546473E-178", "-2.681024430546473e-178",
            "-3.3934480938167836E176", "-3.3934480938167836e+176",
            "2.8760085513162855E102", "2.8760085513162855e+102",
            "1.504770424646433E158", "1.504770424646433e+158",
            "-8.937977948838097E-280", "-8.937977948838097e-280",
            "-1.7140698628821378E168", "-1.7140698628821378e+168",
            "-1.764955314713815E240", "-1.764955314713815e+240",
            "3.902617063266851E-55", "3.902617063266851e-55",
            "7.117888553507088E90", "7.117888553507088e+90",
            "-5.964441627828361E65", "-5.964441627828361e+65",
            "-9.56926261514795E30", "-9.56926261514795e+30",
            "-2.48954734382219E-275", "-2.48954734382219e-275",
            "6.354640094086927E46", "6.354640094086927e+46",
            "-5.210398751237951E-214", "-5.210398751237951e-214",
            "3.606050866058515E273", "3.606050866058515e+273",
            "-6.662753447028364E177", "-6.662753447028364e+177",
            "-1.5782735863780817E283", "-1.5782735863780817e+283",
            "1.0984368493610354E-78", "1.0984368493610354e-78",
            "-3.377889794350012E-14", "-3.377889794350012e-14",
            "-1.0974631654263995E-265", "-1.0974631654263995e-265",
            "4.6920932802636666E-307", "4.6920932802636666e-307",
            "-2.780013398360822E83", "-2.780013398360822e+83",
            "-9.638257393707204E135", "-9.638257393707204e+135",
            "1.0289448545373356E-55", "1.0289448545373356e-55",
            "-6.790360357205896E258", "-6.790360357205896e+258",
            "-4.1811509719634105E-109", "-4.1811509719634105e-109",
            "7.247056610390689E279", "7.247056610390689e+279",
            "6.081176655412205E121", "6.081176655412205e+121",
            "1.1716870753902573E-272", "1.1716870753902573e-272",
            "3.7037492824413847E-202", "3.7037492824413847e-202",
            "5.351928741168267E162", "5.351928741168267e+162",
            "-1.3784029879071795E94", "-1.3784029879071795e+94",
            "-4.53784855358487E56", "-4.53784855358487e+56",
            "-9.278961550114888E100", "-9.278961550114888e+100",
            "-4.712017383627928E-99", "-4.712017383627928e-99",
            "-2.688253640532085E-260", "-2.688253640532085e-260",
            "-5.023298370253172E114", "-5.023298370253172e+114",
            "3.855359941002602E194", "3.855359941002602e+194",
            "8.083894269085172E67", "8.083894269085172e+67",
            "2.7389866401380114E122", "2.7389866401380114e+122",
            "1.6422747791655237E230", "1.6422747791655237e+230",
            "-4.8728038649257624E206", "-4.8728038649257624e+206",
            "2.5928604656832046E217", "2.5928604656832046e+217",
            "-1.5742390521522458E-235", "-1.5742390521522458e-235",
            "-5.642949687414284E267", "-5.642949687414284e+267",
            "1.5470531797012146E241", "1.5470531797012146e+241",
            "-4.242808916772591E-269", "-4.242808916772591e-269",
            "3.2809593541777255E-183", "3.2809593541777255e-183",
            "-1.0822003264068831E150", "-1.0822003264068831e+150",
            "6.999830194115891E-43", "6.999830194115891e-43",
            "-7.268043565625934E53", "-7.268043565625934e+53",
            "-1.6077059682216206", "-1.6077059682216206",
            "1.180409631360218E28", "1.180409631360218e+28",
            "-1.8861626148870056E-174", "-1.8861626148870056e-174",
            "1.0115479595424782E-261", "1.0115479595424782e-261",
            "-5.9667512155185555E-242", "-5.9667512155185555e-242",
            "-1.6328913209714089E-226", "-1.6328913209714089e-226",
            "-1.981267111891068E68", "-1.981267111891068e+68",
            "-7.704290313194404E-305", "-7.704290313194404e-305",
            "-3.604104752481565E-210", "-3.604104752481565e-210",
            "3.003423279402192E-291", "3.003423279402192e-291",
            "-2.1533152411225013E-194", "-2.1533152411225013e-194",
            "-1.281854483153793E116", "-1.281854483153793e+116",
            "-3.0155814212376766E147", "-3.0155814212376766e+147",
            "2.441770021910798E-120", "2.441770021910798e-120",
            "1.11862814094906E-123", "1.11862814094906e-123",
            "6.216789973194849E-296", "6.216789973194849e-296",
            "3.498635021575085E-75", "3.498635021575085e-75",
            "1.3293516044655422E-269", "1.3293516044655422e-269",
            "1.245812715445624E306", "1.245812715445624e+306",
            "-3.0342769486272903E81", "-3.0342769486272903e+81",
            "-2.9775325991302956E51", "-2.9775325991302956e+51",
            "-2.952016231687207E152", "-2.952016231687207e+152",
            "-9.415003596533907E250", "-9.415003596533907e+250",
            "2.1890035413147395E-269", "2.1890035413147395e-269",
            "-1.5023248404488053E63", "-1.5023248404488053e+63",
            "-6.7529492798930888E16", "-67529492798930890",
            "-4.1969795154228874E-168", "-4.1969795154228874e-168",
            "9.122826302665776E-86", "9.122826302665776e-86",
            "2.5139678431467798E-164", "2.5139678431467798e-164",
            "2.201201483342101E182", "2.201201483342101e+182",
            "8.905152303634217E303", "8.905152303634217e+303",
            "6.233014296287898E-123", "6.233014296287898e-123",
            "3.1094374754104864E238", "3.1094374754104864e+238",
            "5.088285645224385E115", "5.088285645224385e+115",
            "-2.1393028767886036E261", "-2.1393028767886036e+261",
            "-7.457407117317363E303", "-7.457407117317363e+303",
            "-1.840489763293523E81", "-1.840489763293523e+81",
            "-8.59312828838656E303", "-8.59312828838656e+303",
            "4.0235878504185015E-277", "4.0235878504185015e-277",
            "-4.555122923532829E150", "-4.555122923532829e+150",
            "-2.574965448910668E152", "-2.574965448910668e+152",
            "3.3300646309702155E252", "3.3300646309702155e+252",
            "2.464471334772395E187", "2.464471334772395e+187",
            "5.768419950975654E10", "57684199509.75654",
            "2.2250738585072014E-308", "2.2250738585072014e-308",
            "4.9E-324", "5e-324",
            "1.449994619555313e-309", "1.449994619555313e-309"
    };

    static JSONDecoderCache cache = new JSONDecoderCache();

    static boolean bcLoaded;

    static String baseKey;
    
    static String baseData;
    
    static String baseSignatures;
    
    static String baseEncryption;

    static String keyId;
    
    static SymmetricKeys symmetricKeys;

    @BeforeClass
    public static void openFile() throws Exception {
        // Start deprecating Bouncycastle since Android will remove most of it anyway
        CustomCryptoProvider.forcedLoad(false);
        
        Locale.setDefault(Locale.FRANCE);  // Should create HUGE problems :-)
        baseKey = System.clearProperty("test.keys") + File.separator;
        baseData = System.clearProperty("test.data") + File.separator;
        baseSignatures = System.clearProperty("test.signatures") + 
                File.separator + "json-signatures" + File.separator;
        baseEncryption = System.clearProperty("test.encryption") + 
                File.separator + "json-encryption" + File.separator;
        symmetricKeys = new SymmetricKeys(baseKey);
    }

    public static class Reader extends JSONDecoder {
        void test(boolean ok) throws IOException {
            if (!ok) throw new IOException("Bad");
        }

        @Override
        protected void readJSONData(JSONObjectReader rd) throws IOException {
            test(rd.getBoolean(BOOL_TRUE));
            test(!rd.getBoolean(BOOL_FALSE));
            test(!rd.getBooleanConditional(BOOL_UNKNOWM));
            test(!rd.getBooleanConditional(BOOL_UNKNOWM));
            test(rd.getString(STRING).equals(STRING_VALUE));
            test(rd.getStringConditional(STRING_UNKNOWM) == null);
            test(rd.getStringConditional(STRING_WITH_DEFAULT1, STRING_DEFAULT).equals(STRING_DEFAULT));
            test(rd.getStringConditional(STRING_WITH_DEFAULT2, STRING_DEFAULT).equals(STRING_VALUE));
            test(ArrayUtil.compare(rd.getBinary(BLOB), BLOB_VALUE));
            test(rd.getStringArray(EMPTY_STRING_LIST).length == 0);
            String[] list = rd.getStringArray(STRING_LIST);
            test(list.length == STRING_LIST_VALUE.length);
            for (int i = 0; i < list.length; i++) {
                test(list[i].equals(STRING_LIST_VALUE[i]));
            }
            JSONArrayReader ar = rd.getArray("KURT");
            JSONArrayReader ar1 = ar.getArray();
            test(ar1.getString().equals(SUPER_LONG_LINE));
            test(ar1.getString().equals("Ty"));
            JSONArrayReader ar2 = ar.getArray();
            test(ar2.getString().equals("lurt"));
            test(ar2.getString().equals("Ty"));
            rd.getObject("MURT").getString("URK");
        }

        @Override
        public String getContext() {
            return CONTEXT;
        }
    }

    static class Writer extends JSONEncoder {
        @Override
        protected void writeJSONData(JSONObjectWriter wr) throws IOException {
            wr.setBoolean(BOOL_TRUE, true);
            wr.setBoolean(BOOL_FALSE, false);
            wr.setString(STRING, STRING_VALUE);
            wr.setString(STRING_WITH_DEFAULT2, STRING_VALUE);
            wr.setBinary(BLOB, BLOB_VALUE);
            wr.setStringArray(EMPTY_STRING_LIST, new String[0]);
            wr.setStringArray(STRING_LIST, STRING_LIST_VALUE);
            JSONArrayWriter aw = wr.setArray("KURT");
            aw.setArray().setString(SUPER_LONG_LINE).setString("Ty");
            aw.setArray().setString("lurt").setString("Ty");
            wr.setObject("MURT").setString("URK", "urk");
        }

        @Override
        public String getContext() {
            return CONTEXT;
        }
    }

    public static class ESC extends JSONDecoder {
        String escape;

        @Override
        protected void readJSONData(JSONObjectReader rd) throws IOException {
            escape = rd.getString("Esca\npe");
        }

        @Override
        public String getContext() {
            return "http://example.com/escape";
        }

        @Override
        public String getQualifier() {
            return "Escaper";
        }
    }

    enum PARSER_ERR {
        MISS_ARG("Missing argument"),
        ARRAY_LIMIT("Trying to read past of array limit: "),
        EXPECTED("In the \"strict\" mode JSON Numbers must be fully normalized according to ECMAScript."),
        COMMA("Expected ',' but got 'e'"),
        SYNTAX("Unrecognized or malformed JSON token");

        String mess;

        PARSER_ERR(String mess) {
            this.mess = mess;
        }
    }

    PARSER_ERR expected_error;

    void checkException(IOException e) {
        if (expected_error == null) {
            fail(e.getMessage());
        }
        String error = e.getMessage();
        if (error.length() > expected_error.mess.length()) {
            error = error.substring(0, expected_error.mess.length());
        }
        if (!expected_error.mess.equals(error)) {
            fail("Wrong error: " + e.getMessage());
        }
    }

    void checkException(Exception e, String compare_message) {
        String m = e.getMessage();
        if (compare_message != null && !m.equals(compare_message)) {
            fail("Exception: " + m);
        }
    }

    static KeyPair readJwk(String keyType) throws Exception {
        JSONObjectReader jwkPlus = JSONParser.parse(ArrayUtil.readFile(baseKey + keyType + "privatekey.jwk"));
        // Note: The built-in JWK decoder does not accept "kid" since it doesn't have a meaning in JSF or JEF. 
        if ((keyId = jwkPlus.getStringConditional("kid")) != null) {
            jwkPlus.removeProperty("kid");
        }
        return jwkPlus.getKeyPair();
    }

    static JSONX509Verifier readDerCertificate(String name) throws Exception {
        KeyStore keyStore = KeyStore.getInstance("JKS");
        keyStore.load (null, null);
        keyStore.setCertificateEntry ("mykey",
                                      CertificateUtil.getCertificateFromBlob (
                                           ArrayUtil.readFile(baseKey + name)));        
        return new JSONX509Verifier(new KeyStoreVerifier(keyStore));
    }

    static JSONObjectReader readSignature(String shortName) throws Exception {
        return JSONParser.parse(ArrayUtil.readFile(baseSignatures + shortName));
    }

    static JSONObjectReader readEncryption(String shortName) throws Exception {
        return JSONParser.parse(ArrayUtil.readFile(baseEncryption + shortName));
    }

    void booleanValues(boolean value) throws IOException {
        JSONObjectWriter or = new JSONObjectWriter();
        or.setArray("name").setBoolean(value);
        assertTrue(JSONParser.parse(or.serializeToBytes(JSONOutputFormats.PRETTY_PRINT)).getArray("name").getBoolean() == value);
        or = new JSONObjectWriter();
        or.setBoolean("name", value);
        assertTrue(JSONParser.parse(or.serializeToBytes(JSONOutputFormats.PRETTY_PRINT)).getBoolean("name") == value);
    }
    
    void dateTimeTextual(String dateTime, String dateTimeUtc) throws IOException {
        GregorianCalendar gc = JSONParser.parse("{\"name\":\"" + dateTime + "\"}").getDateTime("name", ISODateTime.COMPLETE);
        assertTrue("Local", new JSONObjectWriter().setDateTime("name", gc, ISODateTime.LOCAL_NO_SUBSECONDS).toString().contains("\"" + dateTime + "\""));
        assertTrue("UTC", new JSONObjectWriter().setDateTime("name", gc, ISODateTime.UTC_NO_SUBSECONDS).toString().contains("\"" + dateTimeUtc + "\""));
    }

    void dateTimeFractions(String fractionalSeconds, int milliSeconds) throws IOException {
        GregorianCalendar dateTime = JSONParser.parse("{\"date\":" +
                "\"2009-12-24T13:45:23." + fractionalSeconds + "Z\"}")
                .getDateTime("date", ISODateTime.COMPLETE);
        assertTrue("Fraction", dateTime.get(GregorianCalendar.MILLISECOND) == milliSeconds);
    }

    void dateTimeTest() throws IOException {
        GregorianCalendar dateTime = new GregorianCalendar();
        dateTime.setTimeInMillis((dateTime.getTimeInMillis() / 1000) * 1000);
        JSONObjectWriter or = new JSONObjectWriter();
        or.setArray("name").setDateTime(dateTime, ISODateTime.UTC_NO_SUBSECONDS);
        GregorianCalendar readDateTime = JSONParser.parse(or.serializeToBytes(JSONOutputFormats.PRETTY_PRINT)).getArray("name").getDateTime(ISODateTime.COMPLETE);
        assertTrue("array", readDateTime.getTimeInMillis() == dateTime.getTimeInMillis());
        or = new JSONObjectWriter();
        or.setDateTime("name", dateTime, ISODateTime.LOCAL_NO_SUBSECONDS);
        readDateTime = JSONParser.parse(or.serializeToBytes(JSONOutputFormats.PRETTY_PRINT)).getDateTime("name", ISODateTime.COMPLETE);
        assertTrue("object", readDateTime.getTimeInMillis() == dateTime.getTimeInMillis());
        dateTimeTextual("2009-12-24T05:45:23-08:00", "2009-12-24T13:45:23Z");
        dateTimeTextual("2009-12-24T05:45:23+08:00", "2009-12-23T21:45:23Z");
        dateTimeTextual("2009-12-24T05:45:23+01:00", "2009-12-24T04:45:23Z");
        dateTimeTextual("2009-06-24T05:45:23+01:00", "2009-06-24T04:45:23Z");
        dateTimeTextual("2009-12-24T05:45:23-08:30", "2009-12-24T14:15:23Z");
        dateTimeTextual("2009-12-24T05:45:23+08:09", "2009-12-23T21:36:23Z");
        dateTimeTextual("2009-12-24T05:45:23-08:09", "2009-12-24T13:54:23Z");
        dateTimeFractions("001", 1);
        dateTimeFractions("0027", 2);
        dateTimeFractions("01", 10);
        dateTimeFractions("1", 100);
        dateTimeFractions("100", 100);
        dateTimeFractions("12", 120);
        dateTimeFractions("15679223", 156);
    }

    void bigIntegerValues(BigInteger value) throws IOException {
        JSONObjectWriter or = new JSONObjectWriter();
        or.setArray("name").setBigInteger(value);
        assertTrue(JSONParser.parse(or.serializeToBytes(JSONOutputFormats.PRETTY_PRINT)).getArray("name").getBigInteger().equals(value));
        or = new JSONObjectWriter();
        or.setBigInteger("name", value);
        assertTrue(JSONParser.parse(or.serializeToBytes(JSONOutputFormats.PRETTY_PRINT)).getBigInteger("name").equals(value));
    }

    void moneyValues(BigDecimal value) throws IOException {
        JSONObjectWriter or = new JSONObjectWriter();
        or.setArray("name").setMoney(value);
        assertTrue(JSONParser.parse(or.serializeToBytes(JSONOutputFormats.PRETTY_PRINT)).getArray("name").getMoney().equals(value));
        or = new JSONObjectWriter();
        or.setMoney("name", value);
        assertTrue(JSONParser.parse(or.serializeToBytes(JSONOutputFormats.PRETTY_PRINT)).getMoney("name").equals(value));
    }

    void bigDecimalValues(BigDecimal value) throws IOException {
        JSONObjectWriter or = new JSONObjectWriter();
        or.setArray("name").setBigDecimal(value);
        assertTrue(JSONParser.parse(or.serializeToBytes(JSONOutputFormats.PRETTY_PRINT)).getArray("name").getBigDecimal().equals(value));
        or = new JSONObjectWriter();
        or.setBigDecimal("name", value);
        assertTrue(JSONParser.parse(or.serializeToBytes(JSONOutputFormats.PRETTY_PRINT)).getBigDecimal("name").equals(value));
    }

    void int53Variables(long value) throws IOException {
        JSONObjectWriter or = new JSONObjectWriter();
        or.setArray("name").setInt53(value);
        assertTrue("long", JSONParser.parse(or.serializeToBytes(JSONOutputFormats.PRETTY_PRINT)).getArray("name").getInt53() == value);
        or = new JSONObjectWriter();
        or.setInt53("name", value);
        assertTrue("long", JSONParser.parse(or.serializeToBytes(JSONOutputFormats.PRETTY_PRINT)).getInt53("name") == value);
        or = new JSONObjectWriter();
        or.setArray("name").setLong(value);
        assertTrue("long", JSONParser.parse(or.serializeToBytes(JSONOutputFormats.PRETTY_PRINT)).getArray("name").getLong() == value);
        or = new JSONObjectWriter();
        or.setLong("name", value);
        assertTrue("long", JSONParser.parse(or.serializeToBytes(JSONOutputFormats.PRETTY_PRINT)).getLong("name") == value);
    }

    void longRange(BigInteger value, boolean mustFail) throws IOException {
        try {
            JSONParser.parse(new JSONObjectWriter().setBigInteger("v", value).toString()).getLong("v");
            assertFalse("range", mustFail);
        } catch (Exception e) {
            checkException(e, "Int64 value out of range: " + value);
        }
        try {
            JSONParser.parse("[\"" + value + "\"]").getJSONArrayReader().getLong();
            assertFalse("range", mustFail);
        } catch (Exception e) {
            checkException(e, "Int64 value out of range: " + value);
        }
    }

    void badArgument(String string) {
        try {
            simpleObjectType(string);
            fail("Didn't bomb");
            simpleArrayType(string);
            fail("Didn't bomb");
        } catch (IOException e) {
            checkException(e);
        }
    }

    void floatingPoint(String string, double ref) throws Exception {
        assertTrue(simpleArrayType(string).getDouble() == ref);
        assertTrue(simpleObjectType(string).getDouble("name") == ref);
        assertTrue(simpleArrayType(string).getElementType() == JSONTypes.NUMBER);
        assertTrue(simpleObjectType(string).getPropertyType("name") == JSONTypes.NUMBER);
        assertTrue(simpleArrayType(string + "  ").getElementType() == JSONTypes.NUMBER);
        assertTrue(simpleObjectType(string + "  ").getPropertyType("name") == JSONTypes.NUMBER);
        JSONObjectWriter or = new JSONObjectWriter();
        or.setArray("name").setDouble(ref);
        assertTrue(JSONParser.parse(or.serializeToBytes(JSONOutputFormats.PRETTY_PRINT)).getArray("name").getDouble() == ref);
        or = new JSONObjectWriter().setDouble("name", ref);
        assertTrue(JSONParser.parse(or.serializeToBytes(JSONOutputFormats.PRETTY_PRINT)).getDouble("name") == ref);
    }

    void integerValue(String string, boolean mustFail) throws Exception {
        int ref = (int) Double.parseDouble(string);
        if (mustFail) {
            try {
                JSONParser.parse("{\"i\":" + string + "}").getInt("i");
                fail("Should fail");
            } catch (IOException e) {
                return;
            }
        }
        assertTrue(simpleArrayType(string).getInt() == ref);
        assertTrue(simpleObjectType(string).getInt("name") == ref);
        assertTrue(simpleArrayType(string).getElementType() == JSONTypes.NUMBER);
        assertTrue(simpleObjectType(string).getPropertyType("name") == JSONTypes.NUMBER);
        assertTrue(simpleArrayType(string + "  ").getElementType() == JSONTypes.NUMBER);
        assertTrue(simpleObjectType(string + "  ").getPropertyType("name") == JSONTypes.NUMBER);
        JSONObjectWriter or = new JSONObjectWriter();
        or.setArray("name").setInt(ref);
        assertTrue(JSONParser.parse(or.serializeToBytes(JSONOutputFormats.PRETTY_PRINT)).getArray("name").getInt() == ref);
        or = new JSONObjectWriter().setInt("name", ref);
        assertTrue(JSONParser.parse(or.serializeToBytes(JSONOutputFormats.PRETTY_PRINT)).getInt("name") == ref);
    }

    void es6NumberTest() throws Exception {
        int i = 0;
        while (i < ECMAScript_NUMBERS.length) {
            String original = ECMAScript_NUMBERS[i++];
            String expected = ECMAScript_NUMBERS[i++];
            String result = new String(new JSONObjectWriter()
                    .setDouble("v", Double.valueOf(original))
                    .serializeToBytes(JSONOutputFormats.NORMALIZED), "UTF-8");
            assertTrue("es6num", result.equals("{\"v\":" + expected + "}"));
        }
    }

    JSONObjectReader simpleObjectType(String string) throws IOException {
        return JSONParser.parse(new StringBuilder("{\"name\":")
                .append(string)
                .append('}').toString());
    }

    JSONObjectReader simpleObjectType2(String string) throws IOException {
        return simpleObjectType('"' + string + '"');
    }

    JSONArrayReader simpleArrayType(String string) throws IOException {
        return JSONParser.parse(new StringBuilder("{\"name\":[")
                .append(string)
                .append("]}").toString()).getArray("name");
    }

    JSONArrayReader simpleArrayType2(String string) throws IOException {
        return simpleArrayType('"' + string + '"');
    }

    static BigInteger getCurvePoint(JSONObjectReader rd, String property, KeyAlgorithms ec) throws IOException {
        byte[] fixed_binary = rd.getBinary(property);
        if (fixed_binary.length != (ec.getPublicKeySizeInBits() + 7) / 8) {
            throw new IOException("Public EC key parameter \"" + property + "\" is not nomalized");
        }
        return new BigInteger(1, fixed_binary);
    }

    static KeyPair getKeyPairFromJwk(String jwk) throws Exception {
        JSONObjectReader rd = JSONParser.parse(jwk);
        KeyAlgorithms ec = KeyAlgorithms.getKeyAlgorithmFromId(rd.getString(JSONCryptoHelper.CRV_JSON),
                AlgorithmPreferences.JOSE);
        if (ec.getKeyType() != KeyTypes.EC) {
            throw new IOException("\"" + JSONCryptoHelper.CRV_JSON + "\" is not an EC type");
        }
        ECPoint w = new ECPoint(getCurvePoint(rd, "x", ec), getCurvePoint(rd, "y", ec));
        PublicKey publicKey = KeyFactory.getInstance("EC").generatePublic(new ECPublicKeySpec(w, ec.getECParameterSpec()));
        PrivateKey privateKey = KeyFactory.getInstance("EC").generatePrivate(new ECPrivateKeySpec(getCurvePoint(rd, "d", ec), ec.getECParameterSpec()));
        return new KeyPair(publicKey, privateKey);
    }

    static final String ESCAPING = "{ \"@context\" : \"http://example.com/escape\", " +
            "\"@qualifier\" : \"Escaper\", " +
            "\"Esca\\npe\":\"\\u0041\\u000A\\tTAB\\nN'L /\\\\\\\"\" }";
    static final String ESCAPING2 = "{ \"@context\" : \"http://example.com/escape\", " +
            "\"Esca\\npe\":\"\\u0041\\u000A\\tTAB\\nNL /\\\\\\\"\" }";

    @Test
    public void DocumentCache() throws Exception {
        JSONDecoderCache cache = new JSONDecoderCache();
        cache.addToCache(Reader.class);
        cache.addToCache(ESC.class);
        try {
            cache.parse(ESCAPING2.getBytes("UTF-8"));
            fail("Should have failed");
        } catch (Exception e) {
            checkException(e, "Unknown JSONDecoder type: http://example.com/escape");
        }
        ESC escape = (ESC) cache.parse(ESCAPING.getBytes("UTF-8"));
        assertTrue("Escaping", escape.escape.equals("A\n\tTAB\nN'L /\\\""));
        byte[] data = new Writer().serializeJSONDocument(JSONOutputFormats.PRETTY_PRINT);
        Reader reader = (Reader) cache.parse(data);
        byte[] output = reader.getWriter().serializeToBytes(JSONOutputFormats.PRETTY_PRINT);
        assertTrue(ArrayUtil.compare(data, output));
    }

    @Test
    public void JavaScriptMode() throws Exception {
        String json = new String(JSONParser.parse(ESCAPING).serializeToBytes(JSONOutputFormats.PRETTY_PRINT), "UTF-8");
        json = toJavaScript(json.substring(0, json.length() - 1), false);
        String jsn = new String(JSONParser.parse(ESCAPING).serializeToBytes(JSONOutputFormats.PRETTY_JS_NATIVE), "UTF-8");
        assertTrue("JS Native", jsn.equals(json));
        json = new String(JSONParser.parse(ESCAPING).serializeToBytes(JSONOutputFormats.NORMALIZED), "UTF-8");
        json = "'" + toJavaScript(json, true) + "'";
        JSONObjectWriter writer = new JSONObjectWriter().setString("a%", "five");
        json = new String(writer.serializeToBytes(JSONOutputFormats.PRETTY_JS_NATIVE), "UTF-8");
        assertTrue("JS", json.equals("{\n  \"a%\": \"five\"\n}"));
        writer = new JSONObjectWriter().setString("a5", "five");
        json = new String(writer.serializeToBytes(JSONOutputFormats.PRETTY_JS_NATIVE), "UTF-8");
        assertTrue("JS", json.equals("{\n  a5: \"five\"\n}"));
        writer = new JSONObjectWriter().setString("a", "five");
        json = new String(writer.serializeToBytes(JSONOutputFormats.PRETTY_JS_NATIVE), "UTF-8");
        assertTrue("JS", json.equals("{\n  a: \"five\"\n}"));
        writer = new JSONObjectWriter().setString("5", "five");
        json = new String(writer.serializeToBytes(JSONOutputFormats.PRETTY_JS_NATIVE), "UTF-8");
        assertTrue("JS", json.equals("{\n  \"5\": \"five\"\n}"));
        writer = new JSONObjectWriter().setString("trouble", "</script>&");
        json = new String(writer.serializeToBytes(JSONOutputFormats.PRETTY_JS_NATIVE), "UTF-8");
        assertTrue("JS", json.equals("{\n  trouble: \"</script>&\"\n}"));
        json = new String(writer.serializeToBytes(JSONOutputFormats.PRETTY_PRINT), "UTF-8");
        assertTrue("JS", json.equals("{\n  \"trouble\": \"</script>&\"\n}\n"));
        json = new String(writer.serializeToBytes(JSONOutputFormats.NORMALIZED), "UTF-8");
        assertTrue("JS", json.equals("{\"trouble\":\"</script>&\"}"));
    }

    String toJavaScript(String json, boolean quote) {
        StringBuilder s = new StringBuilder();
        for (char c : json.toCharArray()) {
            if (quote && c == '\'') {
                s.append('\\');
            }
            s.append(c);
        }
        return s.toString();
    }

    @Test
    public void ParserPrimitives() throws Exception {
        JSONArrayReader ar;
        JSONObjectReader or;
        assertTrue(simpleArrayType("10  ").getInt() == 10);
        assertTrue(simpleObjectType("10  ").getInt("name") == 10);
        assertTrue(simpleArrayType("4").getInt() == 4);
        assertTrue(simpleObjectType("4").getInt("name") == 4);
        assertTrue(simpleArrayType2("40000000000000000").getBigInteger().equals(new BigInteger("40000000000000000")));
        assertTrue(simpleObjectType2("40000000000000000").getBigInteger("name").equals(new BigInteger("40000000000000000")));
        assertTrue(simpleArrayType2("40000000000000000").getMoney().equals(new BigDecimal("40000000000000000")));
        assertTrue(simpleObjectType2("40000000000000000").getMoney("name").equals(new BigDecimal("40000000000000000")));
        assertTrue(simpleArrayType2("40000000000000000.45").getMoney().equals(new BigDecimal("40000000000000000.45")));
        assertTrue(simpleObjectType2("40000000000000000.45").getMoney("name").equals(new BigDecimal("40000000000000000.45")));
        assertTrue(simpleArrayType2("0.0").getMoney().equals(new BigDecimal("0.0")));
        assertTrue(simpleObjectType2("0.0").getMoney("name").equals(new BigDecimal("0.0")));
        assertTrue(simpleArrayType("40000000000000000").getDouble() == Double.valueOf("40000000000000000"));
        assertTrue(simpleObjectType("40000000000000000").getDouble("name") == Double.valueOf("40000000000000000"));
        assertTrue(simpleArrayType("400000000000.45").getDouble() == 400000000000.45);
        assertTrue(simpleObjectType("400000000000.45").getDouble("name") == 400000000000.45);
        assertTrue(simpleArrayType("404500000000").getDouble() == 40.45e10);
        assertTrue(simpleObjectType("404500000000").getDouble("name") == 40.45e10);
        assertTrue(simpleArrayType("   true   ").getBoolean());
        assertTrue(simpleArrayType("true").getBoolean());
        assertTrue(simpleObjectType("true").getBoolean("name"));
        assertFalse(simpleArrayType("false").getBoolean());
        assertFalse(simpleObjectType("false").getBoolean("name"));
        assertTrue(simpleArrayType("null").getIfNULL());
        assertTrue(simpleObjectType("null").getIfNULL("name"));
        or = simpleObjectType("3");
        assertFalse(or.getIfNULL("name"));
        assertTrue(or.getInt("name") == 3);
        ar = simpleArrayType("3");
        assertFalse(ar.getIfNULL());
        assertTrue(ar.getInt() == 3);
        assertTrue((ar = simpleArrayType("null")).getIfNULL());
        expected_error = PARSER_ERR.ARRAY_LIMIT;
        try {
            assertTrue(ar.getInt() == 3);
            fail("Didn't bomb");
        } catch (IOException e) {
            checkException(e);
        }
        expected_error = PARSER_ERR.MISS_ARG;
        try {
            assertTrue(simpleArrayType(",0").getInt() == 0);
            fail("Didn't bomb");
        } catch (IOException e) {
            checkException(e);
        }
        try {
            assertTrue(simpleArrayType("0,").getInt() == 0);
            fail("Didn't bomb");
        } catch (IOException e) {
            checkException(e);
        }
        try {
            assertTrue(simpleObjectType("").getInt("name") == 0);
            fail("Didn't bomb");
        } catch (IOException e) {
            checkException(e);
        }
        expected_error = PARSER_ERR.ARRAY_LIMIT;
        try {
            assertTrue(simpleArrayType("").getInt() == 0);
            fail("Didn't bomb");
        } catch (IOException e) {
            checkException(e);
        }
        assertTrue((ar = simpleArrayType("4")).getInt() == 4);
        try {
            assertTrue(ar.getInt() == 0);
            fail("Didn't bomb");
        } catch (IOException e) {
            checkException(e);
        }
        expected_error = PARSER_ERR.SYNTAX;
        badArgument("-");
        badArgument(".");
        badArgument("e-3");
        badArgument("flase");
        badArgument("+1");
        expected_error = PARSER_ERR.COMMA;
        badArgument("1.0 e4");
        expected_error = PARSER_ERR.EXPECTED;
        JSONParser.setStrictNumericMode(true);
        floatingPoint("10000", 1.0e4);
        floatingPoint("9.999e-100", 0.9999e-99);
        floatingPoint("10000", 10000);
        floatingPoint("1e-20", 1.0e-20);
        badArgument("-0.0");
        expected_error = PARSER_ERR.SYNTAX;
        badArgument(".1");
        badArgument("1.");
        integerValue("+1", true);
        integerValue("-0", true);
        integerValue("01", true);
        integerValue("1.0", true);
        integerValue("-1", false);
        integerValue("-9", false);
        integerValue("0", false);
        integerValue("10", false);
        JSONParser.setStrictNumericMode(false);
        try {
            int53Variables(JSONObjectWriter.MAX_INTEGER + 1);
            fail("long");
        } catch (Exception e) {
            checkException(e, "Int53 values must not exceeed abs(" +
                    JSONObjectWriter.MAX_INTEGER +
                    "), found: " + (JSONObjectWriter.MAX_INTEGER + 1));
        }
        int53Variables(0xa885abafaba0l);
        int53Variables(JSONObjectWriter.MAX_INTEGER);
        moneyValues(new BigDecimal("3232323243243234234243234234243243243243243234243"));
        moneyValues(new BigDecimal("323232324324.3234234243234234243243243243243234243"));
        bigDecimalValues(new BigDecimal("1.0e+999"));
        bigDecimalValues(new BigDecimal("1.0"));
        bigDecimalValues(new BigDecimal("3232323243243234234243234234243243243243243234243"));
        bigIntegerValues(new BigInteger("3232323243243234234243234234243243243243243234243"));
        dateTimeTest();
        booleanValues(true);
        booleanValues(false);
        blobValues();
        simpleArrays();
        es6NumberTest();
        integerRange(Integer.MAX_VALUE, false);
        integerRange(Integer.MIN_VALUE, false);
        integerRange(Integer.MAX_VALUE + 1l, true);
        integerRange(Integer.MIN_VALUE - 1l, true);
        longRange(BigInteger.valueOf(Long.MAX_VALUE), false);
        longRange(BigInteger.valueOf(Long.MIN_VALUE), false);
        longRange(BigInteger.valueOf(Long.MAX_VALUE).add(BigInteger.ONE), true);
        longRange(BigInteger.valueOf(Long.MIN_VALUE).subtract(BigInteger.ONE), true);
        badInteger(13.1);
        badInteger(1300000.1);
        assertTrue(JSONParser.parse(new JSONObjectWriter()
                .setMoney("big", new BigDecimal("5.00"))
                .toString()).getMoney("big").compareTo(BigDecimal.valueOf(5)) == 0);
        assertTrue(JSONParser.parse(new JSONObjectWriter()
                .setMoney("big", new BigDecimal("5.00"))
                .toString()).getMoney("big", 2).compareTo(BigDecimal.valueOf(5)) == 0);
        try {
            JSONParser.parse(new JSONObjectWriter()
                    .setMoney("big", new BigDecimal("5"))
                    .toString()).getMoney("big", 2);
            fail("bd");
        } catch (Exception e) {
            checkException(e, "Incorrect number of decimals in \"Money\": 0");
        }
    }

    void badInteger(Double value) {
        try {
            JSONParser.parse(new JSONObjectWriter().setDouble("v", value).toString()).getInt("v");
            fail("integer");
        } catch (Exception e) {
            checkException(e, "For input string: \"" + value + "\"");
        }
    }

    void integerRange(long value, boolean mustFail) throws Exception {
        try {
            JSONParser.parse(new JSONObjectWriter().setInt53("v", value).toString()).getInt("v");
            assertFalse("range", mustFail);
        } catch (Exception e) {
            checkException(e, "Int32 value out of range: " + value);
        }
        try {
            JSONParser.parse("[" + value + "]").getJSONArrayReader().getInt();
            assertFalse("range", mustFail);
        } catch (Exception e) {
            checkException(e, "Int32 value out of range: " + value);
        }
    }

    private void simpleArrays() throws Exception {
        JSONObjectWriter ow = new JSONObjectWriter();
        ow.setArray("arr").setString("f").setBoolean(false);
        JSONObjectReader or = JSONParser.parse(ow.serializeToBytes(JSONOutputFormats.NORMALIZED));
        try {
            or.getStringArray("arr");
            fail("Didn't bomb");
        } catch (IOException e) {
            checkException(e, "Incompatible types, expected: STRING actual: BOOLEAN");
        }
        ow = new JSONObjectWriter();
        ow.setArray("arr").setString("f").setString("hgh");
        or = JSONParser.parse(ow.serializeToBytes(JSONOutputFormats.NORMALIZED));
        assertTrue(or.getStringArray("arr").length == 2);
    }

    private void blobValues() throws IOException {
        for (int times = 0; times < 1000; times++) {
            for (int i = 0; i < 10; i++) {
                byte[] iarr = new byte[i];
                for (int j = 0; j < i; j++) {
                    iarr[j] = (byte) Math.floor(Math.random() * 256);
                }
                byte[] arr = JSONParser.parse(new JSONObjectWriter().setBinary("blob", iarr).serializeToBytes(JSONOutputFormats.PRETTY_PRINT)).getBinary("blob");
                assertTrue("Length", arr.length == iarr.length);
                for (int q = 0; q < arr.length; q++) {
                    assertTrue("Content", arr[q] == iarr[q]);
                }
                JSONObjectWriter ow = new JSONObjectWriter();
                ow.setArray("arr").setBinary(iarr);
                arr = JSONParser.parse(ow.serializeToBytes(JSONOutputFormats.PRETTY_PRINT)).getArray("arr").getBinary();
                assertTrue("Length", arr.length == iarr.length);
                for (int q = 0; q < arr.length; q++) {
                    assertTrue("Content", arr[q] == iarr[q]);
                }
            }
        }
        boolean should_fail = true;
        try {
            JSONParser.parse(new JSONObjectWriter().setString("blob", "a").serializeToBytes(JSONOutputFormats.PRETTY_PRINT)).getBinary("blob");
            should_fail = false;
        } catch (IOException e) {
        }
        assertTrue("a", should_fail);
        should_fail = true;
        try {
            JSONParser.parse(new JSONObjectWriter().setString("blob", "+xdFdYg").serializeToBytes(JSONOutputFormats.PRETTY_PRINT)).getBinary("blob");
            should_fail = false;
        } catch (IOException e) {
        }
        assertTrue("+xdFdYg", should_fail);
        should_fail = true;
        try {
            JSONParser.parse(new JSONObjectWriter().setString("blob", "/xdFdYg").serializeToBytes(JSONOutputFormats.PRETTY_PRINT)).getBinary("blob");
            should_fail = false;
        } catch (IOException e) {
        }
        assertTrue("/xdFdYg", should_fail);
        // We are pretty strict, yes...
        for (int i = 0; i < 64; i++) {
            try {
                String string = "A" + org.webpki.util.Base64URL.BASE64URL[i];
                should_fail = i % 16 > 0;
                JSONParser.parse(new JSONObjectWriter().setString("blob", string).serializeToBytes(JSONOutputFormats.PRETTY_PRINT)).getBinary("blob");
            } catch (IOException e) {
                should_fail = !should_fail;
            }
            assertFalse("A", should_fail);
            try {
                String string = "AA" + org.webpki.util.Base64URL.BASE64URL[i];
                should_fail = i % 4 > 0;
                JSONParser.parse(new JSONObjectWriter().setString("blob", string).serializeToBytes(JSONOutputFormats.PRETTY_PRINT)).getBinary("blob");
            } catch (IOException e) {
                should_fail = !should_fail;
            }
            assertFalse("AA", should_fail);
        }
    }

    @Test
    public void OuterArrays() throws Exception {
        JSONArrayWriter aw = new JSONArrayWriter();
        aw.setString("hi,there");
        aw.setObject().setBoolean("Boolish", true).setInt("intish", -567);
        JSONObjectReader or = JSONParser.parse(aw.serializeToBytes(JSONOutputFormats.PRETTY_PRINT));
        JSONArrayReader ar = or.getJSONArrayReader();
        assertTrue(ar.getString().equals("hi,there"));
        or = ar.getObject();
        assertFalse(ar.hasMore());
        assertTrue(or.getBoolean("Boolish"));
        assertTrue(or.getInt("intish") == -567);

        try {
            aw = new JSONArrayWriter();
            aw.setString("hi,there");
            or = JSONParser.parse(aw.serializeToBytes(JSONOutputFormats.PRETTY_PRINT));
            new JSONObjectWriter(or);
            fail("Should have failed");
        } catch (Exception e) {
            checkException(e, "You cannot update array objects");
        }
        try {
            aw = new JSONArrayWriter();
            aw.setString("hi,there");
            aw.setObject().setBoolean("boller", false);
            String json = new String(aw.serializeToBytes(JSONOutputFormats.NORMALIZED), "UTF-8");
            assertTrue("Compare" + json, json.equals("[\"hi,there\",{\"boller\":false}]"));
            or = JSONParser.parse(json);
            assertTrue("Compare", or.getJSONArrayReader().getString().equals("hi,there"));
            or.checkForUnread();
            fail("Should have failed");
        } catch (Exception e) {
            checkException(e, "Property \"boller\" was never read");
        }
        try {
            aw = new JSONArrayWriter();
            JSONArrayWriter aw1 = aw.setArray();
            aw1.setString("hi,there");
            aw1.setObject().setBoolean("boller1", false);
            String json = new String(aw.serializeToBytes(JSONOutputFormats.NORMALIZED), "UTF-8");
            assertTrue("Compare" + json, json.equals("[[\"hi,there\",{\"boller1\":false}]]"));
            or = JSONParser.parse(json);
            assertTrue("Compare", or.getJSONArrayReader().getArray().getString().equals("hi,there"));
            or.checkForUnread();
            fail("Should have failed");
        } catch (Exception e) {
            checkException(e, "Property \"boller1\" was never read");
        }
        try {
            aw = new JSONArrayWriter();
            JSONArrayWriter aw1 = aw.setArray();
            aw1.setObject().setBoolean("boller2", false);
            aw1.setString("hi,there");
            String json = new String(aw.serializeToBytes(JSONOutputFormats.NORMALIZED), "UTF-8");
            assertTrue("Compare" + json, json.equals("[[{\"boller2\":false},\"hi,there\"]]"));
            or = JSONParser.parse(json);
            or.getJSONArrayReader().getArray().getObject().getBoolean("boller2");
            or.checkForUnread();
            fail("Should have failed");
        } catch (Exception e) {
            checkException(e, "Value \"hi,there\" of array \"Outer\" was never read");
        }
    }

    @Test
    public void UnreadProperties() throws Exception {
        JSONObjectWriter ow = new JSONObjectWriter();
        ow.setInt("intv", 3);
        ow.setInt("intb", 3);
        JSONObjectReader or = JSONParser.parse(ow.serializeToBytes(JSONOutputFormats.PRETTY_PRINT));
        try {
            or.getInt("intb");
            or.checkForUnread();
            fail("Should have failed");
        } catch (Exception e) {
            checkException(e, "Property \"intv\" was never read");
        }
        ow = new JSONObjectWriter();
        ow.setInt("intv", 3);
        JSONParser.parse(ow.serializeToBytes(JSONOutputFormats.PRETTY_PRINT)).scanAway("intv").checkForUnread();
        ow = new JSONObjectWriter();
        ow.setInt("intb", 3);
        ow.setInt("intv", 3);
        or = JSONParser.parse(ow.serializeToBytes(JSONOutputFormats.PRETTY_PRINT));
        try {
            or.scanAway("intb");
            or.checkForUnread();
            fail("Should have failed");
        } catch (Exception e) {
            checkException(e, "Property \"intv\" was never read");
        }
        ow = new JSONObjectWriter();
        ow.setObject("o").setString("yes", "welll...");
        ow.setInt("intv", 3);
        or = JSONParser.parse(ow.serializeToBytes(JSONOutputFormats.PRETTY_PRINT));
        or.getInt("intv");
        or.scanAway("o");
        or.checkForUnread();
    }

    static final String p521_jcs =
            "{" +
                    "  \"publicKey\": " +
                    "     {" +
                    "      \"kty\": \"EC\"," +
                    "      \"crv\": \"https://webpki.github.io/sks/algorithm#ec.nist.p521\"," +
                    "      \"x\": \"AQggHPZ-De2Tq_7U7v8ADpjyouKk6eV97Lujt9NdIcZgWI_cyOLv9HZulGWtC7I3X73ABE-rx95hAKbxiqQ1q0bA\"," +
                    "      \"y\": \"AP5yYckNtHGuzZ9Gb8oqueBXwgG5Riu5LnbhQUz5Mb_Xjo4mnhqe1f396ldZMUvyJdi2O03OZdhkpVv_ks2CsYHp\"" +
                    "    }" +
                    "}";

    static final String p521_jcs_jose =
            "{" +
                    "  \"publicKey\": " +
                    "     {" +
                    "      \"kty\": \"EC\"," +
                    "      \"crv\": \"P-521\"," +
                    "      \"x\": \"AQggHPZ-De2Tq_7U7v8ADpjyouKk6eV97Lujt9NdIcZgWI_cyOLv9HZulGWtC7I3X73ABE-rx95hAKbxiqQ1q0bA\"," +
                    "      \"y\": \"AP5yYckNtHGuzZ9Gb8oqueBXwgG5Riu5LnbhQUz5Mb_Xjo4mnhqe1f396ldZMUvyJdi2O03OZdhkpVv_ks2CsYHp\"" +
                    "    }" +
                    "}";

    static final String p521_spki =
            "MIGbMBAGByqGSM49AgEGBSuBBAAjA4GGAAQBCCAc9n4N7ZOr_tTu_wAOmPKi4qTp5X3su6O3010hxmBYj9zI4u" +
                    "_0dm6UZa0LsjdfvcAET6vH3mEApvGKpDWrRsAA_nJhyQ20ca7Nn0Zvyiq54FfCAblGK7kuduFBTPkxv9eOjiae" +
                    "Gp7V_f3qV1kxS_Il2LY7Tc5l2GSlW_-SzYKxgek";

    static final String rsa_jcs =
            "{" +
                    "  \"publicKey\":" +
                    "    {" +
                    "      \"kty\": \"RSA\"," +
                    "      \"n\": \"tMzneIjQz_C5fptrerKudR4H4LuoAek0HbH4xnKDMvbUbzYYlrfuORkVcvKKPYl5odONGr61d0G3YW3Pvf" +
                    "snMwabXH4flk5Akf21Xd1GnAy-FCZoyiORHLfSLcjs2MDPbEWbol3U70PJl3OpyG81yE4lrRXd816JqRLMBFoJXMDIPYtwqa0cEfcLVIHhI" +
                    "-ktsId5WpIW-AAwYftQITGn1CarwjtVZ3_g8mlfW_G4xC43D_5LVNPQM3R7TnAP3IQ1wyntT29dpvc8_aaxOlmhwg1xhFc3smDv1R4mOo-M" +
                    "Eel_TjKDaci5xsRC0VuzOp5HKyjHKHOBCF3BFcGHV_zo9Q\"," +
                    "      \"e\": \"AQAB\"" +
                    "    }" +
                    "}";

    static final String rsa_spki =
            "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAtMzneIjQz_C5fptrerKudR4H4LuoAek0HbH4xnKDMvbUbzYYlrfuORkVcvKKPYl5" +
                    "odONGr61d0G3YW3PvfsnMwabXH4flk5Akf21Xd1GnAy-FCZoyiORHLfSLcjs2MDPbEWbol3U70PJl3OpyG81yE4lrRXd816JqRLMBFoJXMDI" +
                    "PYtwqa0cEfcLVIHhI-ktsId5WpIW-AAwYftQITGn1CarwjtVZ3_g8mlfW_G4xC43D_5LVNPQM3R7TnAP3IQ1wyntT29dpvc8_aaxOlmhwg1x" +
                    "hFc3smDv1R4mOo-MEel_TjKDaci5xsRC0VuzOp5HKyjHKHOBCF3BFcGHV_zo9QIDAQAB";

    static final String p256_jcs =
            "{" +
                    "  \"publicKey\":" +
                    "    {" +
                    "      \"kty\": \"EC\"," +
                    "      \"crv\": \"https://webpki.github.io/sks/algorithm#ec.nist.p256\"," +
                    "      \"x\": \"GRgbhKB9Mw1lDKJFMbD_HsBvHR9235X7zF2SxHkDiOU\"," +
                    "      \"y\": \"isxpqxSx6AAEmZfgL5HevS67ejfm_4HcsB883TUaccs\"" +
                    "    }" +
                    "}";

    static final String p256_jcs_bad =
            "{" +
                    "  \"publicKey\":" +
                    "    {" +
                    "      \"kty\": \"EC\"," +
                    "      \"crv\": \"https://webpki.github.io/sks/algorithm#ec.nist.p256\"," +
                    "      \"x\": \"GRgbhKB9Mw1lDKJFMbD_HsBvHR9235X7zF2SxHkDiOU\"," +
                    "      \"y\": \"isxpqxSx6AAEmZfgL5HevS67ejfm_4HcsB883TUaccs\"," +
                    "      \"alien\": \"data\"" +
                    "    }" +
                    "}";

    static final String p256_spki = "MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEGRgbhKB9Mw1lDKJFMbD_HsBvHR9235X7zF2Sx" +
            "HkDiOWKzGmrFLHoAASZl-Avkd69Lrt6N-b_gdywHzzdNRpxyw";

    PublicKey getPublicKeyFromSPKI(byte[] spki) throws Exception {
        try {
            return KeyFactory.getInstance("RSA").generatePublic(new X509EncodedKeySpec(spki));
        } catch (GeneralSecurityException e) {
            return KeyFactory.getInstance("EC").generatePublic(new X509EncodedKeySpec(spki));
        }
    }

    void serializeKey(String spki, String jcs) throws Exception {
        byte[] spki_bin = Base64URL.decode(spki);
        JSONObjectReader or = JSONParser.parse(jcs);
        PublicKey publicKey = or.getPublicKey(AlgorithmPreferences.JOSE_ACCEPT_PREFER);
        PublicKey public_key2 = or.getObject(JSONCryptoHelper.PUBLIC_KEY_JSON).getCorePublicKey(AlgorithmPreferences.JOSE_ACCEPT_PREFER);
        assertTrue("Public key", ArrayUtil.compare(publicKey.getEncoded(), spki_bin));
        assertTrue("Public key2", ArrayUtil.compare(public_key2.getEncoded(), spki_bin));
        JSONObjectWriter ow = new JSONObjectWriter();
        assertTrue("Public key jcs",
                ArrayUtil.compare(ow.setPublicKey(getPublicKeyFromSPKI(spki_bin), (jcs.indexOf("\"P-") > 0) ?
                                AlgorithmPreferences.JOSE : AlgorithmPreferences.SKS).serializeToBytes(JSONOutputFormats.NORMALIZED),
                        or.serializeToBytes(JSONOutputFormats.NORMALIZED)));
        ow = JSONObjectWriter.createCorePublicKey(publicKey, AlgorithmPreferences.JOSE_ACCEPT_PREFER);
        public_key2 = JSONParser.parse(ow.toString()).getCorePublicKey(AlgorithmPreferences.JOSE_ACCEPT_PREFER);
        assertTrue("Public core key2", ArrayUtil.compare(public_key2.getEncoded(), spki_bin));
        ow.setInt("bug", 3);
        try {
            JSONParser.parse(ow.toString()).getCorePublicKey(AlgorithmPreferences.JOSE_ACCEPT_PREFER);
            fail("Should have failed");
        } catch (Exception e) {
            checkException(e, "Property \"bug\" was never read");
        }
        ow = new JSONObjectWriter();
        public_key2 = JSONParser.parse(ow.setPublicKey(public_key2).setInt("OK", 5).toString()).getPublicKey();
        assertTrue("Public key2+", ArrayUtil.compare(public_key2.getEncoded(), spki_bin));
        JSONObjectReader pub_key_object = or.getObject(JSONCryptoHelper.PUBLIC_KEY_JSON);
        boolean rsaFlag = pub_key_object.getString(JSONCryptoHelper.KTY_JSON).equals(JSONCryptoHelper.RSA_PUBLIC_KEY);
        String key_parm = rsaFlag ? JSONCryptoHelper.N_JSON : JSONCryptoHelper.Y_JSON;
        byte[] parm_bytes = pub_key_object.getBinary(key_parm);
        boolean must_fail = true;
        if (rsaFlag) {
            parm_bytes = ArrayUtil.add(new byte[]{0}, parm_bytes);
        } else if (parm_bytes[0] == 0) {
            byte[] pb_new = new byte[parm_bytes.length - 1];
            for (int i = 0; i < pb_new.length; i++) {
                pb_new[i] = parm_bytes[i + 1];
            }
            parm_bytes = pb_new;
        } else {
            must_fail = false;
        }
        JSONObjectWriter updated_pub_key_object = new JSONObjectWriter(pub_key_object);
        updated_pub_key_object.setupForRewrite(key_parm);
        updated_pub_key_object.setBinary(key_parm, parm_bytes);
        try {
            JSONParser.parse(or.serializeToBytes(JSONOutputFormats.PRETTY_PRINT))
                    .getPublicKey(AlgorithmPreferences.JOSE_ACCEPT_PREFER);
            assertFalse("Should have failed", must_fail);
        } catch (Exception e) {
            assertTrue("Shouldn't have failed", must_fail);
            checkException(e, rsaFlag ?
                    "RSA key parameter \"" + JSONCryptoHelper.N_JSON + "\" contains leading zeroes"
                    :
                    "Public EC key parameter \"" + JSONCryptoHelper.Y_JSON + "\" is not normalized");
        }
    }

    @Test
    public void KeySerializing() throws Exception {
        serializeKey(p256_spki, p256_jcs);
        serializeKey(p521_spki, p521_jcs);
        serializeKey(p521_spki, p521_jcs_jose);
        serializeKey(rsa_spki, rsa_jcs);
        JSONObjectReader or = JSONParser.parse(p256_jcs_bad);
        try {
            or.getPublicKey(AlgorithmPreferences.SKS);
            fail("shouldn't accept");
        } catch (Exception e) {
            checkException(e, "Property \"alien\" was never read");
        }
    }

    @Test
    public void ObjectInclusion() throws Exception {
        JSONObjectWriter ow = new JSONObjectWriter();
        ow.setString("Yes", "No");
        JSONObjectWriter ow2 = ow.setObject("Yay");
        JSONArrayWriter aw = ow2.setArray("Arr");
        aw.setInt(2);
        aw.setString("Blah");
        byte[] json = ow.serializeToBytes(JSONOutputFormats.NORMALIZED);
        ow = new JSONObjectWriter();
        ow.setString("Yes", "No");
        ow2 = new JSONObjectWriter();
        aw = ow2.setArray("Arr");
        aw.setInt(2);
        aw.setString("Blah");
        assertTrue("Writer added", ArrayUtil.compare(json, ow.setObject("Yay", ow2).serializeToBytes(JSONOutputFormats.NORMALIZED)));
        JSONObjectReader or = JSONParser.parse(json).getObject("Yay");
        ow = new JSONObjectWriter();
        ow.setString("Yes", "No");
        assertTrue("Reader added", ArrayUtil.compare(json, ow.setObject("Yay", or).serializeToBytes(JSONOutputFormats.NORMALIZED)));
    }

    @Test
    public void SingleLineCreation() throws Exception {
        String expected =
                "{\"one\":1," +
                        "\"two\":{" +
                        "\"three\":3," +
                        "\"arr\":[" +
                        "-5," +
                        "[8]," +
                        "true," +
                        "{\"six\":6}," +
                        "7" +
                        "]," +
                        "\"four\":4}," +
                        "\"five\":5}";
        String result = new String(new JSONObjectWriter()
                .setInt("one", 1)
                .setObject("two", new JSONObjectWriter()
                        .setInt("three", 3)
                        .setArray("arr", new JSONArrayWriter()
                                .setInt(-5)
                                .setArray(new JSONArrayWriter().setInt(8))
                                .setBoolean(true)
                                .setObject(new JSONObjectWriter().setInt("six", 6))
                                .setInt(7))
                        .setInt("four", 4))
                .setInt("five", 5)
                .serializeToBytes(JSONOutputFormats.NORMALIZED), "UTF-8");
        assertTrue("Single\n" + expected + "\n" + result, expected.equals(result));
    }
    
    void readSymSignatures(String[] encObjects) throws Exception {
        for (String name : encObjects) {
            String signature = readSignature(name).toString();
            JSONSignatureDecoder dec = JSONParser.parse(signature).getSignature(
                    new JSONCryptoHelper.Options()
                        .setKeyIdOption(JSONCryptoHelper.KEY_ID_OPTIONS.REQUIRED));
            int keyBits = dec.getSignatureValue().length * 8;
            byte[] key = symmetricKeys.getValue(keyBits);
            dec.verify(new JSONHmacVerifier(key));
            dec = JSONParser.parse(new JSONObjectWriter().setString("Mydata", "cool")
            .setSignature(new JSONHmacSigner(key, 
                    (HmacAlgorithms) dec.getAlgorithm())).toString())
            .getSignature(new JSONCryptoHelper.Options());
            dec.verify(new JSONHmacVerifier(key));
            try {
                dec.verify(new JSONHmacVerifier(ArrayUtil.add(key, new byte[]{5})));
                fail("Must not pass");
            } catch (Exception e) {
            }
        }
    }

    JSONSignatureDecoder readSignature(JSONObjectWriter writer, 
                                       JSONCryptoHelper.Options options) throws Exception {
        return JSONParser.parse(writer.toString()).getSignature(options);
    }
    
    JSONSignatureDecoder verifySignature(JSONObjectWriter writer, 
                                         JSONCryptoHelper.Options options, 
                                         PublicKey publicKey) throws Exception {
        JSONSignatureDecoder signature = readSignature(writer, options);
        signature.verify(new JSONAsymKeyVerifier(publicKey));
        return signature;
    }

    public static class ExampleComExtBad extends JSONCryptoHelper.Extension {
        
        static final String URI = "https://example.com/ext";

        @Override
        public String getExtensionUri() {
            return URI;
        }

        @Override
        protected void decode(JSONObjectReader reader) throws IOException {
        }
    }

    public static class ExampleComExtGood extends JSONCryptoHelper.Extension {
        
        static final String URI = "https://example.com/ext";
        
        public String data;

        @Override
        public String getExtensionUri() {
            return URI;
        }

        @Override
        protected void decode(JSONObjectReader reader) throws IOException {
            data = reader.getString(URI);
        }

        @Override
        public String toString() {
            return data;
        }
    }
    
    public static class EncryptionExtForbidden extends JSONCryptoHelper.Extension {
        
        static final String URI = JSONCryptoHelper.ALGORITHM_JSON;
        
        public String data;

        @Override
        public String getExtensionUri() {
            return URI;
        }

        @Override
        protected void decode(JSONObjectReader reader) throws IOException {
            data = reader.getString(URI);
        }
    }


    public static class ExampleComExtGood2 extends JSONCryptoHelper.Extension {
        
        static final String URI = "https://example.com/ext2";
        
        public String data;

        @Override
        public String getExtensionUri() {
            return URI;
        }

        @Override
        protected void decode(JSONObjectReader reader) throws IOException {
            data = reader.getString(URI);
        }
    }
    
    void keyPairSignature(KeyPair keyPair) throws IOException, GeneralSecurityException {
        String json = new JSONObjectWriter().setString("hi", "there")
            .setSignature(new JSONAsymKeySigner(keyPair.getPrivate())).toString();
        JSONParser.parse(json).getSignature(
                new JSONCryptoHelper.Options()
                    .setPublicKeyOption(
                            JSONCryptoHelper.PUBLIC_KEY_OPTIONS.FORBIDDEN))
                                .verify(new JSONAsymKeyVerifier(keyPair.getPublic()));

        AsymSignatureAlgorithms signatureAlgorithm = 
                KeyAlgorithms.getKeyAlgorithm(keyPair.getPublic()).getRecommendedSignatureAlgorithm();
        JSONObjectWriter dataToSign = new JSONObjectWriter()
                .setString("hi", "there")
                .setBoolean("a", true);
        byte[] payload = dataToSign.serializeToBytes(JSONOutputFormats.CANONICALIZED);
        JSONObjectWriter jwsCt = new JWSAsymKeySigner(keyPair.getPrivate(), signatureAlgorithm)
            .sign(dataToSign, "jws");
        JWSDecoder jwsDecoder = new JWSDecoder(new JSONObjectReader(jwsCt), "jws");
        new JWSAsymSignatureValidator(keyPair.getPublic()).validate(jwsDecoder);
        assertTrue("JWS/CT", ArrayUtil.compare(jwsDecoder.getPayload(), payload));
    }
    
    void rfc8032(KeyAlgorithms keyAlgorithm,
                 String secretKeyInHex,
                 String publicKeyInHex,
                 String messageInHex,
                 String signatureInHex) {
        try {
            PrivateKey privateKey = 
                    OkpSupport.raw2PrivateOkpKey(HexaDecimal.decode(secretKeyInHex), 
                                                 keyAlgorithm);
            PublicKey publicKey = 
                    OkpSupport.raw2PublicOkpKey(HexaDecimal.decode(publicKeyInHex), 
                                                keyAlgorithm);
            byte[] message = HexaDecimal.decode(messageInHex);
            byte[] expectedSignature = HexaDecimal.decode(signatureInHex);
            byte[] signature = 
                    new SignatureWrapper(keyAlgorithm.getRecommendedSignatureAlgorithm(),
                                         privateKey)
                        .update(message)
                        .sign();
            assertTrue("Sig val", ArrayUtil.compare(expectedSignature, signature));
            new SignatureWrapper(keyAlgorithm.getRecommendedSignatureAlgorithm(), publicKey)
                .update(message)
                .verify(signature);
        } catch (Exception e) {
            assertFalse("verify", bcLoaded);
        }
    }

    void rfc8037Signature(AsymSignatureAlgorithms signatureAlgorithm,
                          String jwk,
                          String messageString,
                          String expectedJwsString) {
        try {
            byte[] payload = messageString.getBytes("utf-8");
            KeyPair keyPair = JSONParser.parse(jwk).getKeyPair();
            String jwsString = new JWSAsymKeySigner(keyPair.getPrivate(), 
                                                    signatureAlgorithm)
                    .sign(payload, false);
            assertTrue("Sign", jwsString.contentEquals(expectedJwsString));

            new JWSAsymSignatureValidator(keyPair.getPublic())
                    .validate(new JWSDecoder(jwsString));
        } catch (Exception e) {
            assertFalse("8037", bcLoaded);
        }
    }
    
    void jwsSpecial(KeyPair keyPair, 
                    AsymSignatureAlgorithms signatureAlgorithm, 
                    AsymSignatureAlgorithms signatureAlgorithm2, 
                    String optionalError) throws Exception {
        JSONObjectWriter data = new JSONObjectWriter().setString("hi", "there");
        String dataB64U = Base64URL.encode(data.serializeToBytes(JSONOutputFormats.CANONICALIZED));
        JSONObjectWriter header = new JSONObjectWriter().setString("alg", signatureAlgorithm2.getJoseAlgorithmId());
        String headerB64U = Base64URL.encode(header.serializeToBytes(JSONOutputFormats.NORMALIZED));
        byte[] dataToBeSigned = (headerB64U + "." + dataB64U).getBytes("utf-8");
        String jws = headerB64U + "." + dataB64U + "." + Base64URL.encode(
                new SignatureWrapper(signatureAlgorithm, keyPair.getPrivate())
                    .update(dataToBeSigned)
                    .sign());
        try {
            new JWSAsymSignatureValidator(keyPair.getPublic())
                .validate(new JWSDecoder(jws));
            assertTrue("Should fail", optionalError == null);
        } catch (Exception e) {
            checkException(e, optionalError);
        }
    }
    
    void jwsSpecials() throws Exception {
        KeyPair keyPair = readJwk("p256");
        jwsSpecial(keyPair, 
                   AsymSignatureAlgorithms.ECDSA_SHA512,
                   AsymSignatureAlgorithms.ECDSA_SHA512,
                   "EC key and algorithm does not match the JWS spec");
        jwsSpecial(keyPair, 
                   AsymSignatureAlgorithms.ECDSA_SHA256,
                   AsymSignatureAlgorithms.ECDSA_SHA256,
                   null);
        jwsSpecial(keyPair, 
                   AsymSignatureAlgorithms.ECDSA_SHA256,
                   AsymSignatureAlgorithms.RSA_SHA256,
                   "Supplied key (P_256) is incompatible with specified algorithm (RSA_SHA256)");
        try {
            new JWSDecoder(new JSONObjectReader(new JSONObjectWriter().setString("hi","there")), "jws");
            fail("no prop");
        } catch (Exception e) {
            checkException(e, "Property \"jws\" is missing");
        }
        try {
            new JWSDecoder(new JSONObjectReader(new JSONObjectWriter()
                      .setString("hi","there")
                      .setString("jws", 
         "eyJhbGciOiJIUzI1NiJ9.eyJoaSI6InRoZXJlISJ9.hu7zlBdI9MjBx5WxiezZ9qAjubwgMzVpBg5pfbzfTe0")), "jws");
            fail("not detached");
        } catch (Exception e) {
            checkException(e, "JWS detached mode syntax error");
        }
        JWSAsymSignatureValidator validator = new JWSAsymSignatureValidator(keyPair.getPublic());
        byte[] dataToBeSigned = new byte[] {1,2,3};
        String jwsString = 
                new JWSAsymKeySigner(keyPair.getPrivate(), AsymSignatureAlgorithms.ECDSA_SHA256)
                    .sign(dataToBeSigned, false);
        JWSDecoder jwsDecoder = new JWSDecoder(jwsString);
        try {
            jwsDecoder.getPayload();
            fail("don't");
        } catch (Exception e) {
            checkException(e, "Trying to access payload before validation");
        }
        try {
            validator.validate(jwsDecoder, dataToBeSigned);
            fail("don't");
        } catch (Exception e) {
            checkException(e, "Mixing detached and JWS-supplied payload");
        }
        assertTrue("data", ArrayUtil.compare(dataToBeSigned,
                     validator.validate(jwsDecoder).getPayload()));
        assertTrue("header", jwsDecoder.getJWSHeaderAsJson()
                    .serializeToString(JSONOutputFormats.NORMALIZED).equals(
                jwsDecoder.getJWSHeaderAsString()));
        
        JSONObjectWriter unsigned = new JSONObjectWriter()
                .setString("z", "h")
                .setString("a", "g");
        JWSAsymKeySigner signer = new JWSAsymKeySigner(keyPair.getPrivate());
        JSONObjectWriter signed = signer.sign(
                new JSONObjectWriter(new JSONObjectReader(unsigned).clone()), "signature");
        assertTrue("jwsDat", unsigned.toString().equals(
        new JWSAsymSignatureValidator(keyPair.getPublic()).
            validate(new JWSDecoder(new JSONObjectReader(signed), 
                                             "signature")).getPayloadAsJson().toString()));
        jwsString = 
                new JWSAsymKeySigner(keyPair.getPrivate(), AsymSignatureAlgorithms.ECDSA_SHA256)
                    .setKeyId("theKey")
                    .sign(dataToBeSigned, false);
        jwsDecoder = new JWSDecoder(jwsString);
        assertTrue("kid", "theKey".equals(jwsDecoder.getOptionalKeyId()));
        new JWSAsymSignatureValidator(keyPair.getPublic()).
        validate(jwsDecoder);
        jwsString = 
                new JWSAsymKeySigner(keyPair.getPrivate(), AsymSignatureAlgorithms.ECDSA_SHA256)
                    .setPublicKey(keyPair.getPublic())
                    .sign(dataToBeSigned, false);
        jwsDecoder = new JWSDecoder(jwsString);
        new JWSAsymSignatureValidator(jwsDecoder.getOptionalPublicKey()).validate(jwsDecoder);
    }

    @Test
    public void Signatures() throws Exception {
        JSONX509Verifier rootCa = readDerCertificate("rootca.cer");
        JSONX509Verifier unknownCa = readDerCertificate("unknownca.cer");
        PublicKey otherp256 = JSONParser.parse(p256_jcs).getPublicKey(AlgorithmPreferences.JOSE_ACCEPT_PREFER);
        KeyPair p256 = readJwk("p256");
        String keyIdP256 = keyId;
        KeyPair p521 = readJwk("p521");
        KeyPair r2048 = readJwk("r2048");
        keyPairSignature(p256);
        keyPairSignature(readJwk("p384"));
        keyPairSignature(p521);
        keyPairSignature(r2048);
        
        jwsSpecials();

        try {
            keyPairSignature(readJwk("ed25519"));
            keyPairSignature(readJwk("ed448"));
        } catch (Exception e) {
            assertFalse(bcLoaded);
        }
        
        rfc8032(KeyAlgorithms.ED25519,
                "c5aa8df43f9f837bedb7442f31dcb7b1"
                + "66d38535076f094b85ce3a2e0b4458f7",
                "fc51cd8e6218a1a38da47ed00230f058"
                + "0816ed13ba3303ac5deb911548908025",
                "af82",
                "6291d657deec24024827e69c3abe01a3"
                + "0ce548a284743a445e3680d7db5ac3ac"
                + "18ff9b538d16f290ae67f760984dc659"
                + "4a7c15e9716ed28dc027beceea1ec40a");
        
        rfc8032(KeyAlgorithms.ED448,
                "cd23d24f714274e744343237b93290f5"
                + "11f6425f98e64459ff203e8985083ffd"
                + "f60500553abc0e05cd02184bdb89c4cc"
                + "d67e187951267eb328",
                "dcea9e78f35a1bf3499a831b10b86c90"
                + "aac01cd84b67a0109b55a36e9328b1e3"
                + "65fce161d71ce7131a543ea4cb5f7e9f"
                + "1d8b00696447001400",
                "0c3e544074ec63b0265e0c",
                "1f0a8888ce25e8d458a21130879b840a"
                + "9089d999aaba039eaf3e3afa090a09d3"
                + "89dba82c4ff2ae8ac5cdfb7c55e94d5d"
                + "961a29fe0109941e00b8dbdeea6d3b05"
                + "1068df7254c0cdc129cbe62db2dc957d"
                + "bb47b51fd3f213fb8698f064774250a5"
                + "028961c9bf8ffd973fe5d5c206492b14"
                + "0e00");
        
        rfc8037Signature(AsymSignatureAlgorithms.ED25519,
                         "{\"kty\":\"OKP\",\"crv\":\"Ed25519\"," 
                         + "\"d\":\"nWGxne_9WmC6hEr0kuwsxERJxWl7MmkZcDusAxyuf2A\"," 
                         + "\"x\":\"11qYAYKxCrfVS_7TyWQHOg7hcvPapiMlrwIaaPcHURo\"}",
                         "Example of Ed25519 signing",
                         "eyJhbGciOiJFZERTQSJ9.RXhhbXBsZSBvZiBFZDI1NTE5IHNpZ25pbmc.hgyY0il_MGCj"
                         + "P0JzlnLWG1PPOt7-09PGcvMg3AIbQR6dWbhijcNR4ki4iylGjg5BhVsPt9g7sVvpAr_Mu"
                         + "M0KAg");
        

        JSONObjectWriter writer = new JSONObjectWriter()
            .setString("myData", "cool")
            .setSignature(new JSONAsymKeySigner(p256.getPrivate()).setPublicKey(p256.getPublic()));
        verifySignature(writer, new JSONCryptoHelper.Options(), p256.getPublic());
        try {
            verifySignature(writer, new JSONCryptoHelper.Options(), r2048.getPublic());
            fail("Must not pass");
        } catch (Exception e) {
        }
        try {
            verifySignature(writer, new JSONCryptoHelper.Options(), otherp256);
            fail("Must not pass");
        } catch (Exception e) {
        }
        try {
            verifySignature(writer, 
                            new JSONCryptoHelper.Options()
                                .setPublicKeyOption(JSONCryptoHelper.PUBLIC_KEY_OPTIONS.FORBIDDEN), 
                            p256.getPublic());
            fail("Should not work");
        } catch (Exception e) {
            checkException(e, "Unexpected \"" + JSONCryptoHelper.PUBLIC_KEY_JSON + "\"");
        }
        try {
            verifySignature(writer, 
                            new JSONCryptoHelper.Options().setAlgorithmPreferences(AlgorithmPreferences.SKS), 
                            p256.getPublic());
            fail("Should not work");
        } catch (Exception e) {
            checkException(e, "SKS algorithm expected: ES256");
        }
        writer = new JSONObjectWriter().setString("myData", "cool!")
        .setSignature(new JSONAsymKeySigner(p256.getPrivate())
            .setExtensionNames(new String[]{"https://example.com/ext"})
            .setExtensionData(new JSONObjectWriter().setString("https://example.com/ext", "foobar")));
        try {
            verifySignature(writer, new JSONCryptoHelper.Options(), p256.getPublic());
            fail("Should not work");
        } catch (Exception e) {
            checkException(e, "Use of \"" + JSONCryptoHelper.EXTENSIONS_JSON + "\" must be set in options");
        }
        try {
            JSONCryptoHelper.ExtensionHolder holder = new JSONCryptoHelper.ExtensionHolder();
            holder.addExtension(ExampleComExtBad.class, true);
            verifySignature(writer, 
                            new JSONCryptoHelper.Options()
                                .setPermittedExtensions(holder),
                            p256.getPublic());
            fail("Should not work");
        } catch (Exception e) {
            checkException(e, "Property \"https://example.com/ext\" was never read");
        }
        JSONCryptoHelper.ExtensionHolder holder = new JSONCryptoHelper.ExtensionHolder();
        holder.addExtension(ExampleComExtGood.class, true);
        assertTrue("EXT", "foobar".equals(((ExampleComExtGood)
        (verifySignature(writer, 
                        new JSONCryptoHelper.Options()
                            .setPermittedExtensions(holder),
                        p256.getPublic()).getExtension("https://example.com/ext"))).data));
        holder = new JSONCryptoHelper.ExtensionHolder();
        holder.addExtension(ExampleComExtGood.class, true);
        holder.addExtension(ExampleComExtGood2.class, false);
        assertTrue("EXT", "foobar".equals(((ExampleComExtGood)
        (verifySignature(writer, 
                        new JSONCryptoHelper.Options()
                            .setPermittedExtensions(holder),
                        p256.getPublic()).getExtension("https://example.com/ext"))).data));
        holder = new JSONCryptoHelper.ExtensionHolder();
        holder.addExtension(ExampleComExtGood2.class, false);
        holder.addExtension(ExampleComExtGood.class, false);
        assertTrue("EXT", "foobar".equals(((ExampleComExtGood)
            (verifySignature(writer, 
                             new JSONCryptoHelper.Options()
                                 .setPermittedExtensions(holder),
                             p256.getPublic()).getExtension("https://example.com/ext"))).data));
        try {
            holder = new JSONCryptoHelper.ExtensionHolder();
            holder.addExtension(ExampleComExtGood2.class, true);
            holder.addExtension(ExampleComExtGood.class, false);
            assertTrue("EXT", "foobar".equals(((ExampleComExtGood)
                (verifySignature(writer, 
                                 new JSONCryptoHelper.Options()
                                     .setPermittedExtensions(holder),
                                 p256.getPublic()).getExtension("https://example.com/ext"))).data));
            fail("Shouldn't work");
        } catch (Exception e) {
            checkException(e, "Missing \"" + JSONCryptoHelper.EXTENSIONS_JSON + "\" mandatory extension: https://example.com/ext2");
        }
        holder = new JSONCryptoHelper.ExtensionHolder();
        holder.addExtension(ExampleComExtGood.class, true);
        writer = new JSONObjectWriter().setString("myData", "cool!")
                .setSignature(new JSONAsymKeySigner(p256.getPrivate()));
        try {
            readSignature(writer, new JSONCryptoHelper.Options().setPermittedExtensions(holder));
            fail("Not ok");
        } catch (Exception e) {
            checkException(e, "Missing \"" + JSONCryptoHelper.EXTENSIONS_JSON + "\" mandatory extension: https://example.com/ext");
        }
        holder = new JSONCryptoHelper.ExtensionHolder();
        holder.addExtension(ExampleComExtGood.class, false);
        readSignature(writer, new JSONCryptoHelper.Options().setPermittedExtensions(holder));
        try {
            writer = new JSONObjectWriter().setString("myData", "cool!")
                    .setSignature(new JSONAsymKeySigner(p256.getPrivate())
                    .setAlgorithm(AsymSignatureAlgorithms.RSA_SHA256));
                fail("Must not");
        } catch (Exception e) {
        }
        JSONObjectReader signature = readSignature("p256#es256@kid.json");
        try {
            signature.getSignature(new JSONCryptoHelper.Options()
                    .setKeyIdOption(JSONCryptoHelper.KEY_ID_OPTIONS.FORBIDDEN));
            fail("Must not pass");
        } catch (Exception e) {
            checkException(e, "Unexpected \"" + JSONCryptoHelper.KEY_ID_JSON + "\"");
        }
        JSONSignatureDecoder decoder =
            signature.getSignature(new JSONCryptoHelper.Options()
                .setPublicKeyOption(JSONCryptoHelper.PUBLIC_KEY_OPTIONS.FORBIDDEN)
                .setKeyIdOption(JSONCryptoHelper.KEY_ID_OPTIONS.OPTIONAL));
        assertTrue(keyIdP256.equals(decoder.getKeyId()));
        decoder.verify(new JSONAsymKeyVerifier(p256.getPublic()));
        decoder =
            signature.getSignature(new JSONCryptoHelper.Options()
                .setPublicKeyOption(JSONCryptoHelper.PUBLIC_KEY_OPTIONS.FORBIDDEN)
                .setKeyIdOption(JSONCryptoHelper.KEY_ID_OPTIONS.REQUIRED));
        assertTrue(keyIdP256.equals(decoder.getKeyId()));
        decoder.verify(new JSONAsymKeyVerifier(p256.getPublic()));
        try {
            decoder.verify(new JSONAsymKeyVerifier(otherp256));
            fail("Must not pass");
        } catch (Exception e) {
        }
        // Implicit key, this file contains NO keyId or publicKey
        signature = readSignature("p521#es512@imp.json");
        decoder =
            signature.getSignature(new JSONCryptoHelper.Options()
                .setPublicKeyOption(JSONCryptoHelper.PUBLIC_KEY_OPTIONS.FORBIDDEN)
                .setKeyIdOption(JSONCryptoHelper.KEY_ID_OPTIONS.FORBIDDEN));
        assertTrue(decoder.getKeyId() == null);
        decoder.verify(new JSONAsymKeyVerifier(p521.getPublic()));
        decoder = signature.getSignature(new JSONCryptoHelper.Options());
        decoder.verify(new JSONAsymKeyVerifier(p521.getPublic()));
        try {
            decoder.verify(new JSONAsymKeyVerifier(p256.getPublic()));
            fail("Must not pass");
        } catch (Exception e) {
        }
        try {
            decoder =
                signature.getSignature(new JSONCryptoHelper.Options()
                    .setPublicKeyOption(JSONCryptoHelper.PUBLIC_KEY_OPTIONS.FORBIDDEN)
                    .setKeyIdOption(JSONCryptoHelper.KEY_ID_OPTIONS.REQUIRED));
        } catch (Exception e) {
            checkException(e, "Missing \"" + JSONCryptoHelper.KEY_ID_JSON + "\"");
        }
        ArrayList<JSONSignatureDecoder> signatures;
        writer = new JSONObjectWriter()
            .setSignature(new JSONAsymKeySigner(p256.getPrivate())
               .setAlgorithm(AsymSignatureAlgorithms.ECDSA_SHA512));
        assertTrue(verifySignature(writer, 
                                   new JSONCryptoHelper.Options(),
                                   p256.getPublic()).getAlgorithm() == AsymSignatureAlgorithms.ECDSA_SHA512);
        signature = readSignature("p256#es256,r2048#rs256@mult-jwk.json");
        try {
            signature.getSignature(new JSONCryptoHelper.Options());
            fail("Must not pass");
        } catch (Exception e) {
            checkException(e, "Use \"getMultiSignature()\" for this object");
        }
        signatures = signature.getMultiSignature(new JSONCryptoHelper.Options());
        assertTrue(signatures.size() == 2);
        signatures.get(0).verify(new JSONAsymKeyVerifier(p256.getPublic()));
        signatures.get(1).verify(new JSONAsymKeyVerifier(r2048.getPublic()));
        writer = new JSONObjectWriter().setInt("value", 3)
            .setMultiSignature(new JSONAsymKeySigner(p256.getPrivate()))
            .setMultiSignature(new JSONAsymKeySigner(p521.getPrivate()));
        signatures = new JSONObjectReader(writer).getMultiSignature(new JSONCryptoHelper.Options());
        assertTrue(signatures.size() == 2);
        signatures.get(0).verify(new JSONAsymKeyVerifier(p256.getPublic()));
        signatures.get(1).verify(new JSONAsymKeyVerifier(p521.getPublic()));
        writer = new JSONObjectWriter().setInt("value", 3)
            .setMultiSignature(new JSONAsymKeySigner(p256.getPrivate()))
            .setMultiSignature(new JSONAsymKeySigner(p521.getPrivate())
                .setKeyId("mykey"));
        try {
            new JSONObjectReader(writer).clone().getMultiSignature(new JSONCryptoHelper.Options()
                .setPublicKeyOption(JSONCryptoHelper.PUBLIC_KEY_OPTIONS.FORBIDDEN)
                .setKeyIdOption(JSONCryptoHelper.KEY_ID_OPTIONS.REQUIRED));
            fail("Must not pass");
        } catch (Exception e) {
            checkException(e, "Missing \"" + JSONCryptoHelper.KEY_ID_JSON + "\"");
        }
        signatures = new JSONObjectReader(writer).getMultiSignature(new JSONCryptoHelper.Options()
            .setPublicKeyOption(JSONCryptoHelper.PUBLIC_KEY_OPTIONS.FORBIDDEN)
            .setKeyIdOption(JSONCryptoHelper.KEY_ID_OPTIONS.OPTIONAL));
        assertTrue(signatures.size() == 2);
        signatures.get(0).verify(new JSONAsymKeyVerifier(p256.getPublic()));
        signatures.get(1).verify(new JSONAsymKeyVerifier(p521.getPublic()));

        // Check exclude error handling
        signature = readSignature("p256#es256,p384#es384@mult-excl-jwk.json");
        try {
            signature.clone().getMultiSignature(new JSONCryptoHelper.Options());
            fail("Must not pass");
        } catch (Exception e) {
            checkException(e, "Use of \"excludes\" must be set in options");
        }
        try {
            signature.clone().getMultiSignature(new JSONCryptoHelper.Options()
                .setPermittedExclusions(new String[]{"hithere!","myUnsignedData"}));
            fail("Must not pass");
        } catch (Exception e) {
            checkException(e, "Missing \"excludes\" property: hithere!");
        }
        try {
            signature.clone().getMultiSignature(new JSONCryptoHelper.Options()
                .setPermittedExclusions(new String[]{"hithere!"}));
            fail("Must not pass");
        } catch (Exception e) {
            checkException(e, "Unexpected \"excludes\" property: myUnsignedData");
        }
        try {
            signature.clone().removeProperty("myUnsignedData")
                .getMultiSignature(new JSONCryptoHelper.Options()
                    .setPermittedExclusions(new String[]{"myUnsignedData"}));
            fail("Must not pass");
        } catch (Exception e) {
            checkException(e, "Excluded property \"myUnsignedData\" not found");
        }

        // Check than excluded processing does modify data
        writer = new JSONObjectWriter(signature);
        signature.getMultiSignature(new JSONCryptoHelper.Options()
            .setPermittedExclusions(new String[]{"myUnsignedData"}));
        assertTrue("Ext", writer.toString().equals(signature.toString()));

        writer = new JSONObjectWriter()
            .setString("myData", "cool")
            .setChainedSignature(new JSONAsymKeySigner(p256.getPrivate()))
            .setChainedSignature(new JSONAsymKeySigner(r2048.getPrivate()))
            .setChainedSignature(new JSONAsymKeySigner(p521.getPrivate()));
        signatures = new JSONObjectReader(writer).getSignatureChain(new JSONCryptoHelper.Options());
        signatures.get(0).verify(new JSONAsymKeyVerifier(p256.getPublic()));
        signatures.get(1).verify(new JSONAsymKeyVerifier(r2048.getPublic()));
        signatures.get(2).verify(new JSONAsymKeyVerifier(p521.getPublic()));

        signature = readSignature("p256#es256,r2048#rs256@chai-jwk.json");
        try {
            signature.getSignature(new JSONCryptoHelper.Options());
            fail("Must not pass");
        } catch (Exception e) {
            checkException(e, "Use \"getSignatureChain()\" for this object");
        }
        signatures = signature.getSignatureChain(new JSONCryptoHelper.Options());
        assertTrue(signatures.size() == 2);
        signatures.get(0).verify(new JSONAsymKeyVerifier(p256.getPublic()));
        signatures.get(1).verify(new JSONAsymKeyVerifier(r2048.getPublic()));
        
        readSymSignatures(new String[]{"a256#hs256@kid.json",
                                       "a384#hs384@kid.json",
                                       "a512#hs512@kid.json"});

        signature = readSignature("r2048#rs256@cer.json");
        JSONParser.parse(signature.toString())
          .getSignature(new JSONCryptoHelper.Options()
                  .setPublicKeyOption(JSONCryptoHelper.PUBLIC_KEY_OPTIONS.CERTIFICATE_PATH))
            .verify(rootCa);
        try {
            JSONParser.parse(signature.toString()).getSignature(
                    new JSONCryptoHelper.Options()
                        .setPublicKeyOption(JSONCryptoHelper.PUBLIC_KEY_OPTIONS.CERTIFICATE_PATH))
                .verify(unknownCa);
            fail("Must not pass");
        } catch (Exception e) {
            checkException(e, "Unknown CA: CN=Test Root CA");
        }
        writer = new JSONObjectWriter().setString("myData", "cool!")
                .setSignature("attestSignature", new JSONAsymKeySigner(p256.getPrivate()));
        JSONParser.parse(writer.toString()).getSignature("attestSignature", new JSONCryptoHelper.Options());
        JSONArrayWriter arraySignature = new JSONArrayWriter();

        arraySignature.setString("Hi there!")
                      .setInt(2003)
                      .setSignature(new JSONAsymKeySigner(p256.getPrivate()));
        JSONArrayReader arrayReader = JSONParser.parse(arraySignature.toString()).getJSONArrayReader();
        assertTrue("size", arrayReader.size() == 3);
        arrayReader.getSignature(new JSONCryptoHelper.Options());
        arrayReader = JSONParser.parse(arraySignature.toString()).getJSONArrayReader();
        while (arrayReader.hasMore()) {
            if (arrayReader.isLastElement()) {
                arrayReader.getSignature(new JSONCryptoHelper.Options())
                    .verify(new JSONAsymKeyVerifier(p256.getPublic()));;
            }
            arrayReader.scanAway();
        }
        signature = readSignature("r2048#rs256@jwk+kid.json");
        for (JSONCryptoHelper.PUBLIC_KEY_OPTIONS pkOption : JSONCryptoHelper.PUBLIC_KEY_OPTIONS.values()) {
            JSONCryptoHelper.Options options = new JSONCryptoHelper.Options().setPublicKeyOption(pkOption);
            switch (pkOption) {
                case FORBIDDEN:
                case CERTIFICATE_PATH:
                case KEY_ID_XOR_PUBLIC_KEY:
                    try {
                        JSONParser.parse(signature.toString()).getSignature(options);
                    } catch (Exception e) {
                        checkException(e, "Unexpected \"" + JSONCryptoHelper.PUBLIC_KEY_JSON + "\"");
                    }
                    break;
                case PLAIN_ENCRYPTION:
                    try {
                        JSONParser.parse(signature.toString()).getSignature(options);
                    } catch (Exception e) {
                        checkException(e, "\"" + JSONCryptoHelper.PUBLIC_KEY_OPTIONS.PLAIN_ENCRYPTION + 
                                          "\" is not applicable to signatures");
                    }
                    break;
                default:
                    JSONParser.parse(signature.toString()).getSignature(options);
            }
        }
    }

    @Test
    public void Whitespace() throws Exception {
        try {
            JSONParser.parse("{\u0007 \"name\": 6}");
            fail("Ws");
        } catch (Exception e) {
            checkException(e, "Expected '\"' but got '\u0007'");
        }
        JSONParser.parse("{\u0009 \"name\": 6}");
    }

    void cloneObject(String json) throws Exception {
        JSONObjectReader o1 = JSONParser.parse(json);
        JSONObjectReader o2 = o1.clone();
        assertTrue("clone1=" + json, ArrayUtil.compare(o1.serializeToBytes(JSONOutputFormats.NORMALIZED),
                o2.serializeToBytes(JSONOutputFormats.NORMALIZED)));
        assertTrue("clone2=" + json, ArrayUtil.compare(o1.serializeToBytes(JSONOutputFormats.NORMALIZED),
                json.getBytes("UTF-8")));
    }

    void removeProperty(String original, String property, String result) throws Exception {
        JSONObjectReader o = JSONParser.parse(original);
        (property.equals("outer") ? o : o.getObject("outer")).removeProperty(property);
        assertTrue("remove", ArrayUtil.compare(o.serializeToBytes(JSONOutputFormats.NORMALIZED),
                result.getBytes("UTF-8")));
    }

    @Test
    public void Operations() throws Exception {
        cloneObject("[]");
        cloneObject("{}");
        cloneObject("{\"outer\":6}");
        cloneObject("{\"outer\":6,\"oo\":{}}");
        cloneObject("{\"outer\":6,\"aa\":[]}");
        cloneObject("{\"outer\":6,\"aa\":[{}]}");
        removeProperty("{\"outer\": 5}", "outer", "{}");
        removeProperty("{\"outer\": {\"inner\":6}}", "inner", "{\"outer\":{}}");
        removeProperty("{\"outer\": {\"hi\":\"yes?\",\"inner\":6}}", "inner", "{\"outer\":{\"hi\":\"yes?\"}}");
    }

    
    void aesCbcHmac(byte[] k,
                    byte[] p,
                    byte[] iv,
                    byte[] a,
                    byte[] e,
                    byte[] t,
                    ContentEncryptionAlgorithms enc) throws Exception {
        byte[] pout = EncryptionCore.contentDecryption(enc,
                                                       k,
                                                       e,
                                                       iv,
                                                       a,
                                                       t);
        assertTrue("pout 1", ArrayUtil.compare(p, pout));

        iv = EncryptionCore.createIv(enc);
        EncryptionCore.SymmetricEncryptionResult symmetricEncryptionResult = 
                EncryptionCore.contentEncryption(enc,
                                                 k,
                                                 iv,
                                                 p,
                                                 a);
        pout = EncryptionCore.contentDecryption(enc,
                                                k,
                                                symmetricEncryptionResult.getCipherText(),
                                                iv,
                                                a,
                                                symmetricEncryptionResult.getTag());
        assertTrue("pout 2", ArrayUtil.compare(p, pout));

        byte[] contentEncryptionKey = genRandom(enc.getKeyLength());
        JSONObjectReader json = JSONParser.parse("{\"data\":\"hello!\"}");
        String encrec = JSONObjectWriter.createEncryptionObject(json.serializeToBytes(JSONOutputFormats.NORMALIZED),
                                                                enc,
                                                                new JSONSymKeyEncrypter(contentEncryptionKey)).toString();
        for (JSONCryptoHelper.PUBLIC_KEY_OPTIONS pkOption : JSONCryptoHelper.PUBLIC_KEY_OPTIONS.values()) {
            JSONCryptoHelper.Options option = new JSONCryptoHelper.Options().setPublicKeyOption(pkOption);
            switch (pkOption) {
                case PLAIN_ENCRYPTION:
                    assertTrue("Symmetric",
                               JSONParser.parse(JSONParser.parse(encrec)
                                    .getEncryptionObject(option).getDecryptedData(contentEncryptionKey))
                                        .toString().equals(json.toString()));
                    break;
                default:
                    try {
                        JSONParser.parse(JSONParser.parse(encrec)
                                .getEncryptionObject(option).getDecryptedData(contentEncryptionKey));
                        fail("enc");
                    } catch (Exception ex) {
                        checkException(ex, "Missing key encryption");
                    }
            }
        }
    }

    void aesCbcHmac(String k,
            String p,
            String iv,
            String a,
            String e,
            String t,
            ContentEncryptionAlgorithms enc) throws Exception {
        aesCbcHmac(HexaDecimal.decode(k),
                   HexaDecimal.decode(p),
                   HexaDecimal.decode(iv),
                   HexaDecimal.decode(a),
                   HexaDecimal.decode(e),
                   HexaDecimal.decode(t),
                   enc);
    }
    
    void joseCookBook(String name) throws Exception {
        JSONObjectReader test = readEncryption(name);
        KeyPair staticKey = test.getObject("input")
            .getObject("key")
                .removeProperty("kid")
                    .removeProperty("use").getKeyPair();
        KeyPair ephemeralKey = test.getObject("encrypting_key").getObject("epk").getKeyPair();
         byte[] iv = test.getObject("generated").getBinary("iv");
        ContentEncryptionAlgorithms contentEncryptionAlgorithm = 
                ContentEncryptionAlgorithms.getAlgorithmFromId(test.getObject("input").getString("enc"));
        KeyEncryptionAlgorithms keyEncryptionAlgorithm = 
                KeyEncryptionAlgorithms.getAlgorithmFromId(test.getObject("input").getString("alg"));
        byte[] cek = test.getObject(keyEncryptionAlgorithm.isKeyWrap() ?
                "generated" : "encrypting_key").getBinary("cek");
        byte[] kek = keyEncryptionAlgorithm.isKeyWrap() ?
                test.getObject("encrypting_key").getBinary("encrypted_key") : null;
        byte[] cek2 = EncryptionCore.receiverKeyAgreement(false,
                                                          keyEncryptionAlgorithm, 
                                                          contentEncryptionAlgorithm,
                                                          (ECPublicKey)ephemeralKey.getPublic(),
                                                          staticKey.getPrivate(),
                                                          kek);
        if (!ArrayUtil.compare(cek, cek2)) {
            fail("Fail CEK");
        }
        byte[] plainText = test.getObject("input").getString("plaintext").getBytes("UTF-8");
        byte[] cipherText = test.getObject("output").getObject("json").getBinary("ciphertext");
        byte[] authData = test.getObject("encrypting_content").getString("protected_b64u").getBytes("UTF-8");
        byte[] tag = test.getObject("encrypting_content").getBinary("tag");
        byte[] res = EncryptionCore.contentDecryption(contentEncryptionAlgorithm, 
                                                      cek, cipherText, iv, authData, tag);

        if (!ArrayUtil.compare(res, plainText)) {
            fail("Fail plain text");
        }
    }

    byte[] genRandom(int size) {
        byte[] random = new byte[size];
        new SecureRandom().nextBytes(random);
        return random;
    }

    void randomSymmetricEncryption() throws Exception{
        byte[] authData = genRandom(20);
        for (int i = 0; i < 10; i++) {
            byte[] plainText = jwePlainText.getBytes("UTF-8");
            for (ContentEncryptionAlgorithms enc : ContentEncryptionAlgorithms.values()) {
                byte[] key = genRandom(enc.getKeyLength());
                byte[] iv = EncryptionCore.createIv(enc);
                EncryptionCore.SymmetricEncryptionResult symmetricEncryptionResult = 
                        EncryptionCore.contentEncryption(enc,
                                                         key,
                                                         iv,
                                                         plainText, 
                                                         authData);
                if (!ArrayUtil.compare(
                        plainText,
                        EncryptionCore.contentDecryption(enc,
                                                         key, 
                                                         symmetricEncryptionResult.getCipherText(), 
                                                         iv, 
                                                         authData,
                                                         symmetricEncryptionResult.getTag()))) {
                    fail("compare " + enc);
                }
            }
        }
    }
    
    void rsaOaep(String fileName) throws Exception {
        JSONDecryptionDecoder dec = readEncryption(fileName).getEncryptionObject(new JSONCryptoHelper.Options()
          .setKeyIdOption(JSONCryptoHelper.KEY_ID_OPTIONS.REQUIRED).setPublicKeyOption(JSONCryptoHelper.PUBLIC_KEY_OPTIONS.FORBIDDEN));
        KeyPair keyPair = readJwk("r2048");
        assertTrue(ArrayUtil.compare(ArrayUtil.readFile(baseData + "datatobeencrypted.txt"),
                                     dec.getDecryptedData(keyPair.getPrivate())));
    }
    
    JSONDecryptionDecoder encFailDecrypt(JSONObjectReader enc, JSONCryptoHelper.Options option) throws Exception {
        KeyPair p256 = readJwk("p256");
        JSONDecryptionDecoder dec = enc.getEncryptionObject(option);
        assertTrue(ArrayUtil.compare(ArrayUtil.readFile(baseData + "datatobeencrypted.txt"),
                dec.getDecryptedData(p256.getPrivate())));
        return dec;
    }
    
    void encFailOption(JSONObjectReader enc, JSONCryptoHelper.Options option, String failText) throws Exception {
        try {
            encFailDecrypt(enc, option);
            fail("Should fail");
        } catch (Exception e) {
            checkException(e, failText);
        }
    }
    
    void encryptionOptionTest() throws Exception {
        JSONObjectReader enc = readEncryption("p256#ecdh-es+a256kw@a256gcm@jwk+kid.json");
        for (JSONCryptoHelper.KEY_ID_OPTIONS kOption : JSONCryptoHelper.KEY_ID_OPTIONS.values()) {
            for (JSONCryptoHelper.PUBLIC_KEY_OPTIONS pkOption : JSONCryptoHelper.PUBLIC_KEY_OPTIONS.values()) {
                JSONCryptoHelper.Options option = 
                        new JSONCryptoHelper.Options()
                            .setPublicKeyOption(pkOption)
                            .setKeyIdOption(kOption);
                if (kOption != JSONCryptoHelper.KEY_ID_OPTIONS.OPTIONAL &&
                    (pkOption == PUBLIC_KEY_OPTIONS.KEY_ID_OR_PUBLIC_KEY ||
                     pkOption == PUBLIC_KEY_OPTIONS.KEY_ID_XOR_PUBLIC_KEY)) {
                    encFailOption(enc, option, "Invalid key id and public key option combination");
                } else if (pkOption == JSONCryptoHelper.PUBLIC_KEY_OPTIONS.PLAIN_ENCRYPTION) {
                    encFailOption(enc, option, "Unexpected key encryption");
                } else if (kOption == JSONCryptoHelper.KEY_ID_OPTIONS.FORBIDDEN) {
                    encFailOption(enc, option, "Unexpected \"" + JSONCryptoHelper.KEY_ID_JSON + "\"");
                } else switch (pkOption) {
                    case FORBIDDEN:
                    case KEY_ID_XOR_PUBLIC_KEY:
                    case CERTIFICATE_PATH:
                        encFailOption(enc, option, "Unexpected \"" + JSONCryptoHelper.PUBLIC_KEY_JSON + "\"");
                        break;
                    default:
                        encFailDecrypt(enc, option);
                }
            }
        }
        enc = readEncryption("p256#ecdh-es@a256cbc-hs512@jwk.json");
        for (JSONCryptoHelper.KEY_ID_OPTIONS kOption : JSONCryptoHelper.KEY_ID_OPTIONS.values()) {
            for (JSONCryptoHelper.PUBLIC_KEY_OPTIONS pkOption : JSONCryptoHelper.PUBLIC_KEY_OPTIONS.values()) {
                JSONCryptoHelper.Options option = 
                        new JSONCryptoHelper.Options()
                            .setPublicKeyOption(pkOption)
                            .setKeyIdOption(kOption);
                if (kOption != JSONCryptoHelper.KEY_ID_OPTIONS.OPTIONAL &&
                    (pkOption == PUBLIC_KEY_OPTIONS.KEY_ID_OR_PUBLIC_KEY ||
                     pkOption == PUBLIC_KEY_OPTIONS.KEY_ID_XOR_PUBLIC_KEY)) {
                    encFailOption(enc, option, "Invalid key id and public key option combination");
                } else if (pkOption == JSONCryptoHelper.PUBLIC_KEY_OPTIONS.PLAIN_ENCRYPTION) {
                    encFailOption(enc, option, "Unexpected key encryption");
                } else if (kOption == JSONCryptoHelper.KEY_ID_OPTIONS.REQUIRED) {
                    encFailOption(enc, option, "Missing \"" + JSONCryptoHelper.KEY_ID_JSON + "\"");
                } else switch (pkOption) {
                    case CERTIFICATE_PATH: 
                    case FORBIDDEN: 
                        encFailOption(enc, option, "Unexpected \"" + JSONCryptoHelper.PUBLIC_KEY_JSON + "\"");
                        break;
                    default:
                        encFailDecrypt(enc, option);
                }
            }
        }
        enc = readEncryption("p256#ecdh-es+a256kw@a128cbc-hs256@cer.json");
        for (JSONCryptoHelper.KEY_ID_OPTIONS kOption : JSONCryptoHelper.KEY_ID_OPTIONS.values()) {
            for (JSONCryptoHelper.PUBLIC_KEY_OPTIONS pkOption : JSONCryptoHelper.PUBLIC_KEY_OPTIONS.values()) {
                JSONCryptoHelper.Options option = 
                        new JSONCryptoHelper.Options()
                            .setPublicKeyOption(pkOption)
                            .setKeyIdOption(kOption);
                if (kOption != JSONCryptoHelper.KEY_ID_OPTIONS.OPTIONAL &&
                    (pkOption == PUBLIC_KEY_OPTIONS.KEY_ID_OR_PUBLIC_KEY ||
                     pkOption == PUBLIC_KEY_OPTIONS.KEY_ID_XOR_PUBLIC_KEY)) {
                    encFailOption(enc, option, "Invalid key id and public key option combination");
                } else if (pkOption == JSONCryptoHelper.PUBLIC_KEY_OPTIONS.PLAIN_ENCRYPTION) {
                    encFailOption(enc, option, "Unexpected key encryption");
                } else if (kOption == JSONCryptoHelper.KEY_ID_OPTIONS.REQUIRED) {
                    encFailOption(enc, option, "Missing \"" + JSONCryptoHelper.KEY_ID_JSON + "\"");
                } else switch (pkOption) {
                    case CERTIFICATE_PATH: 
                        encFailDecrypt(enc, option);
                        break;
                     default:
                        encFailOption(enc, option, "Unexpected \"" + JSONCryptoHelper.CERTIFICATE_PATH_JSON + "\"");
                        break;
                }
            }
        }
    }

    void allJefCombinations() throws Exception {
        KeyPairGenerator mallet = KeyPairGenerator.getInstance("RSA");
        mallet.initialize(2048);
        KeyPair malletKeys = mallet.generateKeyPair();
        KeyPair alice = JSONParser.parse(aliceKey).getKeyPair();
        byte[] plainText = jwePlainText.getBytes("UTF-8");
        for (KeyEncryptionAlgorithms kea : KeyEncryptionAlgorithms.values()) {
            for (ContentEncryptionAlgorithms enc : ContentEncryptionAlgorithms.values()) {
                JSONObjectWriter json = 
                    JSONObjectWriter
                        .createEncryptionObject(
                                plainText,
                                enc,
                                new JSONAsymKeyEncrypter((kea.isRsa() ?
                                                           malletKeys : alice).getPublic(),
                                                         kea));
                if (!ArrayUtil.compare(plainText,
                                  JSONParser
                                      .parse(json.toString())
                                          .getEncryptionObject(new JSONCryptoHelper.Options())
                                              .getDecryptedData((kea.isRsa() ?
                                                      malletKeys : alice).getPrivate()))) {
                    throw new IOException("Fail on " + kea + "/" + enc);
                }
            }
        }
    }
    
    void variousEncryptionErrors(String fileName, 
                                 String exceptionString) throws Exception {
        JSONObjectReader enc = readEncryption(fileName);
        JSONCryptoHelper.Options options = new JSONCryptoHelper.Options();
        try {
            if (enc.hasProperty(JSONCryptoHelper.RECIPIENTS_JSON)) {
                enc.getEncryptionObjects(options);
            } else {
                enc.getEncryptionObject(options);
            }
            fail("Should'n work: " + fileName);
        } catch (Exception e) {
            checkException(e, exceptionString);
        }
    }
    
    void encryptionFieldErrors(String fileName, String keyType, String exceptionString) throws Exception {
        try {
            JSONDecryptionDecoder dec = readEncryption(fileName).getEncryptionObject(new JSONCryptoHelper.Options());
            KeyPair keyPair = readJwk(keyType);
            dec.getDecryptedData(keyPair.getPrivate());
            fail("Should'n work: " + fileName);
        } catch (Exception e) {
            checkException(e, exceptionString);
        }
    }

    void rfc7748Encryption() throws Exception {
        PrivateKey ALICE_PRIV = 
             OkpSupport.raw2PrivateOkpKey(HexaDecimal.decode(
                    "9a8f4925d1519f5775cf46b04b5800d4ee9ee8bae8bc5565d498c28d" +
                    "d9c9baf574a9419744897391006382a6f127ab1d9ac2d8c0a598726b"),
                    KeyAlgorithms.X448);
        PublicKey ALICE_PUB = 
             OkpSupport.raw2PublicOkpKey(HexaDecimal.decode(
                    "9b08f7cc31b7e3e67d22d5aea121074a273bd2b83de09c63faa73d2c" +
                    "22c5d9bbc836647241d953d40c5b12da88120d53177f80e532c41fa0"),
                    KeyAlgorithms.X448);
        PrivateKey BOB_PRIV = 
             OkpSupport.raw2PrivateOkpKey(HexaDecimal.decode(
                    "1c306a7ac2a0e2e0990b294470cba339e6453772b075811d8fad0d1d" +
                    "6927c120bb5ee8972b0d3e21374c9c921b09d1b0366f10b65173992d"),
                    KeyAlgorithms.X448);
        PublicKey BOB_PUB = 
             OkpSupport.raw2PublicOkpKey(HexaDecimal.decode(
                    "3eb7a829b0cd20f5bcfc0b599b6feccf6da4627107bdb0d4f345b430" +
                    "27d8b972fc3e34fb4232a13ca706dcb57aec3dae07bdc1c67bf33609"),
                    KeyAlgorithms.X448);

        byte[] K = HexaDecimal.decode(
                    "07fff4181ac6cc95ec1c16a94a0f74d12da232ce40a77552281d282b" +
                    "b60c0b56fd2464c335543936521c24403085d59a449a5037514a879d");
        
        KeyAgreement ka = KeyAgreement.getInstance("XDH");
        ka.init(ALICE_PRIV);
        ka.doPhase(BOB_PUB, true);
        assertTrue("rfc7748", ArrayUtil.compare(K, ka.generateSecret()));

        ka = KeyAgreement.getInstance("XDH");
        ka.init(BOB_PRIV);
        ka.doPhase(ALICE_PUB, true);
        assertTrue("rfc7748", ArrayUtil.compare(K, ka.generateSecret()));

        byte[] data = new byte[] {1,2,3};
        JSONObjectWriter enc = JSONObjectWriter.createEncryptionObject(
                data, 
                ContentEncryptionAlgorithms.A128CBC_HS256,
                new JSONAsymKeyEncrypter(BOB_PUB,
                                         KeyEncryptionAlgorithms.ECDH_ES_A256KW));
        assertTrue("X448", ArrayUtil.compare(data, 
        JSONParser.parse(enc.toString()).getEncryptionObject(
                new JSONCryptoHelper.Options()).getDecryptedData(BOB_PRIV)));
    }

    @Test
    public void Encryption() throws Exception {

        String ECDH_RESULT_WITHOUT_KDF = "SzFxLgluXyC07Pl5D9jMfIt-LIrZC9qByyJPYsDnuaY";
        String ECDH_RESULT_WITH_KDF = "hzHdlfQIAEehb8Hrd_mFRhKsKLEzPfshfXs9l6areCc";

        String aliceKey =
                "{\"kty\":\"EC\"," +
                        "\"crv\":\"P-256\"," +
                        "\"x\":\"Ze2loSV3wrroKUN_4zhwGhCqo3Xhu1td4QjeQ5wIVR0\"," +
                        "\"y\":\"HlLtdXARY_f55A3fnzQbPcm6hgr34Mp8p-nuzQCE0Zw\"," +
                        "\"d\":\"r_kHyZ-a06rmxM3yESK84r1otSg-aQcVStkRhA-iCM8\"" +
                        "}";


        String bobKey =
                "{\"kty\":\"EC\"," +
                        "\"crv\":\"P-256\"," +
                        "\"x\":\"mPUKT_bAWGHIhg0TpjjqVsP1rXWQu_vwVOHHtNkdYoA\"," +
                        "\"y\":\"8BQAsImGeAS46fyWw5MhYfGTT0IjBpFw2SS34Dv4Irs\"," +
                        "\"d\":\"AtH35vJsQ9SGjYfOsjUxYXQKrPH3FjZHmEtSKoSN8cM\"" +
                        "}";
/*
    Authenticated Encryption with AES-CBC and HMAC-SHA
      draft-mcgrew-aead-aes-cbc-hmac-sha2-05.txt
 */
      String k128 = "000102030405060708090a0b0c0d0e0f" +
                    "101112131415161718191a1b1c1d1e1f";
    
      String p128 = "41206369706865722073797374656d20" +
                    "6d757374206e6f742062652072657175" +
                    "6972656420746f206265207365637265" +
                    "742c20616e64206974206d7573742062" +
                    "652061626c6520746f2066616c6c2069" +
                    "6e746f207468652068616e6473206f66" +
                    "2074686520656e656d7920776974686f" +
                    "757420696e636f6e76656e69656e6365";
    
      String iv128 = "1af38c2dc2b96ffdd86694092341bc04";
    
      String a128 = "546865207365636f6e64207072696e63" +
                    "69706c65206f66204175677573746520" +
                    "4b6572636b686f666673";
    
      String e128 = "c80edfa32ddf39d5ef00c0b468834279" +
                    "a2e46a1b8049f792f76bfe54b903a9c9" +
                    "a94ac9b47ad2655c5f10f9aef71427e2" +
                    "fc6f9b3f399a221489f16362c7032336" +
                    "09d45ac69864e3321cf82935ac4096c8" +
                    "6e133314c54019e8ca7980dfa4b9cf1b" +
                    "384c486f3a54c51078158ee5d79de59f" +
                    "bd34d848b3d69550a67646344427ade5" +
                    "4b8851ffb598f7f80074b9473c82e2db";
    
      String t128 = "652c3fa36b0a7c5b3219fab3a30bc1c4";

        aesCbcHmac(k128,
                   p128,
                   iv128,
                   a128,
                   e128,
                   t128,
                   ContentEncryptionAlgorithms.A128CBC_HS256);

      String k256 = "000102030405060708090a0b0c0d0e0f" +
                    "101112131415161718191a1b1c1d1e1f" +
                    "202122232425262728292a2b2c2d2e2f" +
                    "303132333435363738393a3b3c3d3e3f";
    
      String p256 = p128;
    
      String iv256 = iv128;
    
      String a256 = a128;
    
      String e256 = "4affaaadb78c31c5da4b1b590d10ffbd" +
                    "3dd8d5d302423526912da037ecbcc7bd" +
                    "822c301dd67c373bccb584ad3e9279c2" +
                    "e6d12a1374b77f077553df829410446b" +
                    "36ebd97066296ae6427ea75c2e0846a1" +
                    "1a09ccf5370dc80bfecbad28c73f09b3" +
                    "a3b75e662a2594410ae496b2e2e6609e" +
                    "31e6e02cc837f053d21f37ff4f51950b" +
                    "be2638d09dd7a4930930806d0703b1f6";
    
      String t256 = "4dd3b4c088a7f45c216839645b2012bf" +
                    "2e6269a8c56a816dbc1b267761955bc5";

        aesCbcHmac(k256,
                   p256,
                   iv256,
                   a256,
                   e256,
                   t256,
                   ContentEncryptionAlgorithms.A256CBC_HS512);
        
        randomSymmetricEncryption();
        
        allJefCombinations();
        
        joseCookBook("5_4.key_agreement_with_key_wrapping_using_ecdh-es_and_aes-keywrap_with_aes-gcm.json");
        joseCookBook("5_5.key_agreement_using_ecdh-es_with_aes-cbc-hmac-sha2.json");

        KeyPair bob = getKeyPairFromJwk(bobKey);
        KeyPair alice = getKeyPairFromJwk(aliceKey);
        assertTrue("Bad ECDH",
                Base64URL.encode(
                        EncryptionCore.receiverKeyAgreement(false,
                                                            KeyEncryptionAlgorithms.ECDH_ES,
                                                            ContentEncryptionAlgorithms.A128CBC_HS256,
                                                            (ECPublicKey) bob.getPublic(),
                                                            alice.getPrivate(),
                                                            null)).equals(ECDH_RESULT_WITH_KDF));

        EncryptionCore.AsymmetricEncryptionResult asymmetricEncryptionResult =
                EncryptionCore.senderKeyAgreement(false,
                                                  null,
                                                  KeyEncryptionAlgorithms.ECDH_ES,
                                                  ContentEncryptionAlgorithms.A128CBC_HS256,
                                                  alice.getPublic());
        assertTrue("Bad ECDH",
                ArrayUtil.compare(asymmetricEncryptionResult.getContentEncryptionKey(),
                        EncryptionCore.receiverKeyAgreement(false,
                                                            KeyEncryptionAlgorithms.ECDH_ES,
                                                            ContentEncryptionAlgorithms.A128CBC_HS256,
                                                            asymmetricEncryptionResult.getEphemeralKey(),
                                                            alice.getPrivate(),
                                                            null)));
        KeyPairGenerator mallet = KeyPairGenerator.getInstance("RSA");
        mallet.initialize(2048);
        KeyPair malletKeys = mallet.generateKeyPair();
        ArrayList<JSONDecryptionDecoder.DecryptionKeyHolder> decryptionKeys =
                new ArrayList<>();
        decryptionKeys.add(new JSONDecryptionDecoder.DecryptionKeyHolder(
                alice.getPublic(), 
                alice.getPrivate(),
                KeyEncryptionAlgorithms.ECDH_ES,
                "alice"));
        decryptionKeys.add(new JSONDecryptionDecoder.DecryptionKeyHolder(
                bob.getPublic(),
                bob.getPrivate(),
                KeyEncryptionAlgorithms.ECDH_ES,
                "bob"));
        decryptionKeys.add(new JSONDecryptionDecoder.DecryptionKeyHolder(
                malletKeys.getPublic(),
                malletKeys.getPrivate(),
                KeyEncryptionAlgorithms.RSA_OAEP_256,
                "mallet"));

        JSONObjectReader unEncJson = JSONParser.parse("{\"hi\":\"\\u20ac\\u00e5\\u00f6k\"}");
        String encJson = 
            JSONObjectWriter
                .createEncryptionObject(unEncJson
                        .serializeToBytes(JSONOutputFormats.NORMALIZED),
                                          ContentEncryptionAlgorithms.A128CBC_HS256,
                                          new JSONAsymKeyEncrypter(bob.getPublic(),
                                                                   KeyEncryptionAlgorithms.ECDH_ES)).toString();
        assertTrue("Bad JOSE ECDH",
                unEncJson.toString()
                        .equals(JSONParser.parse(JSONParser.parse(encJson).getEncryptionObject(new JSONCryptoHelper.Options())
                                .getDecryptedData(decryptionKeys)).toString()));

        encJson = JSONObjectWriter
                .createEncryptionObject(unEncJson
                        .serializeToBytes(JSONOutputFormats.NORMALIZED),
                                          ContentEncryptionAlgorithms.A128CBC_HS256,
                                          new JSONAsymKeyEncrypter(bob.getPublic(),
                                                                   KeyEncryptionAlgorithms.ECDH_ES).setKeyId("bob")).toString();
        JSONDecryptionDecoder decDec =
                JSONParser.parse(encJson)
                    .getEncryptionObject(new JSONCryptoHelper.Options()
                        .setKeyIdOption(JSONCryptoHelper.KEY_ID_OPTIONS.OPTIONAL));
        assertTrue("kid", decDec.getKeyId().equals("bob"));
        assertTrue("Bad JOSE ECDH",
                unEncJson.toString().equals(JSONParser.parse(decDec.getDecryptedData(decryptionKeys)).toString()));

        JSONCryptoHelper.ExtensionHolder extensionHolder = new JSONCryptoHelper.ExtensionHolder();
        extensionHolder.addExtension(ExampleComExtGood.class, false);
        decDec = JSONParser.parse(encJson)
                     .getEncryptionObject(new JSONCryptoHelper.Options()
                         .setKeyIdOption(JSONCryptoHelper.KEY_ID_OPTIONS.OPTIONAL)
                         .setPermittedExtensions(extensionHolder));

        try {
            extensionHolder = new JSONCryptoHelper.ExtensionHolder();
            extensionHolder.addExtension(ExampleComExtGood.class, true);
            decDec = JSONParser.parse(encJson)
                         .getEncryptionObject(new JSONCryptoHelper.Options()
                             .setKeyIdOption(JSONCryptoHelper.KEY_ID_OPTIONS.OPTIONAL)
                             .setPermittedExtensions(extensionHolder));
            fail("Shouldn't");
        } catch (Exception e) {
            checkException(e, "Missing \"" + JSONCryptoHelper.EXTENSIONS_JSON + "\" mandatory extension: https://example.com/ext");
        }

        try {
            extensionHolder = new JSONCryptoHelper.ExtensionHolder();
            extensionHolder.addExtension(EncryptionExtForbidden.class, false);
            decDec = JSONParser.parse(encJson)
                         .getEncryptionObject(new JSONCryptoHelper.Options()
                             .setKeyIdOption(JSONCryptoHelper.KEY_ID_OPTIONS.OPTIONAL)
                             .setPermittedExtensions(extensionHolder));
            fail("Shouldn't");
        } catch (Exception e) {
            checkException(e, "Forbidden \"" + JSONCryptoHelper.EXTENSIONS_JSON + 
                              "\" property: " + JSONCryptoHelper.ALGORITHM_JSON);
        }

        encJson = JSONObjectWriter
                    .createEncryptionObject(unEncJson
                            .serializeToBytes(JSONOutputFormats.NORMALIZED),
                                              ContentEncryptionAlgorithms.A128CBC_HS256,
                                              new JSONAsymKeyEncrypter(bob.getPublic(),
                                                                       KeyEncryptionAlgorithms.ECDH_ES)
                            .setExtensions(new JSONObjectWriter()
                                 .setString(new ExampleComExtGood().getExtensionUri(), "hi"))).toString();
        extensionHolder = new JSONCryptoHelper.ExtensionHolder();
        extensionHolder.addExtension(ExampleComExtGood.class, false);
        decDec = JSONParser.parse(encJson)
                .getEncryptionObject(new JSONCryptoHelper.Options()
                    .setKeyIdOption(JSONCryptoHelper.KEY_ID_OPTIONS.OPTIONAL)
                    .setPermittedExtensions(extensionHolder));
        assertTrue("ext", decDec.extensions.get(new ExampleComExtGood().getExtensionUri()).toString().equals("hi"));
        assertTrue("Bad JOSE ECDH",
                unEncJson.toString()
                        .equals(JSONParser.parse(decDec.getDecryptedData(decryptionKeys)).toString()));

        encJson = JSONObjectWriter
                .createEncryptionObject(unEncJson
                        .serializeToBytes(JSONOutputFormats.NORMALIZED),
                                          ContentEncryptionAlgorithms.A128CBC_HS256,
                                          new JSONAsymKeyEncrypter(malletKeys.getPublic(),
                                                                   KeyEncryptionAlgorithms.RSA_OAEP_256)).toString();
        assertTrue("Bad JOSE ECDH",
                unEncJson.toString()
                        .equals(JSONParser.parse(JSONParser.parse(encJson).getEncryptionObject(new JSONCryptoHelper.Options())
                                .getDecryptedData(decryptionKeys)).toString()));

        encJson = JSONObjectWriter
                .createEncryptionObject(unEncJson
                        .serializeToBytes(JSONOutputFormats.NORMALIZED),
                                        ContentEncryptionAlgorithms.A128CBC_HS256,
                                        new JSONAsymKeyEncrypter(malletKeys.getPublic(),
                                                                 KeyEncryptionAlgorithms.RSA_OAEP_256).setKeyId("mallet")).toString();
        decDec = JSONParser.parse(encJson)
                .getEncryptionObject(new JSONCryptoHelper.Options().setKeyIdOption(JSONCryptoHelper.KEY_ID_OPTIONS.OPTIONAL));
        assertTrue("kid", decDec.getKeyId().equals("mallet"));
        assertTrue("Bad JOSE RSA",
                unEncJson.toString()
                    .equals(JSONParser.parse(decDec.getDecryptedData(malletKeys.getPrivate())).toString()));
        for (int i = 1; i < 5; i++) {
            try {
                JSONObjectReader enc = readEncryption("err-missing-alg" + i + ".json");
                if (enc.hasProperty(JSONCryptoHelper.RECIPIENTS_JSON)) {
                    enc.getEncryptionObjects(new JSONCryptoHelper.Options());
                } else {
                    enc.getEncryptionObject(new JSONCryptoHelper.Options());
                }
                fail("didn't fail");
            } catch (Exception e) {
                checkException(e, "Property \"" + JSONCryptoHelper.ALGORITHM_JSON + "\" is missing");
            }
        }
        variousEncryptionErrors("err-wrong-alg1.json", "Property \"" + JSONCryptoHelper.ENCRYPTED_KEY_JSON + "\" is missing");
        variousEncryptionErrors("err-wrong-alg2.json", "Property \"" + JSONCryptoHelper.N_JSON + "\" is missing");
        variousEncryptionErrors("err-wrong-alg3.json", "Property \"" + JSONCryptoHelper.EPHEMERAL_KEY_JSON + "\" is missing");
        variousEncryptionErrors("err-wrong-alg4.json", "Property \"redundant\" was never read");
        variousEncryptionErrors("err-wrong-alg5.json", "Multiple encryptions only permitted for key wrapping schemes");
        variousEncryptionErrors("err-wrong-alg6.json", "Unexpected algorithm: SUPERCRYPTO");
        variousEncryptionErrors("err-wrong-alg7.json", "Unexpected algorithm: SUPERCRYPTO");
        variousEncryptionErrors("err-bad-id.json", "Property \"" + JSONCryptoHelper.KEY_ID_JSON + "\" was never read");

        encryptionFieldErrors("err-bad-ciphertext.json",
                              "p256",
                              "Authentication error on algorithm: A256CBC_HS512");

        encryptionFieldErrors("err-bad-tag.json",
                              "p256",
                              "Incorrect parameter \"" + JSONCryptoHelper.TAG_JSON + "\" length (22) for A256CBC_HS512");

        encryptionFieldErrors("err-bad-iv.json",
                              "p256",
                              "Incorrect parameter \"" + JSONCryptoHelper.IV_JSON + "\" length (12) for A256CBC_HS512");

        encryptionFieldErrors("err-bad-key1.json",
                              "p256",
                              null);
/*
        encryptionFieldErrors("err-bad-key2.json",
                              "p256",
                              "Incorrect parameter \"key\" length (32) for A256CBC-HS512");
        
*/
        KeyAgreement keyAgreement = KeyAgreement.getInstance("ECDH");
        keyAgreement.init(alice.getPrivate());
        keyAgreement.doPhase(bob.getPublic(), true);
        assertTrue("Bad ECDH", Base64URL.encode(keyAgreement.generateSecret()).equals(ECDH_RESULT_WITHOUT_KDF));
        rsaOaep("r2048#rsa-oaep@a128gcm@kid.json");
        rsaOaep("r2048#rsa-oaep-256@a256gcm@kid.json");
        encryptionOptionTest();
        
        rfc7748Encryption();
        
        String derivedKey = "pgs50IOZ6BxfqvTSie4t9OjWxGr4whiHo1v9Dti93CRiJE2PP60FojLatVVrcjg3BxpuFjnlQxL97GOwAfcwLA";
        String kdfed = Base64URL.encode(EncryptionCore.concatKdf(
                Base64URL.decode("Sq8rGLm4rEtzScmnSsY5r1n-AqBl_iBU8FxN80Uc0S0"),
                ContentEncryptionAlgorithms.A256CBC_HS512.getJoseAlgorithmId(), 
                64));
        assertTrue("kdf", derivedKey.equals(kdfed));
    }

    @Test
    public void PrettyPrinting() throws Exception {
        StringBuilder json = new StringBuilder();
        int index = 0;
        for (byte c : ArrayUtil.getByteArrayFromInputStream(getClass().getResourceAsStream("pretty.txt"))) {
            if (c == '\n') {
                if (index == 0) {
                    String input = json.toString();
                    if (input.length() == 0) {
                        continue;
                    }
                    String output = JSONParser.parse(input).toString();
                    assertTrue("'" + output + "'" + input + "'", input.equals(output));
                    json.setLength(0);
                    continue;
                }
                index = -1;
            }
            index++;
            json.append((char) c);
        }
    }
}
